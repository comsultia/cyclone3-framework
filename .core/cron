#!/usr/bin/perl

BEGIN
{
	$TOM::engine='cron';
	$main::debug=1 if $ENV{'TERM'};
	if (!$ENV{'CYCLONE3PATH'})
	{
		$ENV{'CYCLONE3PATH'}="/www/TOM" if -d "/www/TOM"; # obsolete
		$ENV{'CYCLONE3PATH'}="/Cyclone3" if -d "/Cyclone3";
		$ENV{'CYCLONE3PATH'}="/srv/Cyclone3" if -d "/srv/Cyclone3";
	}
	require $ENV{'CYCLONE3PATH'}."/.core/.libs/TOM.pm";
	$CRON::P=$TOM::P;
	#$CRON::P=`pwd`;
	#$CRON::P=~s|(.*)/.*?\n$|\1|;
	#unshift @INC,$CRON::P."/.core/.libs";
}

#$TOM::P=$CRON::P;

use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8;
#use conv;
#use enc3;
#use iconv;
use strict; # scrict code
use Mysql;
use TOM::Debug;
use TOM::Debug::logs;
use TOM::lock;
use TOM::Database::connect;
use CRON;
use CRON::debug;
use Time::HiRes qw( usleep ualarm gettimeofday tv_interval );
use Parallel::ForkManager;
use Proc::ProcessTable;

require $TOM::P."/.core/_config/cron.conf";

our $type=$ARGV[0];
$0.=" :".$type;
exit(0) unless $type;
$cron::P=$CRON::P;
$main::time_current=$cron::time_current=time;
local (
	$cron::Tsec,
	$cron::Tmin,
	$cron::Thour,
	$cron::Tmday,
	$cron::Tmom,
	$cron::Tyear,
	$cron::Twday,
	$cron::Tyday,
	$cron::Tisdst) = localtime($cron::time_current);
   # doladenie casu
   $cron::Tyear+=1900;$cron::Tmom++;
   # formatujem cas
   local (
   	$cron::Fsec,
	$cron::Fmin,
	$cron::Fhour,
	$cron::Fmday,
	$cron::Fmom,
	$cron::Fyear,
	$cron::Fwday,
	$cron::Fyday,
	$cron::Fisdst
	) = (
	sprintf ('%02d', $cron::Tsec),
	sprintf ('%02d', $cron::Tmin),
	sprintf ('%02d', $cron::Thour),
	sprintf ('%02d', $cron::Tmday),
	sprintf ('%02d', $cron::Tmom),
	$cron::Tyear,
	$cron::Twday,
	$cron::Tyday,
	$cron::Tisdst
	);
	
	$tom::Tsec=$main::Tsec=$cron::Tsec;
	$tom::Tmin=$main::Tmin=$cron::Tmin;
	$tom::Thour=$main::Thour=$cron::Thour;
	$tom::Tmday=$main::Tmday=$cron::Tmday;
	$tom::Tmom=$main::Tmom=$cron::Tmom;
	$tom::Tmon=$main::Tmon=$cron::Tmon;
	$tom::Tyear=$main::Tyear=$cron::Tyear;
	$tom::Twday=$main::Twday=$cron::Twday;
	$tom::Tyday=$main::Tyday=$cron::Tyday;
	$tom::Tisdst=$main::Tisdst=$cron::Tisdst;
	$tom::Fsec=$main::Fsec=$cron::Fsec;
	$tom::Fmin=$main::Fmin=$cron::Fmin;
	$tom::Fhour=$main::Fhour=$cron::Fhour;
	$tom::Fmday=$main::Fmday=$cron::Fmday;
	$tom::Fmom=$main::Fmom=$cron::Fmom;
	$tom::Fmon=$main::Fmon=$cron::Fmon;
	$tom::Fyear=$main::Fyear=$cron::Fyear;
	$tom::Fwday=$main::Fwday=$cron::Fwday;
	$tom::Fyday=$main::Fyday=$cron::Fyday;
	$tom::Fisdst=$main::Fisdst=$cron::Fisdst;
	
	$main::Fyear_sub=$main::Fyear;
	$main::Fyear_sub=~s/^..//;
	
$TOM::engine_ready=1;
$TOM::DEBUG_log_file=90;
$TOM::engine='cron.'.$type;

my $var=10;#rand(1);
#main::_log("starting cron, sleeping $var secs.");


#Time::HiRes::sleep($var);

#main::_log("is RabbitMQ active? ".$Ext::RabbitMQ::service);

my $lock=new TOM::lock("CRON ".$type) || exit;

CRON::waitload($CRON::LOADAVG);

my $lock=new TOM::lock("CRON ".$type) || exit;

if (-e $CRON::P."/_config/cron.".$type.".cml" || -e $CRON::P."/_type/cron.".$type.".cml")
{
	main::_log("event '$type' defined");
	$TOM::DB{'main'}{'name'}='TOM' unless $TOM::DB{'main'}{'name'};
	TOM::Database::connect::multi('main');
	$DBH=$main::DB{'main'};
	if ($DBH)
	{main::_log("connect ok");}else
	{
		main::_log("cannot connect MySQL (), exiting",1);
		main::_log("cannot connect MySQL (), exiting",1,"cron.err");
		exit(0);
	}
	
	
	my $file_data;
	open (HND,"<".$CRON::P."/_type/cron.".$type.".cml");
	while (my $data=<HND>){$file_data.=$data;} 
	open (HND,"<".$CRON::P."/_config/cron.".$type.".cml");
	while (my $data=<HND>){$file_data.=$data;}
	while ($file_data=~s|<MODULE>(.*?)</MODULE>||s)
	{
		my $data=$1;
		TOM::Utils::vars::replace($data);
		my %mdl_env;
		while ($data=~s|<VAR id="(.*?)" value="(.*?)" />||s)
		{
			next unless $1;
			next if not defined $2;
			$mdl_env{$1}=$2;
			$mdl_env{$1}=~s|\"|"|g;
		}
		if ($mdl_env{'-ignore-if-job'} && $Ext::RabbitMQ::service)
		{
			# ignoring
			main::_log("ignoring, because JOB engine is running");
			next;
		}
		module(%mdl_env);
	}
}
else
{
	main::_log("event $type not defined, exiting...",1);
	exit(0);
}

foreach (%main::DB)
{
	#$main::DB{$_}->DESTROY();
	undef $main::DB{$_};
}
undef $DBH;



# zacina praca s jednotlivymi hostami;

CRON::waitload($CRON::LOADAVG);
our $pm = new Parallel::ForkManager(1);



sub file2domain
{
	my $file=shift;
	my $domain;
	
	foreach my $part(split('/',$file))
	{
		next unless $part;
		if ($part=~s/^!//)
		{
			$domain=$part.".".$domain;
		}
		else
		{
#			$domain.="$part";
			$domain=~s|\.$||;
			$domain.="/".$part;
		}
	}
	$domain=~s/\.$//;

	return $domain;
}



%CRON::hosts=();


#main::_log("automatic analyze of hosts in '$TOM::P'");
if (opendir (DIR,$TOM::P))
{
	my @files=readdir DIR;
	foreach my $file(@files)
	{
		
		next if $file=~/^(\.|\.\.)$/;
		if (
				(-d $TOM::P."/".$file) &&
				($file=~/^([^_\.][!\w\.\-]+|.*\/[^_\.][!\w\.]+)$/) &&
				(not $file=~/(!media|!www)/)
			)
		{
			if (opendir (DIR1,$TOM::P."/".$file)){foreach (readdir DIR1){if (($_ ne ".")&&($_ ne "..")){push @files,$file."/".$_;}}}
		}
		if ($file=~s/\/local.conf$//)
		{
#			main::_log(file2domain($file));
			$CRON::hosts{file2domain($file)}=$file;
		}
		
	}
}


#tie ($TOM::DEBUG_log_file, 'TOM::Debug::varspy');



foreach (sort keys %CRON::hosts)
{
#	main::_log("host $_ in $CRON::hosts{$_}");
	
	if (-e $CRON::P."/".$CRON::hosts{$_}."/.cron_ignore")
	{
#		main::_log("requested ignore to domain '$_'");
		next;
	}
	
	if (-e $CRON::P."/".$CRON::hosts{$_}."/cron.".$type.".cml")
	{
		main::_log("host fork '$_'");
		CRON::waitload($CRON::LOADAVG);
		
		$main::pm->start and next;
#		$0.=" [".$tom::H."]";
		srand (time ^ $$);
#		main::_log(" 'ok' from fork '$_'");
#		main::_log("fork with debug level='$TOM::DEBUG_log_file'");
		
		$cron::P=$CRON::P."/".$CRON::hosts{$_};
		$tom::P=$cron::P;
		$TOM::P=$CRON::P;
		
#		main::_log("start forked cron on path='$cron::P'");
		CRON::waitload($CRON::LOADAVG);
		require TOM::Domain;
		$TOM::DEBUG_log_file=98;
		
		my $file_data;
		if (($tom::Pm)&&(-e $tom::Pm."/cron.m".$type.".cml"))
		{
			open (HND,"<".$tom::Pm."/cron.m".$type.".cml");
			while (my $data=<HND>){$file_data.=$data;}
		}
		open (HND,"<".$cron::P."/cron.".$type.".cml");
		while (my $data=<HND>){$file_data.=$data;}
		
		# poriesim includy
		while ($file_data=~s|<ADDTYPE (.*?)/>|<!TMP!>|)
		{
			use CML;
			my %env0=CML::VARhash($1);
			my $var;
			main::_log("Importing type ".$env0{name});
			
			if ($env0{global} eq "1")
			{
				my $filename=$TOM::P."/_type/g_".$env0{'name'}.".cron.type";
				if (-e $filename)
				{
					#my $file_data2;
					open (HND2,"<".$filename);
					while (my $data=<HND2>){$var.=$data;}
				}
			}
			
			$file_data=~s|<!TMP!>|$var|g;
		}
	 
	 
	 
		if ($file_data=~/<MODULE>/)
		{
			$TOM::DB{'main'}{'name'}=$TOM::DB_name unless $TOM::DB{'main'}{'name'};
			
			TOM::Database::connect::multi('main');
			$DBH=$main::DB{'main'};
			
			while ($file_data=~s|<MODULE>(.*?)</MODULE>||s)
			{
				my $data=$1;
				TOM::Utils::vars::replace($data);
				my %mdl_env;
				while ($data=~s|<VAR id="(.*?)" value="(.*?)" />||s)
				{
					next unless $1;
					next if not defined $2;
					$mdl_env{$1}=$2;
					$mdl_env{$1}=~s|\"|"|g;
				}
				if ($mdl_env{'-ignore-if-job'} && $Ext::RabbitMQ::service)
				{
					# ignoring
					main::_log("ignoring, because JOB engine is running");
					next;
				}
				CRON::waitload($CRON::LOADAVG);
				main::_log("call module with debug level='$TOM::DEBUG_log_file'");
				
				if ($mdl_env{'-fork'})
				{
					main::_log("running module in separate fork");
					my $pm2 = new Parallel::ForkManager(2);
					my $pid = $pm2->start and next;
					srand (time ^ $$);
					sleep(2);
					undef %main::DB;
					TOM::Database::connect::multi('main');
					CRON::module(%mdl_env);
					$pm2->finish();
				}
				
				$0=~s| {.*?}||;
				$0.=" {".$mdl_env{'-category'}.'-'.$mdl_env{'-name'}."}";

				CRON::module(%mdl_env);
			}
		}
		
		main::_log("end forked cron");
		
		$main::pm->finish();
	}
	else
	{
	}
}

main::_log("parent cron is waitig to exit of all children");

$pm->wait_all_children;

main::_log("closing parent cron process");

$lock->close();

exit(0);


