#!/usr/bin/perl
BEGIN
{
	$TOM::engine='job';
#	if ($ARGV[0] eq "debug"){$main::debug=1;shift @ARGV;}
	$main::debug=1 if $ENV{'CYCLONE3DEBUG'};
	if (!$ENV{'CYCLONE3PATH'})
	{
		$ENV{'CYCLONE3PATH'}="/www/TOM" if -d "/www/TOM";
		$ENV{'CYCLONE3PATH'}="/Cyclone3" if -d "/Cyclone3";
		$ENV{'CYCLONE3PATH'}="/srv/Cyclone3" if -d "/srv/Cyclone3";
	}
	require $ENV{'CYCLONE3PATH'}."/.core/.libs/TOM.pm";
	$0.=".worker";
#	setpriority $$,$$,19;
}

use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8; # encode = fromutf8, decode=toutf8
use strict; # scrict code
use vars qw//;
our $sig_term=1;
our $class_=our $class=$ARGV[0];$class="::".$class if $class;

######################################################################################
######################################################################################


my $t=track TOM::Debug("Engine '$TOM::engine'$class and domain init");
	my $t0=track TOM::Debug('TOM::Engine::job');
		require TOM::Engine::job;
		$TOM::DB{'main'}{'name'}="TOM"
			unless $TOM::DB{'main'}{'name'};
		TOM::Database::connect::multi('main');
	$t0->close();
$t->close();


######################################################################################
######################################################################################


my $t_domain=track TOM::Debug("Domain service init");
	
	TOM::Database::connect::multi(@TOM::DB_pub_connect)
		|| die "Error during connection request to database server\n";
	# TODO:[fordinal] odstranit spetnu kompatibilitu $main::DBH
	$main::DBH=$main::DB{main};
	
	$TOM::engine_ready=1;
	$TOM::DEBUG_log_file=90;
	#$0="job.worker [".($tom::H_orig || 'global').$class."]";
	$0.=" :".$class_ if $class_;
	$0.=" {}";
	
	$TOM::engine.='.'.$class_ if $class_;
	
$t_domain->close;

######################################################################################
######################################################################################
######################################################################################
######################################################################################

use Encode qw(decode encode);
use JSON;
use Data::Dumper;
use Ext::Redis::_init;
our $alarm=$ENV{'TIMEOUT'};
	 $alarm||=30; # autoexit after 10 seconds of inactivity
our $time_max=1200;
our $time_start=time();

my $service=Ext::RabbitMQ::service();

# cyclone3.job
#$service->_channel->declare_exchange('exchange' => encode('UTF-8', 'cyclone3.job'),'type' => encode('UTF-8', 'direct'),'durable' => 1);

# open two channels
# cyclone3.job: cyclone3.job.domain_tld -> cyclone3.job.domain_tld

# domain
my $channel_domain=$Ext::RabbitMQ::service->open_channel();
	$channel_domain->{'arc'}->confirm();
$channel_domain->declare_exchange(
	'exchange' => encode('UTF-8', 'cyclone3.notify'),
	'type' => encode('UTF-8', 'direct'),
	'durable' => 1);
$channel_domain->declare_queue(
	'exchange' => encode('UTF-8', 'cyclone3.job'),
	'queue' => encode('UTF-8', 'cyclone3.job.'.($tom::H_orig || '_global').$class),'durable' => 1
);
main::_log("declare_queue '".'cyclone3.job.'.($tom::H_orig || '_global').$class."'");
$channel_domain->bind_queue(
	'exchange' => encode('UTF-8', 'cyclone3.job'),
	'queue' => encode('UTF-8', 'cyclone3.job.'.($tom::H_orig || '_global').$class),
	'routing_key' => encode('UTF-8', ($tom::H_orig || 'job').$class)
);
main::_log("routing_key '".($tom::H_orig || 'job').$class."'");

$Redis->hset('C3|Rabbit|queue|'.'cyclone3.job.'.($tom::H_orig || '_global').$class,'time',time());
$Redis->expire('C3|Rabbit|queue|'.'cyclone3.job.'.($tom::H_orig || '_global').$class,3600);

# database
my $channel_database=$Ext::RabbitMQ::service->open_channel();
	$channel_database->{'arc'}->confirm();
$channel_database->declare_queue(
	'exchange' => encode('UTF-8', 'cyclone3.job'),
	'queue' => encode('UTF-8', 'cyclone3.job.db:'.($TOM::DB{'main'}{'name'} || 'TOM').$class),'durable' => 1
);
main::_log("declare_queue '".'cyclone3.job.db:'.($TOM::DB{'main'}{'name'} || 'TOM').$class."'");
$channel_database->bind_queue(
	'exchange' => encode('UTF-8', 'cyclone3.job'),
	'queue' => encode('UTF-8', 'cyclone3.job.db:'.($TOM::DB{'main'}{'name'} || 'TOM').$class),
	'routing_key' => encode('UTF-8', 'db:'.($TOM::DB{'main'}{'name'} || 'TOM').$class)
);
main::_log("routing_key '".'db:'.($TOM::DB{'main'}{'name'} || 'TOM').$class."'");

$Redis->hset('C3|Rabbit|queue|'.'cyclone3.job.db:'.($TOM::DB{'main'}{'name'} || 'TOM').$class,'time',time());
$Redis->expire('C3|Rabbit|queue|'.'cyclone3.job.db:'.($TOM::DB{'main'}{'name'} || 'TOM').$class,3600);

if (%tom::sapsync_rabbitmq)
{
	main::_log("second RabbitMQ connection");
	$Ext::RabbitMQ::sap_service = Ext::RabbitMQ::RabbitFoot->new()->load_xml_spec()->connect(
		'timeout' => (3600*24),
		'heatbeat' => $Ext::RabbitMQ::heartbeat,
		'port' => 5672,
		'heartbeat' => $Ext::RabbitMQ::heartbeat,
		%tom::sapsync_rabbitmq
	);
	my $channel_exclusive=$Ext::RabbitMQ::sap_service->{'_exclusive_channel'}=$Ext::RabbitMQ::sap_service->open_channel();
		$channel_exclusive->{'arc'}->confirm();
	push @Ext::RabbitMQ::services, $Ext::RabbitMQ::sap_service;
}

require Tomahawk;

sub callback {
	alarm 0;
	local $main::_canexit;
	local $main::request_code=Utils::vars::genhash(8);
	my $var = shift;
		if ($var->{'header'}->{'headers'}->{'message_id'})
		{
			if ($Redis)
			{
				$Redis->del('RabbitMQ|'.$var->{'header'}->{'headers'}->{'message_id'});
				$Redis->srem('RabbitMQ|msgs','RabbitMQ|'.$var->{'header'}->{'headers'}->{'message_id'});
			}
			$main::request_code=substr($var->{'header'}->{'headers'}->{'message_id'},0,8);
		}
	my $body = $var->{'body'}->{'payload'};
	my $this_channel=$service->_channels->{$var->{'body'}->{'channel'}};
#	print Dumper($body);
	
	$0=~s|{.*?}|{reading...}|;
	
	my $timestamp=$var->{'header'}->{'timestamp'};
	my $user_id=$var->{'header'}->{'user_id'};
	my $delivery_tag=$var->{'deliver'}->{'method_frame'}->{'delivery_tag'};
	my $routing_key=$var->{'deliver'}->{'method_frame'}->{'routing_key'};
	my $deduplication;
		$deduplication=$var->{'header'}->{'headers'}->{'deduplication'} || 'false';
	
	my %env0=main::ctogmdatetime($timestamp,format=>1);
	my $time_str=$env0{'year'}.'-'.$env0{'mon'}.'-'.$env0{'mday'}.'T'.$env0{'hour'}.':'.$env0{'min'}.':'.$env0{'sec'}.'Z';
	main::_log("<={".($var->{'header'}->{'headers'}->{'message_id'})."} worker_callback created='$time_str' payload size=".length($var->{'body'}->{'payload'})."b",{
		'data' => {
			'id_s' => $var->{'header'}->{'headers'}->{'message_id'},
			'routing_key_s' => $routing_key,
			'deduplication_s' => $deduplication,
#			'created_i' => $timestamp,
			'created_d' => $time_str,
			'elapsed_i' => (time()-$timestamp),
			'payload_s' => $body,
		}
	});
	
	my $key_entity=TOM::Digest::hash($tom::H.$var->{'body'}->{'payload'});
	if ($deduplication && ($deduplication ne "false") && $Redis)
	{
		my $timestamp_exec=$Redis->hget('C3|job|'.$key_entity,'finished');
		my $timestamp_start=$Redis->hget('C3|job|'.$key_entity,'started');
		my $process_start=$Redis->hget('C3|job|'.$key_entity,'process');
		
		my %env0=main::ctodatetime($timestamp_exec,format=>1);
		my $time_str=$env0{'year'}.'-'.$env0{'mon'}.'-'.$env0{'mday'}.' '.$env0{'hour'}.':'.$env0{'min'}.':'.$env0{'sec'};
		
		my %env0=main::ctodatetime($timestamp_start,format=>1);
		my $time_start_str=$env0{'year'}.'-'.$env0{'mon'}.'-'.$env0{'mday'}.' '.$env0{'hour'}.':'.$env0{'min'}.':'.$env0{'sec'};
		
		main::_log(" deduplication hash='$key_entity' time_stop='".(
			do {
				if ($timestamp_exec)
				{
					$time_str
				}
				else
				{
					'null';
				}
			}
		)."'");
		
		$timestamp_exec=time()
			if $timestamp_exec > time();
		
		# if timestamp of message is lower than execution timestamp
		if ($timestamp_start && ($timestamp_start < time()) && !$timestamp_exec)
		{
			my $duration=time() - $timestamp_start;
			main::_log(" job '$key_entity' already running from '$time_start_str' duration='".($duration)."s' \@$process_start");
			
			my ($process_hostname,$process_id) = split(':',$process_start);
			if ($process_hostname eq $TOM::hostname 
				&& $duration > 600) # if process crashed because of segfault, try to re-run only after 600 seconds
			{
				main::_log(" same hostname, checking if process running");
				my $exists = kill 0, $process_id;
				if ($exists)
				{
					main::_log(" yes, running");
					$this_channel->ack();
					alarm $alarm;
					$0=~s|{.*?}|{}|;
					return 0;
				}
				else
				{
					main::_log(" nope, also try to run again");
					# deduplication job start
					$Redis->hset('C3|job|'.$key_entity,'started',time(),sub {});
					$Redis->hset('C3|job|'.$key_entity,'process',$TOM::hostname.':'.$$,sub {});
					$Redis->hdel('C3|job|'.$key_entity,'finished',sub {});
					$Redis->expire('C3|job|'.$key_entity,86400,sub {});
				}
			}
			elsif ($duration > (3600 * 6))
			{
				main::_log(" running too long, what happens? (i'm trying to re-run this job, and you try to search bug in logs)",1);
				# deduplication job start
				$Redis->hset('C3|job|'.$key_entity,'started',time(),sub {});
				$Redis->hset('C3|job|'.$key_entity,'process',$TOM::hostname.':'.$$,sub {});
				$Redis->hdel('C3|job|'.$key_entity,'finished',sub {});
				$Redis->expire('C3|job|'.$key_entity,86400,sub {});
			}
			else
			{
				$this_channel->ack();
				alarm $alarm;
				$0=~s|{.*?}|{}|;
				return 0;
			}
		}
		elsif ($timestamp < $timestamp_exec)
		{
			main::_log(" job '$key_entity' already executed at '$time_str' (".($timestamp_exec-$timestamp)."s after this message)");
			$this_channel->ack();
			alarm $alarm;
			$0=~s|{.*?}|{}|;
			return 0;
		}
		else
		{
			# deduplication job start
			$Redis->hset('C3|job|'.$key_entity,'started',time(),sub {});
			$Redis->hset('C3|job|'.$key_entity,'process',$TOM::hostname.':'.$$,sub {});
			$Redis->hdel('C3|job|'.$key_entity,'finished',sub {});
			$Redis->expire('C3|job|'.$key_entity,86400,sub {});
		}
	}
	
	my $t0=track TOM::Debug('eval','timer'=>1);
	eval
	{
		
		$main::time_current=$tom::time_current=time();
		local (
			$tom::Tsec,
			$tom::Tmin,
			$tom::Thour,
			$tom::Tmday,
			$tom::Tmom,
			$tom::Tyear,
			$tom::Twday,
			$tom::Tyday,
			$tom::Tisdst) = localtime($tom::time_current);
#		main::_log("hour=$tom::Thour");
		# doladenie casu
		$tom::Tyear+=1900;$tom::Tmom++;
		# zaciatok dnesneho dna
		$main::time_day=$tom::time_current-($tom::Thour*3600)-($tom::Tmin*60)-$tom::Tsec;
		# formatujem cas
		local (
			$tom::Fsec,
			$tom::Fmin,
			$tom::Fhour,
			$tom::Fmday,
			$tom::Fmom,
			$tom::Fyear,
			$tom::Fwday,
			$tom::Fyday,
			$tom::Fisdst
			) = (
			sprintf ('%02d', $tom::Tsec),
			sprintf ('%02d', $tom::Tmin),
			sprintf ('%02d', $tom::Thour),
			sprintf ('%02d', $tom::Tmday),
			sprintf ('%02d', $tom::Tmom),
			$tom::Tyear,
			$tom::Twday,
			$tom::Tyday,
			$tom::Tisdst);
		
		$tom::datetime=$tom::Fyear.'-'.$tom::Fmom.'-'.$tom::Fmday.' '.$tom::Fhour.':'.$tom::Fmin.':'.$tom::Fsec;
		
		no strict;
		my $payload=from_json($var->{'body'}->{'payload'});
#		print $payload;
		use Data::Dumper;
#		main::_log('dump='.Dumper($var));
		if ($payload->{'function'})
		{
			my $function=$payload->{'function'};
			$0=~s|{.*?}|{$function}|;
			main::_log("call function '$function'",{
				'data' => {
					'function_name_s' => $function
				}
			});
			$main::nojobify=1; # nojobify, just execute!
			&$function(@{$payload->{'args'}});
			main::_log("end of call $@");
		}
		elsif ($payload->{'job'})
		{
			my $job=$payload->{'job'};
			my $job_name=($job->{'file'} || $job->{'name'});
			$0=~s|{.*?}|{$job_name}|;
			main::_log("call job '".$job_name."'",{
				'data' => {
					'job_name_s' => $job_name
				}
			});
			
			$main::nojobify=1; # nojobify, execute!
			my $job=new TOM::Engine::job::module(
				$job,
				$payload->{'args'}
			);
			undef $main::nojobify; # jobify everything required
			$job->execute() if $job;
			main::_log("end of call $@");
		}
		elsif ($payload->{'pub-mdl'})
		{
			$tom::dsgn='default';
			my $mdl=$payload->{'pub-mdl'};
			$0=~s|{.*?}|{$mdl}|;
			main::_log("call module '".$mdl."'",{
				'data' => {
					'mdl_name_s' => $mdl
				}
			});
			
			main::_log("warming up",{
				'severity' => 3,
				'facility' => 'warmup',
				'data' => {
#					'id_s' => $key,
#					'mdl_s' => $mdl_C{'-addon'}.'-'.$mdl_C{'-name'}.'.'.$mdl_C{'-version'},
#					'engine_s' => $TOM::engine,
#					'requested_routing_key_s' => $queue,
#					'requested_id_s' => $id,
#					'requested_datetime_s' => $datetime_string
				}
			});
			
			$main::nojobify=1; # nojobify, just execute!
			
			Ext::Redis::_restore(\$payload->{'env'});
			Ext::Redis::_restore(\$payload->{'FORM'});
			Ext::Redis::_restore(\$payload->{'key'});
			Ext::Redis::_restore(\$payload->{'setup'});
			Ext::Redis::_restore(\$payload->{'a210'});
			
			if (!$payload->{'env'})
			{
				main::_log("missing payload.env, ignore execution",1);
				return undef;
			}
			if (!$payload->{'FORM'})
			{
				main::_log("missing payload.FORM, ignore execution",1);
				return undef;
			}
			if (!$payload->{'key'})
			{
				main::_log("missing payload.key, ignore execution",1);
				return undef;
			}
			if (!$payload->{'setup'})
			{
				main::_log("missing payload.setup, ignore execution",1);
				return undef;
			}
			if (!$payload->{'a210'})
			{
				main::_log("missing payload.a210, ignore execution",1);
				return undef;
			}
			
			%main::env=%{$payload->{'env'}};
			%main::FORM=%{$payload->{'FORM'}};
			%main::key=%{$payload->{'key'}};
			local %tom::setup=%{$payload->{'setup'}};
			if ($payload->{'a210'})
			{
				%main::a210=%{$payload->{'a210'}};
				$main::a210{'node'}=\%main::a210;
			}
			local $tom::lng=$payload->{'lng'} || $tom::lng;
			
			my ($out)=Tomahawk::module(%{$payload->{'args'}},'-stdout_dummy'=>1,'-cache_backend'=>0,'-cache_ignore'=>1);
			main::_log("end of call $@");
			
			undef $main::nojobify; # jobify everything required
			undef %main::env;
			undef %main::FORM;
			undef %main::key;
#			undef %tom::setup;
			undef %main::a210;
		}
		else
		{
			main::_log("unknown type of callback",1);
		}
		Coro::cede;
	};
	$t0->close();
	if ($deduplication && $Redis)
	{
		# deduplication job end
		$Redis->hdel('C3|job|'.$key_entity,'started',sub {});
		$Redis->hdel('C3|job|'.$key_entity,'process',sub {});
		$Redis->hset('C3|job|'.$key_entity,'finished',time(),sub {});
		$Redis->expire('C3|job|'.$key_entity,86400,sub {});
	}
	if ($@)
	{
		main::_log("job error ".$@,1);
#		$this_channel->ack();
		exit;
	}
	$this_channel->ack();
	alarm $alarm;
	$0=~s|{.*?}|{}|;
	if ((time() - $time_start) > $time_max)
	{
		main::_log("worker running too long, shutdown",{
			'data' => {
				'elapsed_i' => (time() - $time_start)
			}
		});
		exit;
	}
}

$service->_channel->qos(
	prefetch_count => 1,
	prefetch_size => 1
);
$channel_domain->qos(
	prefetch_count => 1,
	prefetch_size => 1
);
$channel_database->qos(
	prefetch_count => 1,
	prefetch_size => 1
);

alarm $alarm;
setpriority $$,$$,19;

$service->_channel->consume(
	on_consume => \&callback,
	no_ack => 0,
);
$channel_domain->consume(
	on_consume => \&callback,
	no_ack => 0,
);
$channel_database->consume(
	on_consume => \&callback,
	no_ack => 0,
);

# and now renice
use POSIX;
POSIX::nice(19);
AnyEvent->condvar->recv;
