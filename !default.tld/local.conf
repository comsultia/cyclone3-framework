#!/usr/bin/perl
package tom;
use open ':utf8', ':std';
use encoding 'utf8';
use utf8;
use strict;
use warnings;

=head1 NAME

local.conf

=cut

=head2 PATH TO MASTER

define path to master domain

 our $Pm=$TOM::P."/!example.tld";

require master domain configuration before overriding by this local.conf

 require $Pm."/master.conf";

=cut

our $Pm=$TOM::P."/!default.web";
require $Pm."/master.conf";



=head2 URI

definition of this domain name

 our $H="example.tld";

full uri of this domain

 our $H_www="http://www.example.tld";

=cut

our $H="default.web";
our $H_www="http://default.web";



=head2 MEDIA URI

Overrides master.conf, also use only when in this domain is media source different to master domain

full uri to media

 #$tom::H_media="http://media.localhost.tld";

uri to 'grf' in media ( .gif, .jpg, ect... )

 #$tom::H_grf=$tom::H_media."/grf";

uri to 'css' files

 #$tom::H_css=$tom::H_media."/css";

uri to media files of L<a500|source-doc/".core/.libs/App/500"> application

 #$tom::H_500=$tom::H_media."/500";

=cut

#$tom::H_media="http://media.localhost.tld";
#$tom::H_grf=$tom::H_media."/grf";
#$tom::H_css=$tom::H_media."/css";
#$tom::H_500=$tom::H_media."/500";



=head2 DATABASE SOURCES

definition of name default database source named 'main'

 $TOM::DB{'main'}{'name'}="example_tld";	

example of definition another database source

 #$TOM::DB{'lite'}{type}="DBI";
 #$TOM::DB{'lite'}{uri}='dbi:SQLite:dbname='.$tom::P.'/_data/testdb.db';

connect to database source 'lite' by default

 #push @TOM::DB_pub_connect, "lite";

=cut

$TOM::DB{'main'}{'name'}="default_web";



=head2 CONTACTS

Overrides L<master.conf|source-doc/"!example.tld/master.conf">, also use only when contacts is in this domain different

 #$TOM::contact{'manager'}="roman.fordinal\@comsultia.com";
 # ...
 #$TOM::contact{'WEB'}="";
 #$TOM::contact{'DEV'}="";
 #$TOM::contact{'CONT'}="";
 #$TOM::contact{'TECH'}="";

=cut

#$TOM::contact{'manager'}="roman.fordinal\@comsultia.com";
# ...
#$TOM::contact{'WEB'}="";
#$TOM::contact{'DEV'}="";
#$TOM::contact{'CONT'}="";
#$TOM::contact{'TECH'}="";



=head2 LANGUAGES

default language

 our $LNG="en";
 our $lng=$LNG; # do not modify this line

autodetect language?

 $TOM::LNG_autodetect=1;

list of accepted languages in this domain ( when domain is multilingual )

 @TOM::LNG_accept=($lng,'de','sk');

sending info about selected language permament in link? ( as '__lng' param ). Very usable when you will generate rewrited links which containt info about language: http://example.tld/en/home, http://example.tld/en/contacts, http://example.tld/sk/uvod, http://example.tld/sk/kontakt

 $TOM::LNG_permanent=1;

when info about selected language is permanently sended in links, use only language from list of accepted languages? When __lng is out of list accepted languages, then is setup to default $lng defined upper.

 $TOM::LNG_permanent_accepted=1;

=cut

our $LNG="en";
our $lng=$LNG; # do not modify this line

#$TOM::LNG_autodetect=1;

@TOM::LNG_accept=($lng);

$TOM::LNG_permanent=1;
$TOM::LNG_permanent_accepted=1;



=head2 DOC GENERATING

type of document ( HTML, XHTML, XML, ... )

 $pub::DOC="XHTML";

allow to include layers when called?

 $TOM::LAYERS=1;

allow to include pre.type when exists?

 $TOM::type_pre=1;

allow to include post.type when exists?

 #$TOM::type_post=1;

hash datas sended over links? ( security ). default si '1'

 #$TOM::type_code=0;

automatic redirections when requested uri is not actual to newest links? ( fantastic thing :)

 $tom::rewrite_301=1;

Structure of this domain service ( webpage ) is defined by L<a210|app/"210/"> ( Sitemap )

 $tom::a210=1;

=cut

$pub::DOC="XHTML";
$TOM::LAYERS=1;
$TOM::type_pre=1;
#$TOM::type_post=1;
$TOM::type_code=0;
$tom::rewrite_301=1;
$tom::a210=1;



=head2 STATISTICS

List of IP adresses excluded from statistics

 %App::110::IP_exclude=
 (
  %TOM::a110_IP_exclude,
  # '192.168.0.1' => 1, # example
 );

=cut

 %App::110::IP_exclude=
 (
	%TOM::a110_IP_exclude,
	#'192.168.0.1' => 1, # example
 );



=head2 DEBUGGING

Yes, load debug libs

 $TOM::DEBUG=1;

Analyse modules

 $TOM::DEBUG_mdl=1;

Analyse cache

 $TOM::DEBUG_cache=1;

Depth of logging into file

 $TOM::DEBUG_log_file=0;

=cut

$TOM::DEBUG=1;
$TOM::DEBUG_mdl=1;
$TOM::DEBUG_cache=1;
$TOM::DEBUG_log_file=9;



=head2 ERRORS TRACKING

Send me info about critical request error ( enabled by default )

 #$TOM::ERROR_email=1;

Send me info about errors in modules ( enabled by default )

 #$TOM::ERROR_module_email=1;

Create event ticket in database about critical request error ( enabled by default )

 #$TOM::ERROR_ticket=1;

Crate event ticket in database about errors in modules ( enabled by default )

 #$TOM::ERROR_module_ticket=1;

=cut

#$TOM::ERROR_email=1;
#$TOM::ERROR_module_email=1;
#$TOM::ERROR_ticket=1;
#$TOM::ERROR_module_ticket=1;



=head2 CACHE

Use cache ( enabled by default )

#$TOM::CACHE=1;

=cut

#$TOM::CACHE=1;



1;# DO NOT ERASE!!!
