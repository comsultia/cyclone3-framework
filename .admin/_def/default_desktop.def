
sub PrintHeader {print "Content-type: text/html\n\n";}

sub image_size
{
 my ($width,$height) = @_;
 my $scrollbars="scrollbars=no";
 $width=$width+120;
 $height=$height+120;
 if ($width<520){$width=520;}
 if ($width>780){$width=780;}
 if ($height>580){$height=580;$scrollbars="scrollbars=yes";}
 return $width,$height,$scrollbars;
}

sub GetQuery
{
 my %form;
 my $name_value_pair;
 my @name_value_pairs=split('&',$ENV{'QUERY_STRING'}); # GET
 foreach $name_value_pair (@name_value_pairs)
 {
	my ($name,$value)=split('=',$name_value_pair);   
	$value =~tr/+/ /;
	$value=~s/%([0-9A-Fa-f]{2})/pack("C",hex($1))/eg; # URL decode
	$value =~s|\x7c|<--PIPE-->|g; # convert | to <--PIPE-->
	$form{$name}=$value;
 }

 read(STDIN,my $buffer,$ENV{'CONTENT_LENGTH'}); # POST
 @name_value_pairs=split('&',$buffer);
 foreach $name_value_pair (@name_value_pairs)
	{
	my ($name,$value)=split('=',$name_value_pair);       
	$value =~ s/\+/ /g;
	$value=~s/%([0-9A-Fa-f]{2})/pack("C",hex($1))/eg;
	$value =~s|\x7c|<--PIPE-->|g;
	$form{$name}=$value;
	}
 return %form;
}


sub GetConf
{
 return undef;
# my $db_micro;
# my @db_micro_line;
# my %conf;
# my $WHAT=shift;
# $db_micro = $dbh->Query("
#	SELECT variable,value
#	FROM _config
#	WHERE type='$WHAT'");
# while (@db_micro_line=$db_micro->FetchRow())
# {$conf{$db_micro_line[0]}=$db_micro_line[1]}
# return %conf;
}


sub GetAdminConf
{
 return undef;
# my $db_micro;
# my @db_micro_line;
# my ($a1,$a2)=(shift,shift);
# $db_micro = $dbh->Query("
#	SELECT version,value
#	FROM _admin_save
#	WHERE admin='$ENV{REMOTE_USER}' AND type='$a1' AND variable='$a2' LIMIT 1");
# if (@db_micro_line=$db_micro->FetchRow())
# {
#  return $db_micro_line[0],$db_micro_line[1];
# }
 return undef;
}

# CREATE LOG
############
sub save_log
{
# my $depth=shift;
# my $text=shift;
# $log_temp .= "\\[" . $depth . "]\\ " . $text . " <BR>\n" if $depth<=$conf{log_viewlevel};
# $dbh->Query("INSERT INTO _log (time,text,type,level) VALUES ('$current_time','$text','PRTL','$depth')") if $depth<=$conf{log_dbilevel};
# if ($depth<=$conf{log_savelevel})
# {
#  return undef unless open (HND, ">>../_logs/".$Wyear.$Wmom.$Wmday."-".$$.".fastlog");
#  return undef unless print HND "\\".$$."\\".$fastcount."\\[".$depth."]\\ ".$text."\n";
#  close HND;
# }
 return 1;
}


# ADD MODULE
###############
sub add_module
{
 eval
 {
  local $SIG{__WARN__} = sub {return};
  local $SIG{__DIE__} = sub {return};
  local $SIG{ALRM} = sub {return};
  alarm 2;
  &add_module_core(@_);
  alarm 0;
 };
 if ($@)
 {
  &save_log(0,"Module $_[1] error:".$@);
  $H->r_("<%TMP-".$_[0]."%>","<div style=\"FONT:12px Verdana;\">Error in module <B>$_[1]</B> of Tomahawk system. Please report to administrator on <B>$conf{error_email}</B></div>");
  return undef;
 }
 return 1;
}

sub add_module_core
{
 my $tempposition=shift;
 my $name=shift;
 local ($mdl_version,$mdl_type);
 do "$name.mdl";
 # STARE MODULY
 if ((!$mdl_version)||($mdl_version=~/^1/))
 {
	$H->r_("<%TMP-".$tempposition."%>",&ModulAdd(@_));
	undef &ModulAdd;
 }
 elsif ($mdl_version=~/^2/)
 {
  if ($mdl_type=~/^d/)
  {
	$H->r_("<%TMP-".$tempposition."%>",$mdl_output);
	undef $mdl_output;
  }
  else # NEW MODULE with %hash
  {
	$H->r_("<%TMP-".$tempposition."%>",&ModulAdd(@_));
	undef &ModulAdd;
  }
 }
 undef $mdl_version,$mdl_type;
 return 1;
}

# EXIT(us) :)
#############
sub fcgi_exit
{
 my $req = FCGI::Request();
 $req->Finish();
 exit(0);
}

1;
