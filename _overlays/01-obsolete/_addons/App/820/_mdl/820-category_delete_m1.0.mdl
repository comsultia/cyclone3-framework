#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8;
our $authors = 'nemsak@webcom.sk';
use strict;

use TOM::Utils::charindex;
use CVML;

=head1 NAME
login_info

=head1 HEAD_VERSION_BUILD
1.060104

=head1 DESCRIPTION
zobrazenie informacie o statuse usera

=head1 CHANGES
2006-01-04 - deb00t
	- first make
=cut

sub execute
{
	my %env=@_;

	Tomahawk::GetXSGN(-convertvars=>1) || return undef; # load design file
	if (($env{xt_xlng}) || ($env{xlng}))
	{
		main::_log("using xlng transformation");
		if ($env{xlng}) { main::_log("WARNING! using deprecated parameter 'xlng'! please, use 'xt_xlng';"); }
		Tomahawk::GetXLNG() || return undef; # retrieve language xml
		Tomahawk::XLNGtoXSGN(); # implement XLNG into XSGN
	}

	my %out;

	$env{db_820}=Tomahawk::Getmdlvar("820","db") unless $env{db_820};
	$env{db_820}=$TOM::DB{main}{name} unless $env{db_820};

	my $tmplng;
	$tmplng="AND lng LIKE '$env{db_lng}'" if(exists($env{db_lng}));

	main::_log("
		SELECT
			ID,IDcharindex
		FROM
			$env{db_820}.a820_category
		WHERE
			ID='$env{db_ID}'
			$tmplng
	");

	#no limit - we may want to delete all the language versions at once
	my $db1=$main::DB{main}->Query("
		SELECT
			ID,IDcharindex
		FROM
			$env{db_820}.a820_category
		WHERE
			ID='$env{db_ID}'
			$tmplng
	");
	if($db1)
	{
		if(my %db1_hash=$db1->FetchHash())
		{
			my $hasChildren;

			my @childrenArray;

			push @childrenArray, $env{'db_ID'};

			my $db2=$main::DB{main}->Query("
				SELECT
					ID
				FROM
					$env{db_820}.a820_category
				WHERE
					IDcharindex LIKE '$db1_hash{IDcharindex}%'
					AND ID NOT LIKE '$env{db_ID}'
					$tmplng
			");
			if($db2->NumRows())
			{
				$hasChildren=1;
				while(my %db2_hash=$db2->FetchHash())
				{
					push @childrenArray, $db2_hash{'ID'};
				}
			}

			my $categoryString=join ", ",@childrenArray;

			main::_log('children categories:'.$categoryString);

			my $hasItems;

			my $db2=$main::DB{main}->Query("
				SELECT
					ID
				FROM
					$env{db_820}.a820
				WHERE
					IDcategory IN ($categoryString)
					AND active!='D'
					$tmplng
			");
			if($db2->NumRows())
			{
				$hasItems=1;
			}

			my $forceDeletion=1;

			if($hasChildren)
			{
				if($env{sw_children_ignore})
				{ main::_log('forcing children deletion'); }
				else
				{
					main::_log('unforced children deletion');
					$XSGN{TMP}=$XSGN{RESULT_failure_has_children};
					$forceDeletion=0;
				}
			}
			if(($hasItems) && ($forceDeletion))
			{
				if($env{sw_items_ignore})
				{ main::_log('forcing items deletion'); }
				else
				{
					main::_log('unforced children deletion');
					$XSGN{TMP}=$XSGN{RESULT_failure_has_items};
					$forceDeletion=0;
				}
			}

			if($forceDeletion)
			{
				my $successChildren=1;
				my $db3=$main::DB{main}->Query("
					DELETE
					FROM
						$env{db_820}.a820_category
					WHERE
						ID LIKE '$env{db_ID}%'
						$tmplng
				");
				if($db3)
				{
					main::_log('deleted '.$db3->affectedrows.' children');
				}
				else
				{
					$successChildren=0;
				}


				my $successItems=1;
				if(($hasItems) && ($successChildren))
				{
					my $db3=$main::DB{main}->Query("
						UPDATE
							$env{db_820}.a820
						SET
							IDcategory='$env{db_IDcategory_move}'
						WHERE
							IDcategory LIKE '$env{db_ID}%'
							$tmplng
					");
					if($db3)
					{
						if($env{db_IDcategory_move}){
							main::_log('moved '.$db3->affectedrows.' items into category \''.$env{db_IDcategory_move}.'\'');
						}else{
							main::_log('unset '.$db3->affectedrows.' items\' category');
						}
					}
					else
					{
						$successItems=0;
					}
				}
				if(!$successChildren)
				{
					$XSGN{TMP}=$XSGN{RESULT_failure_delete_children};
				}
				if(($successChildren) && (!$successItems))
				{
					$XSGN{TMP}=$XSGN{RESULT_failure_delete_children};
				}
				if(($successChildren) && ($successItems))
				{
					$XSGN{TMP}=$XSGN{RESULT_success};
				}
			}
		}
		else
		{
			$XSGN{TMP}=$XSGN{RESULT_failure_no_data};
		}
	}
	else
	{
		$XSGN{TMP}=$XSGN{RESULT_failure_no_data};
	}


	$XSGN{TMP}=~s|<%ID%>|$out{db_ID}|g;

	return 1;
}

1;