#!/usr/bin/perl
use Term::ANSIColor;
BEGIN {require "/www/TOM/.bin/tom3-init";$main::debug=0;$main::debug=0;}

use TOM::Database::connect;
use TOM::Database::SQL;

%form=
(
 '-v'		=>	"verbosity",
 '-vv, --v'	=>	"verbosity 2, --v=2",
 '-e'		=>	"execute all modifications",
 '--db_h'	=>	"use type of database (default main)",
 '--domain'	=>	"use name of domain",
);
if (($FORM{'h'})||($FORM{'help'})){&help();}

if ($FORM{'v'})
{
	$main::debug=1;
}

$TOM::engine_ready=1;

$FORM{'db_h'}='main' unless $FORM{'db_h'};

#################################################################################################

$TOM::DB{'main'}{'name'}="TOM";
TOM::Database::connect::multi($FORM{'db_h'}) || die "can't connect";

print "connected '$FORM{'db_h'}' database handler\n";


if ($FORM{'domain'})
{
	require $tom::P."/local.conf";
	
	foreach my $addon(@TOM::domain_default_addons)
	{
		TOM::Database::SQL::file::install(
			$addon,
			'db_name'=> $TOM::DB{$FORM{'db_h'}}{'name'},
			'db_h'=>$FORM{'db_h'},
		);
	}
	
	my %out=TOM::Database::SQL::compare::compare_database(
		$TOM::DB{$FORM{'db_h'}}{'name'},
		'db_h'=>$FORM{'db_h'}
	);
	print "compared database '$TOM::DB{$FORM{'db_h'}}{'name'}'\n";
	print color 'reset bold yellow';
	foreach my $SQL(@{$out{'ALTER'}})
	{
		print "$SQL\n";
	}
	
	if (@{$out{'ALTER'}})
	{
		print "Do it? [No/yes]\n";
		my $do=<STDIN>;
		if ($do=~/yes/i)
		{
			print color 'reset red';
			foreach my $SQL(@{$out{'ALTER'}})
			{
				print "$SQL\n";
				TOM::Database::SQL::execute($SQL);
			}
		}
	}
	
}
elsif ($FORM{'a'})
{
	# control all domains
	my @ALTER;
	foreach my $local(&get_domains())
	{
		eval
		{
			print "require $local\n";
			require $local;
			
			foreach my $addon(@TOM::domain_default_addons)
			{
				TOM::Database::SQL::file::install(
					$addon,
					'db_name'=> $TOM::DB{$FORM{'db_h'}}{'name'},
					'db_h'=>$FORM{'db_h'},
				);
			}
			
			my %out=TOM::Database::SQL::compare::compare_database(
				$TOM::DB{$FORM{'db_h'}}{'name'},
				'db_h'=>$FORM{'db_h'}
			);
			
			#print "compared database '$TOM::DB{$FORM{'db_h'}}{'name'}'\n";
			#print color 'reset bold yellow';
#			foreach my $SQL(@{$out{'ALTER'}})
#			{
#				print "$SQL\n";
#			}
			
			push @ALTER, @{$out{'ALTER'}};
			
			if (@ALTER > 10)
			{
			
				print color 'reset bold yellow';
				foreach my $SQL(@ALTER)
				{
					print "$SQL\n";
				}
			
				print "Do it? [No/yes]\n";
				my $do=<STDIN>;
				if ($do=~/yes/i)
				{
					print color 'reset red';
					foreach my $SQL(@ALTER)
					{
						print "$SQL\n";
						TOM::Database::SQL::execute($SQL);
					}
				}
				
				@ALTER=();
				
			}
			
			
		};
	}
	
	if (@ALTER > 0)
	{
		
		print color 'reset bold yellow';
		foreach my $SQL(@ALTER)
		{
			print "$SQL\n";
		}
		
		print "Do it? [No/yes]\n";
		my $do=<STDIN>;
		if ($do=~/yes/i)
		{
			print color 'reset red';
			foreach my $SQL(@ALTER)
			{
				print "$SQL\n";
				TOM::Database::SQL::execute($SQL);
			}
		}
		
		@ALTER=();
		
	}
	
}
else
{
	
	foreach my $addon(@TOM::default_addons)
	{
		TOM::Database::SQL::file::install(
			$addon,
			'db_name'=>'TOM',
			'db_h'=>$FORM{'db_h'},
		);
	}
	
	my %out=TOM::Database::SQL::compare::compare_database(
		'TOM',
		'db_h'=>$FORM{'db_h'}
	);
	print "compared database 'TOM'\n";
	print color 'reset bold yellow';
	foreach my $SQL(@{$out{'ALTER'}})
	{
		print "$SQL\n";
	}
	
	if (@{$out{'ALTER'}})
	{
		print "Do it? [No/yes]\n";
		my $do=<STDIN>;
		if ($do=~/yes/i)
		{
			print color 'reset red';
			foreach my $SQL(@{$out{'ALTER'}})
			{
				print "$SQL\n";
				TOM::Database::SQL::execute($SQL);
			}
		}
	}
	
}



sub get_domains
{
	my @files;
	my @domain_conf;
	opendir (DIR, $TOM::P);
	push @files, readdir DIR;
	while (my $file=shift @files)
	{
		
		if (($file ne ".")&&($file ne ".."))
		{
			next if $file =~/!www/;
			next if $file =~/_(\w+)$/;
			next if $file =~/\.svn/;
			
			if
			(
				(-d $TOM::P."/".$file)&&
				(-e $TOM::P."/".$file."/local.conf")
			)
			{
				#main::_log_stdout("adding domain directory '$file'");
				push @domain_conf, $TOM::P.'/'.$file.'/local.conf';
				if (opendir (DIR1,$TOM::P."/".$file))
				{foreach (readdir DIR1)
				{
					if (($_ ne ".")&&($_ ne "..")){push @files,$file."/".$_;}}
				}
			}
			
		}
	}
	
	return @domain_conf;
}

&exit();
