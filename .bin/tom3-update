#!/usr/bin/perl
use Term::ANSIColor;
BEGIN {
	$main::debug=0;
	if (!$ENV{'CYCLONE3PATH'}){$ENV{'CYCLONE3PATH'}="/www/TOM" if -d "/www/TOM";$ENV{'CYCLONE3PATH'}="/Cyclone3" if -d "/Cyclone3";};
	require $ENV{'CYCLONE3PATH'}."/.bin/tom3-init";
}

use SVN::Ra;
use SVN::Log;
use SVN::Wc;
use SVN::Repos;

%form=
(
 '-v'		=>	"verbosity",
 '-vv, --v'	=>	"verbosity 2, --v=2",
);
if (($FORM{'h'})||($FORM{'help'})){&help();}


$FORM{'db_h'}='main' unless $FORM{'db_h'};

#################################################################################################

if ($FORM{'xuladmin'})
{
	# find all cyclone.* domains
	
	print "Updating all Cyclone3 XULadmin backend domain services\n";
	
	if (opendir (DIR,$TOM::P))
	{
		my @files=readdir DIR;
		foreach my $file(@files)
		{
			
			next if $file=~/^(\.|\.\.)$/;
			if (
					(-d $TOM::P."/".$file) &&
					($file=~/^([^_\.][!\w\.\-]+|.*\/[^_\.][!\w\.]+)$/) &&
					(not $file=~/(!media|!www)/)
				)
			{
				if (opendir (DIR1,$TOM::P."/".$file)){foreach (readdir DIR1){if (($_ ne ".")&&($_ ne "..")){push @files,$file."/".$_;}}}
			}
			
			if (-e $TOM::P.'/'.$file.'/local.conf' && $file=~/\/(!cyclone|rpc)$/)
			{
				main::_log_stdout($file);
				chdir $TOM::P.'/'.$file;
				system("svn up >/dev/null");
			}
		}
	}
	
	#main::_log_stdout("exot")
	
	&exit();
}


if ($FORM{'core'})
{
	print "Updating all core files in domain services\n";
	
	if (opendir (DIR,$TOM::P))
	{
		my @files=readdir DIR;
		foreach my $file(@files)
		{
			next if $file=~/^(\.|\.\.)$/;
			if (
					(-d $TOM::P."/".$file) &&
					($file=~/^([^_\.][!\w\.\-]+|.*\/[^_\.][!\w\.]+)$/) &&
					(not $file=~/(!media|!www)/)
				)
			{
				if (opendir (DIR1,$TOM::P."/".$file)){foreach (readdir DIR1){if (($_ ne ".")&&($_ ne "..")){push @files,$file."/".$_;}}}
			}
			
			if (-e $TOM::P.'/'.$file.'/core.tom')
			{
				next if $file eq ".symlinks";
				main::_log_stdout("update ".$file);
				use File::Copy;
#				print "to ".$TOM::P.'/'.$file.'/core.tom'."\n";
				if (-l $TOM::P.'/'.$file.'/core.tom')
				{
					print " symlink\n";
					if (unlink $TOM::P.'/'.$file.'/core.tom')
					{
						copy($TOM::P."/.symlinks/core.tom",$TOM::P.'/'.$file.'/core.tom');
					}
				}
				else
				{
					copy($TOM::P."/.symlinks/core.tom",$TOM::P.'/'.$file.'/core.tom');
				}
			}
		}
	}
	
	&exit();
}


# check current version;
print "Cyclone3 Framework current: r$TOM::core_revision\n";

# last revision number
my $ra = SVN::Ra->new($TOM::rev::repository);
my $HEAD=$ra->get_latest_revnum ();
#print "last revision=r$HEAD\n";

# finding last stable version (message marked with '(stable)')
my $revs = SVN::Log::retrieve ($TOM::rev::repository, $TOM::core_revision,$HEAD);

# find last stable revision
my $STABLE=TOM::rev::get_last_stable_revision();

print "Cyclone3 Framework last stable: r$STABLE\n";

if ($STABLE<=$TOM::core_revision)
{
	print color 'bold red';
	print "\n";
	print "Stable update is not available, try later\n";
	#&exit();
}
else
{
	print "\n";
	
	print "List of changes in repository to update:\n";
	foreach my $rev (@{$revs})
	{
		if (($rev->{'revision'}>$TOM::core_revision)
			&& ($rev->{'revision'}<=$HEAD)
		)
		{
			# display only changes in framework
			next unless $rev->{'message'}=~/\[frame/;
			
			1 while ($rev->{'message'}=~s|\n$||);
			if ($rev->{'message'}=~/\(major\)/)
			{
				print color 'bold yellow';
			}
			elsif ($rev->{'message'}=~/\(stable\)/)
			{
				print color 'bold yellow';
			}
			elsif ($rev->{'message'}=~/\(security\)/)
			{
				print color 'bold red';
			}
			elsif ($rev->{'message'}=~/bug/ || $rev->{'message'}=~/^\[!\]/)
			{
				print color 'bold green';
			}
			elsif ($rev->{'message'}=~/\(minor\)/ || !$rev->{'message'})
			{
				next;
			}
			else
			{
				print color 'reset green';
			}
			print "r".$rev->{'revision'}." ".$rev->{'message'}."\n";
		}
	}
	
	print "Update? [No/yes]\n";
	my $do=<STDIN>;
	if ($do=~/yes/i)
	{
		print color 'yellow';
		system("cd $TOM::P;svn up");
	}
}


# Checking overlays (only SVN capable)
print "\n";
print color 'reset green';

foreach my $overlay(reverse @TOM::Overlays::item)
{
	next if $overlay eq "10-local";
	
	print "Cyclone3 overlay '$overlay' (update check)\n";
	
	if (not -d $TOM::P.'/_overlays/'.$overlay.'/.svn')
	{
		print " (not subversion source)\n";
		next;
	}
	
	chdir $TOM::P.'/_overlays/'.$overlay;
	my $out=`svn info`;
	if (!$out)
	{
		print " (can't get subversion info)\n";
		next;
	}
	
	$out=~/URL: (.*?)\n/s;my $url=$1;
	$out=~/Revision: (\d+)/;my $revision=$1;
	
	my $stable=TOM::rev::get_uri_content($url.'/stable');
	
	if ($stable>$revision)
	{
		my $revs = SVN::Log::retrieve ($url, $revision+1,$stable);
		foreach my $rev (@{$revs})
		{
			$rev->{'message'}=~s|[\n\r]||g;
			print "r".$rev->{'revision'}." ".$rev->{'message'}."\n";
		}
		
		print "Update? [No/yes]\n";
		my $do=<STDIN>;
		if ($do=~/yes/i)
		{
			print color 'yellow';
			system("svn up");
		}
		
	}
	
}


# Checking core scripts

print color 'reset green';

foreach my $script('core.tom','download.tom')
{
	
	my $cmd='/usr/bin/find /www/TOM -name '.$script.' 2>/dev/null';
	my $out=`/usr/bin/md5sum /www/TOM/.symlinks/$script`;
		$out=~/^([0-9a-z]+)/;
	my $md5_orig=$1;
	foreach my $file (split('\n',`$cmd`))
	{
		next if $file=~/\.symlinks/;
		my $out=`/usr/bin/md5sum $file`;
			$out=~/^([0-9a-z]+)/;
		my $md5=$1;
		if ($md5 ne $md5_orig)
		{
			print "updating $file\n";
			`rm $file`;
			`cp /www/TOM/.symlinks/$script $file`;
		}
	}
}

&exit();
