#!/usr/bin/perl
use Term::ANSIColor;

BEGIN {
	if (!$ENV{'CYCLONE3PATH'}){$ENV{'CYCLONE3PATH'}="/www/TOM" if -d "/www/TOM";$ENV{'CYCLONE3PATH'}="/Cyclone3" if -d "/Cyclone3";}
	require $ENV{'CYCLONE3PATH'}."/.bin/tom3-init";
}

use Cyclone::files;

# zaklad prav
# user cyclone3
# user www-data
# groupa cyclone3 - zdruzuje vsetkych coderov a ostatnych vyvojarov, + apache usera
# groupa www-data - zdruzuje apache usera


%form=
(
	'-a'	=>	"all directories",
	'-t'	=>	"this directory",
	'-r'	=>	"this directory with recursive",
	'-v'	=>	"verbosity",
);

if (($FORM{h})||($FORM{help})){&help();}
if ((!$FORM{a})&&(!$FORM{t})&&(!$FORM{x})&&(!$FORM{r})){&help();}

#open(STDERR,">>/dev/null") || die "Cant redirect STDERR: $!\n";

my %hash;


my @regexp_D=@Cyclone::files::setit_D;
my @regexp_F=@Cyclone::files::setit_F;


%rights=
(
	'---'	=>	"0",
	'r--'	=>	"4",
	'-w-'	=>	"2",
	'--x'	=>	"1",
	'-wx'	=>	"3",
	'r-x'	=>	"5",
	'rw-'	=>	"6",
	'rwx'	=>	"7",
);

our %uids;
our %gids;

sub setit3
{my @ref=@_;
	
	$setrights{$ref[1]}[0]++;
	
	return undef if ((!$ref[2])&&(!$ref[3]));
	
	$checked++;
	$setrights{$ref[1]}[1]++;
	
	my $old=time-(stat "$P/$ref[0]")[8];
	
	if ($FORM{v})
	{
		if ($old>(86400*31*3))
		{
			print color 'reset bold red';
			print "[$pcount] $ref[0] is old (".(int($old/86400))." days)!";
			print "\n";
			print color 'reset green';
		}
		elsif ($old>(86400*31*2))
		{
			print color 'reset bold yellow';
			print "[$pcount] $ref[0] is old (".(int($old/86400))." days)!";
			print "\n";
			print color 'reset green';
		}
		elsif ($old>(86400*31*1))
		{
			print color 'reset yellow';
			print "[$pcount] $ref[0] is old (".(int($old/86400))." days)!";
			print "\n";
			print color 'reset green';
		}
	}
	
	my $ddd=$ref[0];
	
	my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,$blksize,$blocks) = lstat($P.'/'.$ddd);
	
	my $chmod=sprintf "%04o", $mode & 07777;
		$chmod=~s|^.||;
	
	my ($chown_user)=getpwuid($uid);
	my ($chown_group)=getgrgid($gid);
	my $chown=$chown_user.":".$chown_group;
	
	my $ch;
	if (($ref[2])&&($chmod ne $ref[2])&&(not -l $P."/".$ref[0]))
	{
		$ch=1;
		chmod oct($ref[2]), $P.'/'.$ddd;
		print color 'reset bold yellow';
		print "[$pcount] $ref[0] [$chmod/$ref[2]] [$ref[1]]";
	#	if ($err){print color 'reset bold red';print "...cannot change :-("}
		print "\n";
		print color 'reset green';
	}
	
	if (($ref[3])&&($chown ne $ref[3]))
	{
		$ch=1;
		print color 'reset bold yellow';
		my ($user_name,$group_name)=split(':',$ref[3]);
		my (undef,undef,$uid)=getpwnam($user_name);
		my (undef,undef,$gid)=getgrnam($group_name);
		chown $uid, $gid, $P.'/'.$ddd;
		print "[$pcount] $ref[0] [$chown/$ref[3]] [$ref[1]]";
#		if ($err){print color 'reset bold red';print "...cannot change :-("}
		print "\n";
		print color 'reset green';
	}
	
 if ($ch)
 {
  $setrights{$ref[1]}[2]++;
  $changed++;
 }


}







sub remove
{
 #return 1;
 my @ref=@_;
 print color 'bold red';
 print "\t$ref[0] [remove?]\n";
# my $in=<STDIN>;
# if ($in=~/[Yy]/)
# {
  print "\tremoved\n";
  system ("rm $P/$ref[0]");
# }
 print color 'reset blue';
}



use Cwd;
my $this=Cwd::cwd();
print "pwd:$this\n";

if ($FORM{'t'} || $FORM{'r'})
{
	&exit unless $this=~/^$P/;
	$plus=($this=~/$P\/(.*)/)[0];
}
else
{
}


if ($FORM{x})
{
	print "---[ Directories ]--------------------------------------------------------------\n";
	foreach my $hash (@regexp_D)
	{
		print "[ ".sprintf("%-20s",$hash->[1])." ]";
		print "[ ".sprintf("%-6s",$hash->[2])." ]";
		print "[ ".sprintf("%-15s",$hash->[3])." ]";
		print "\n";
		
	}
	print "\n";
	print "---[ Files ]--------------------------------------------------------------------\n";
	foreach my $hash (@regexp_F)
	{
		print "[ ".sprintf("%-25s",$hash->[1])." ]";
		print "[ ".sprintf("%-6s",$hash->[2])." ]";
		print "[ ".sprintf("%-20s",$hash->[3])." ]";
		print "\n";
		
	}
	&exit;
}

my $cnt;
if (opendir (DIR,$P."/".$plus))
{
	my @files=readdir DIR;
	foreach my $file(@files)
	{
		my $Ffile=$file;
		$Ffile=$plus."/".$file if $plus;
		
		$cnt++;
		
		if (not -e "$P/$Ffile")
		{
			
		}
		
		next if -l "$P/$Ffile";
		
		if (($file ne ".")&&($file ne ".."))
		{
			$count++;$pcount=sprintf("%06d",$count);
			
			my $dir;
			if (-d $P."/".$Ffile){$dir="-D "}
			
			if ($dir)
			{
#				main::_log_stdout("entering dir $Ffile");
				next if $Ffile=~/^!szlh.sk\/!www\/stats\//;
				
				if (opendir (DIR1,$P."/".$Ffile))
				{
					foreach (readdir DIR1)
					{
						if 
							(
								($_ ne ".")&&($_ ne "..")
								&&
								(
									($FORM{a})||($FORM{r})
								)
							)
						{
							push @files,$file."/".$_;
						}
					}
				}
				
				my $var;
				my $check;
				foreach (@regexp_D)
				{
					if ($Ffile=~/$regexp_D[$var][0]/)
					{
						&setit3($Ffile,'D '.$regexp_D[$var][1],$regexp_D[$var][2],$regexp_D[$var][3]);$check=1;
						last;
					}
					$var++;
				}
				
				next if $check;
				
				print color 'reset bold red';
				$unknown++;
				print "[$pcount] $dir$Ffile unknown\t\n";
				print color 'reset green';
				next;
			}
			
			my $var;
			my $check;
			my $nold=$Ffile;$nold=~s|\.old$||;
			foreach (@regexp_F)
			{
				if (($nold=~/$regexp_F[$var][0]/)||($Ffile=~/$regexp_F[$var][0]/))
				{
					&remove($Ffile) if $regexp_F[$var][4];
					&setit3($Ffile,'F '.$regexp_F[$var][1],$regexp_F[$var][2],$regexp_F[$var][3]);$check=1;last;
				}
				$var++;
			}
			
			next if $check;
			
			print color 'reset bold red';
			$unknown++;
			print "[$pcount] $dir$Ffile unknown\n";
			print color 'reset green';
			
		}
	}
	closedir DIR;
	
}
print "\n";



print color 'reset cyan';



#print "korektne ukoncene\n";


&exit;




my $var;
foreach (@regexp_D)
{
 if ($setrights{'D '.$regexp_D[$var][1]}[2]){print color 'reset bold cyan'};
 if (!$setrights{'D '.$regexp_D[$var][1]}[0]){print color 'reset bold red'};
 print "[ D ".sprintf("%-30s",$regexp_D[$var][1])."] ";
 print "[".sprintf("%6s",$setrights{'D '.$regexp_D[$var][1]}[0])."] "; # files
 print "[".sprintf("%6s",$setrights{'D '.$regexp_D[$var][1]}[1])."] "; # checked
 print "[".sprintf("%6s",$setrights{'D '.$regexp_D[$var][1]}[2])."] "; # changed
 print color 'reset cyan';
 print "\n";
 $var++;
}

print "\n";

my $var;
foreach (@regexp_F)
{
 if ($setrights{'F '.$regexp_F[$var][1]}[2]){print color 'reset bold cyan'};
 if (!$setrights{'F '.$regexp_F[$var][1]}[0]){print color 'reset bold red'};
 print "[ F ".sprintf("%-30s",$regexp_F[$var][1])."] ";
 print "[".sprintf("%6s",$setrights{'F '.$regexp_F[$var][1]}[0])."] "; # files
 print "[".sprintf("%6s",$setrights{'F '.$regexp_F[$var][1]}[1])."] "; # checked
 print "[".sprintf("%6s",$setrights{'F '.$regexp_F[$var][1]}[2])."] "; # changed 
 print color 'reset cyan';
 print "\n";
 $var++;
}









&exit();
