#!/usr/bin/perl
use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8;
use Data::Dumper;
use Term::ANSIColor;
use DateTime;

BEGIN
{
	$TOM::engine='cli';
	$main::debug=1 if $ENV{'CYCLONE3DEBUG'};
#	$main::stdout=0 unless $ENV{'CYCLONE3DEBUG'};
	if (!$ENV{'CYCLONE3PATH'})
	{
		$ENV{'CYCLONE3PATH'}="/www/TOM" if -d "/www/TOM"; # obsolete
		$ENV{'CYCLONE3PATH'}="/Cyclone3" if -d "/Cyclone3";
		$ENV{'CYCLONE3PATH'}="/srv/Cyclone3" if -d "/srv/Cyclone3";
	}
}
END {use Inline;$SIG{__WARN__} = sub {};}

our $argv=join " ",@ARGV;

our $job_file;
if ($ARGV[0] && not($ARGV[0]=~/^\-/)) # direct link to job file
{
	$job_file=$ARGV[0];
	delete $ARGV[0];
}

our %arg;
foreach my $key(@ARGV)
{
	$key=~s/^\-\-// && do
	{
		my @ref=split('=',$key,2);
		$ref[1]=1 unless exists $ref[1];
		if (ref($main::arg{$ref[0]}) eq "ARRAY")
		{
			push @{$main::arg{$ref[0]}},$ref[1];
		}
		elsif ($main::arg{$ref[0]})
		{
			my $oldval=$main::arg{$ref[0]};
			delete $main::arg{$ref[0]};
			$main::arg{$ref[0]}=[
				$oldval,
				$ref[1]
			];
		}
		else
		{
			$main::arg{$ref[0]}=$ref[1];
		}
		next;
	};
	$key=~s/^\-// && do
	{
		foreach (split('',$key)){$main::arg{$_}++;}
	};
}


if ($main::arg{'v'} >= 2)
{
#	$main::stdout=1;
	$main::debug=1;# if ($main::arg{'v'} >= 2);
#	delete $main::arg{'v'};
}

if ($main::arg{'domain'})
{
	$main::arg{'domain'}=~s|^www\.||i;
	$main::h=$main::arg{'domain'};$main::h=~s|\.|_|g;$main::h=~s|/|__|g;
	
	my $path=$main::arg{'domain'};$path=~s|^(.[^/]*)(.*)||;
	my $path_dom=$1;my $path_sub=$2;
	$path_dom=~s|(.*\.\|)(.*?\..*?)$|$1|;
	$tom::p="!$2";$path_dom=~s|\.$||;
	
	foreach (reverse split('\.',$path_dom)){$tom::p.="/!$_";}
	foreach (split('/',$path_sub)){$tom::p.="/$_";}
	
	$tom::p=~s|//|/|g;
	$tom::p=$ENV{'CYCLONE3PATH'}."/".$tom::p;
	
	$tom::P=$tom::p;
	delete $main::arg{'domain'};
}

require $ENV{'CYCLONE3PATH'}."/.core/.libs/TOM.pm";
require TOM::Engine::job;
$0.=" ".$argv if $argv;
use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8;
use strict;
use vars qw//;

package main;
use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8;
use strict;
use Cwd 'abs_path';

$TOM::engine_ready=1;

print color 'reset';

if (!keys %main::arg || exists $main::arg{'help'})
{
	print  qq{Cyclone3 remote log receiver
Usage: c3-rlog [options]

Basic options:
 --d=<domain>           filter to domain (default <pwd>)
 --d                    don't filter domain (disables --d,--h,--hd,--dm)
 --dm=<domain>          filter to domain master and subdomains
 --h=<hostname>         filter to hostname (default current)
 --h                    don't filter by hostname
 --hd=<hostdomain>      filter to hostdomain / Cyclone3 cluster (default current || undef)
 --t=<facility>         filter to facility (pub/pub.track/sql/...)
 --t=?						show all available facilities by defined filter
 --f                    filter only faults
 --tail						search, and search for new lines, and search for ...
 --msg=<string>         search in message string
 --msg=<string> --msg=...
 --filter=<elastic>     filter by custom code eg. '{"terms":{"data.test_s":["word"]}}'
 --filter=<elastic> --filter=...
 --c=<request_code>     filter to request code (disables --limit,--h,--hd)
 --p=<pid>              filter to PID
 --oldest               search for oldest lines first
 --limit=<num>          receive <num> lines of log (default 100)
 --range=<num[dhm]>     filter in date range now-<num[dhm]> ([d]ays, [h]ours, [m]inutes)
 --range                disable range filter
 --date=<YYYY-MM-DD>    filter to date
 --datetime-from=<YYYY-MM-DD HH:MM:SS> --datetime-to=<YYYY-MM-DD HH:MM:SS>
 --pretty               display additional attributes in pretty json format
 --ch                   strict chronological - don't group primary by log source
 --data.*               search terms in data.* field
 -s                     save (protect log)

};
	exit;
}

if (!$main::arg{'d'} && !$main::arg{'dm'} && !$main::arg{'hd'} && !$main::arg{'h'})
{
	$main::arg{'hd'} ||= $TOM::domain;
	$main::arg{'h'} ||= $TOM::hostname.'.'.($TOM::domain || 'undef');
}

my $limit=100;
my $query;
my %query_string;
my @filter;
if ($main::arg{'hd'} eq "?")
{
	$query.=" hd=".$main::arg{'hd'};
#	push @filter,{"terms" => {"hd" => [$main::arg{'hd'}]}},
}
elsif ($main::arg{'hd'})
{
	$query.=" hd=".$main::arg{'hd'};
	push @filter,{"terms" => {"hd" => [$main::arg{'hd'}]}},
};
if ($main::arg{'h'} eq "?")
{
	$query.=" h=".$main::arg{'h'};
}
elsif ($main::arg{'h'})
{
	$main::arg{'h'}='*' if $main::arg{'h'}==1;
	$query.=" h=".$main::arg{'h'};
	push @filter,{"terms" => {"h" => [$main::arg{'h'}]}}
		unless $main::arg{'h'} eq "*";
};
if ($main::arg{'d'} eq "?")
{
	$query.=" d=".$main::arg{'d'};
#	push @filter,{"terms" => {"t" => ['cyclone3.'.$main::arg{'t'}]}},
}
elsif ($main::arg{'d'})
{
	$main::arg{'d'}='*' if $main::arg{'d'}==1;
	$query.=" d=".$main::arg{'d'};
	push @filter,{"terms" => {"d" => [$main::arg{'d'}]}}
		unless $main::arg{'d'} eq "*";
}
elsif ($tom::H)
{
	$query.=" d=".$tom::H;
	push @filter,{"terms" => {"d" => [$tom::H]}};
}
if ($main::arg{'dm'} eq "?")
{
	$query.=" dm=".$main::arg{'dm'};
#	push @filter,{"terms" => {"dm" => [$main::arg{'dm'}]}},
}
elsif ($main::arg{'dm'})
{
	$query.=" dm=".$main::arg{'dm'};
	push @filter,{"terms" => {"dm" => [$main::arg{'dm'}]}},
};
if ($main::arg{'t'} eq "?")
{
	$query.=" t=".$main::arg{'t'};
#	push @filter,{"terms" => {"t" => ['cyclone3.'.$main::arg{'t'}]}},
}
elsif ($main::arg{'t'})
{
	$query.=" t=".$main::arg{'t'};
	push @filter,{"terms" => {"t" => ['cyclone3.'.$main::arg{'t'}]}},
};
if ($main::arg{'f'})
{
	$query.=" f=".$main::arg{'f'};
	push @filter,{"terms" => {"f" => [1]}},
};
if ($main::arg{'c'})
{
	$query.=" c=".$main::arg{'c'};
	push @filter,{"terms" => {"c" => [$main::arg{'c'}]}};
	$limit=10000;
};
if ($main::arg{'p'})
{
	$query.=" p=".$main::arg{'p'};
	push @filter,{"terms" => {"p" => [$main::arg{'p'}]}};
	$limit=100;
};

if ($main::arg{'oldest'})
{
	$query.=" {oldest first}";
};

if ($main::arg{'msg'})
{
	if (ref($main::arg{'msg'}) eq "ARRAY")
	{
		$query.=" msg=~";
		foreach my $part (@{$main::arg{'msg'}})
		{
			$part=lc($part);
			$query.="+'".$part."'";
			push @filter,{"terms" => {"m" => [$part]}};
		}
		$query=~s|msg=~\+'|msg=~'|;
		# for highlights
		$query_string{'query'}{'query_string'} = {
			"fields" => ["m"],
			'query' => join(" ",@{$main::arg{'msg'}}),
			"use_dis_max" => 1
		};
	}
	else
	{
		$query.=" msg=~'".$main::arg{'msg'}."'";
		$query_string{'query'}{'query_string'} = {
			"fields" => ["m"],
			'query' => $main::arg{'msg'},
			"use_dis_max" => 1
		}
	}
};

if ($main::arg{'filter'})
{
	if (ref($main::arg{'filter'}) eq "ARRAY")
	{
		foreach my $filter (@{$main::arg{'filter'}})
		{
			
		}
	}
	else
	{
		push @filter,from_json($main::arg{'filter'});
	}
};

foreach (sort keys %main::arg)
{
	if ($_=~/^data\./)
	{
		$query.=" ".$_."=".$main::arg{$_};
		push @filter,{"terms" => {$_ => [$main::arg{$_}]}};
	}
}




# connect
$Ext::Elastic = $Ext::Elastic_rlog_hd{$main::arg{'hd'}}
	|| $Ext::Elastic_rlog
	|| $Ext::Elastic;
require Ext::Elastic::_init;
main::_log_stdout("ElasticSearch @".join(',@',@{$Ext::Elastic->{'nodes'}}));
$Ext::Elastic->{'request_timeout'} = 300;
Ext::Elastic::_connect();
our $Elastic=$Ext::Elastic::service;

# get all log indices
my %indices;
foreach (sort keys %{$Elastic->indices->get('index' => 'logstash-*')})
{$indices{$_}++;};
my %search_indices;

my $td = DateTime->now('time_zone'  => 'GMT');
$search_indices{'logstash-'.$td->strftime('%Y-%m-%d')}=1;
#my $indice='logstash-'.$td->strftime('%Y-%m-%d');

$main::arg{'range'}='6h' unless $main::arg{'range'};

if ($main::arg{'datetime-from'}=~/^(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)$/
	&& $main::arg{'datetime-to'}=~/^(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)$/)
{
	%search_indices=();
	
	$main::arg{'datetime-from'}=~/^(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)$/;
	my $td = DateTime->new(
		'year' => $1,
		'month' => $2,
		'day' => $3,
		'hour' => $4,
		'minute' => $5,
		'second' => $6,
		'time_zone'  => 'local'
	);
	$td->set_time_zone('GMT');
	my $date_start_=$td->strftime('%FT%H:%M:%SZ');
	my $date_start=$td->strftime('%F');
	
	$main::arg{'datetime-to'}=~/^(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)$/;
	my $td_to = DateTime->new(
		'year' => $1,
		'month' => $2,
		'day' => $3,
		'hour' => $4,
		'minute' => $5,
		'second' => $6,
		'time_zone'  => 'local'
	);
	$td_to->set_time_zone('GMT');
	my $date_to_=$td_to->strftime('%FT%H:%M:%SZ');
	my $date_to=$td_to->strftime('%F');
	
	if ($indices{'logstash-'.$date_start})
	{
		$search_indices{'logstash-'.$date_start}=1;
	}
	elsif ($indices{'logstash-'.($date_start=~/^(\d\d\d\d\-\d\d)/)[0]})
	{
		$search_indices{'logstash-'.($date_start=~/^(\d\d\d\d\-\d\d)/)[0]}=1;
	}
	
	while ($td < $td_to)
	{
		$td->add('days'=>1);
		my $date_now=$td->strftime('%F');
		if ($indices{'logstash-'.$date_now})
		{
			$search_indices{'logstash-'.$date_now}=1;
		}
		elsif ($indices{'logstash-'.($date_now=~/^(\d\d\d\d\-\d\d)/)[0]})
		{
			$search_indices{'logstash-'.($date_now=~/^(\d\d\d\d\-\d\d)/)[0]}=1;
		}
	}
	
	push @filter,{"range" => {
		'@timestamp' => {
			'gte' => $date_start_,
			'lt' => $date_to_
		}
	}};
	$query.=" date=\"".$main::arg{'datetime-from'}." - ".$main::arg{'datetime-to'}."\"";
}
elsif ($main::arg{'date'}=~/^(\d\d\d\d)-(\d\d)$/)
{
	%search_indices=();
	
	my $td = DateTime->new(
		'year' => $1,
		'month' => $2,
		'day' => 1,
		'hour' => 0,
		'minute' => 0,
		'second' => 0,
		'time_zone'  => 'local'
	);
	my $month=$td->month();
	$td->set_time_zone('GMT');
	
	my $date_start_=$td->strftime('%FT%H:%M:%SZ');
	my $date_start=$td->strftime('%F');
	
	if ($indices{'logstash-'.$date_start})
	{
		$search_indices{'logstash-'.$date_start}=1;
	}
	elsif ($indices{'logstash-'.($date_start=~/^(\d\d\d\d\-\d\d)/)[0]})
	{
		$search_indices{'logstash-'.($date_start=~/^(\d\d\d\d\-\d\d)/)[0]}=1;
	}
	
	my $date_stop_=$td->strftime('%FT%H:%M:%SZ');
	my $date_stop=$td->strftime('%F');
	for (1..32)
	{
		$td->add('days'=>1);
		
		$date_stop_=$td->strftime('%FT%H:%M:%SZ');
		$date_stop=$td->strftime('%F');
		
		if ($indices{'logstash-'.$date_stop})
		{
			$search_indices{'logstash-'.$date_stop}=1;
		}
		elsif ($indices{'logstash-'.($date_stop=~/^(\d\d\d\d\-\d\d)/)[0]})
		{
			$search_indices{'logstash-'.($date_stop=~/^(\d\d\d\d\-\d\d)/)[0]}=1;
		}
		
		last if $month ne $td->month();
	}
	
	push @filter,{"range" => {
		'@timestamp' => {
			'gte' => $date_start_,
			'lt' => $date_stop_
		}
	}};
	$query.=" date=~".$main::arg{'date'};
}
elsif ($main::arg{'date'}=~/^(\d\d\d\d)-(\d\d)-(\d\d)$/)
{
	%search_indices=();
	
	my $td = DateTime->new(
		'year' => $1,
		'month' => $2,
		'day' => $3,
		'hour' => 0,
		'minute' => 0,
		'second' => 0,
		'time_zone'  => 'local'
	);
	$td->set_time_zone('GMT');
	
	my $date_start_=$td->strftime('%FT%H:%M:%SZ');
	my $date_start=$td->strftime('%F');
	
	if ($indices{'logstash-'.$date_start})
	{
		$search_indices{'logstash-'.$date_start}=1;
	}
	elsif ($indices{'logstash-'.($date_start=~/^(\d\d\d\d\-\d\d)/)[0]})
	{
		$search_indices{'logstash-'.($date_start=~/^(\d\d\d\d\-\d\d)/)[0]}=1;
	}
	
	$td->add('days'=>1);
	my $date_stop_=$td->strftime('%FT%H:%M:%SZ');
	my $date_stop=$td->strftime('%F');
	
	if ($indices{'logstash-'.$date_stop})
	{
		$search_indices{'logstash-'.$date_stop}=1;
	}
	elsif ($indices{'logstash-'.($date_stop=~/^(\d\d\d\d\-\d\d)/)[0]})
	{
		$search_indices{'logstash-'.($date_stop=~/^(\d\d\d\d\-\d\d)/)[0]}=1;
	}
	
	push @filter,{"range" => {
		'@timestamp' => {
			'gte' => $date_start_,
			'lt' => $date_stop_
		}
	}};
	$query.=" date=~".$main::arg{'date'};
}
elsif ($main::arg{'range'} eq '1')
{
	%search_indices=('logstash-*'=>1);
}
elsif ($main::arg{'range'})
{
	# detect range indices
	my $td = DateTime->now('time_zone'  => 'local');
	$td->set_time_zone('GMT');
	
	my $td_from=$td->clone();
	
	if ($main::arg{'range'}=~/^(\d+)([dhm])$/)
	{
		my $num=$1;
		my $type=$2;
		if ($type eq "m")
		{
			$td_from->subtract('minutes'=>$num);
		}
		elsif ($type eq "d")
		{
			$td_from->subtract('days'=>$num);
		}
		elsif ($type eq "h")
		{
			$td_from->subtract('hours'=>$num);
		}
	}
	
	while (1)
	{
		last if $td_from >= $td;
		
		my $date_start=$td_from->strftime('%F');
		
		if ($indices{'logstash-'.$date_start})
		{
			$search_indices{'logstash-'.$date_start}=1;
		}
		elsif ($indices{'logstash-'.($date_start=~/^(\d\d\d\d\-\d\d)/)[0]})
		{
			$search_indices{'logstash-'.($date_start=~/^(\d\d\d\d\-\d\d)/)[0]}=1;
		}
		
		$td_from->add('days'=>1);
	}
	
	# add filter
	push @filter,{"range" => {
		'@timestamp' => {
			'gte' => 'now-'.$main::arg{'range'}
		}
	}};
	$query.=" (date)range=-".$main::arg{'range'};
}

$query=~s|^ ||;

my $indice=join(",",sort keys %search_indices);

print color 'green bold';
main::_log_stdout($query);

main::_log_stdout("search in '$indice'");

$limit=$main::arg{'limit'} if exists $main::arg{'limit'};
my $results={};

my $search_config={
	'index' => $indice,
	'type' => 'fluentd',
	'size' => $limit,
	'timeout' => '600s',
	'body'  => {
		'timeout' => '600s',
		'sort' => [
			{'@timestamp' => do{
				if ($main::arg{'oldest'})
				{
					"asc"
				}
				else
				{
					"desc"
				}
			}},
			{'o' => "desc"}
		],
		'query' => {
			'filtered' => {
				'filter' => {
					'bool' => {
						'must' => [@filter]
					}
				},
				%query_string
			}
		},
		"highlight" => {
			"fields" => {
				"m" => {}
			},
			"fragment_size" => 3000,
			"pre_tags" => [color 'bold yellow'],
			"post_tags" => [color 'reset']
		},
	}
};

if ($main::arg{'t'} eq "?")
{
	$search_config->{'size'}=0;
	$search_config->{'body'}{'aggregations'} = {
		"facility" => {
			"terms" => {
				'field' => "t",
				"size" => 200,
			}
		}
	};
	
	$results = $Elastic->search($search_config);
	
	foreach my $type (@{$results->{'aggregations'}->{'facility'}->{'buckets'}})
	{
		$type->{'key'}=~s|^cyclone3\.||;
		main::_log_stdout(" $type->{'key'} ($type->{'doc_count'})");
	}
	
#	print Dumper($results);
	
	exit;
}

if ($main::arg{'h'} eq "?")
{
	$search_config->{'size'}=0;
	$search_config->{'body'}{'aggregations'} = {
		"facility" => {
			"terms" => {
				'field' => "h",
				"size" => 200,
			}
		}
	};
	
	$results = $Elastic->search($search_config);
	
	foreach my $type (@{$results->{'aggregations'}->{'facility'}->{'buckets'}})
	{
		$type->{'key'}=~s|^cyclone3\.||;
		main::_log_stdout(" $type->{'key'} ($type->{'doc_count'})");
	}
	
#	print Dumper($results);
	
	exit;
}

if ($main::arg{'hd'} eq "?")
{
	$search_config->{'size'}=0;
	$search_config->{'body'}{'aggregations'} = {
		"facility" => {
			"terms" => {
				'field' => "hd",
				"size" => 200,
			}
		}
	};
	
	$results = $Elastic->search($search_config);
	
	foreach my $type (@{$results->{'aggregations'}->{'facility'}->{'buckets'}})
	{
		$type->{'key'}=~s|^cyclone3\.||;
		main::_log_stdout(" $type->{'key'} ($type->{'doc_count'})");
	}
	
#	print Dumper($results);
	
	exit;
}

if ($main::arg{'d'} eq "?")
{
	$search_config->{'size'}=0;
	$search_config->{'body'}{'aggregations'} = {
		"facility" => {
			"terms" => {
				'field' => "d",
				"size" => 50,
			}
		}
	};
	
	$results = $Elastic->search($search_config);
	
	foreach my $type (@{$results->{'aggregations'}->{'facility'}->{'buckets'}})
	{
		$type->{'key'}=~s|^cyclone3\.||;
		main::_log_stdout(" $type->{'key'} ($type->{'doc_count'})");
	}
	
	exit;
}

my $last_timestamp;
my $last_o;

while (1){
	$results = $Elastic->search($search_config);
	
	if (!$results->{'hits'}->{'total'} && !$main::arg{'tail'})
	{
		my $results = $Elastic->search(
			'index' => $indice,
			'type' => 'fluentd',
			'size' => 1,
			'timeout' => '5s',
			'body'  => {
				'timeout' => '5s',
				'sort' => [
					{'@timestamp' => "desc"}
				]
			}
		);
#		print Dumper($results);
		if ($results && $results->{'hits'} && $results->{'hits'}->{'hits'}[0]->{'_source'}{'@timestamp'})
		{
			my $date=$results->{'hits'}->{'hits'}[0]->{'_source'}{'@timestamp'};
			$date=~/^(\d\d\d\d)\-(\d\d)\-(\d\d)T(\d\d):(\d\d):(\d\d).(\d\d\d)Z$/;
			my $td = DateTime->new(
				'year' => $1,
				'month' => $2,
				'day' => $3,
				'hour' => $4,
				'minute' => $5,
				'second' => $6,
				'time_zone'  => 'GMT'
			);
			$td->set_time_zone('local');
			
			my $src_date=$td->strftime('%F %H:%M:%S');
			
#			print $src_date;
			main::_log_stdout("not found, last entry in this indice from $src_date",1);
		}
	}
	
	if (!$results->{'hits'}->{'total'} && $main::arg{'retry'})
	{
		main::_log_stdout("not found, retry after ".($main::arg{'retry'}*5)."s");
		sleep ($main::arg{'retry'}*5);
		next;
	}
#	last;
#}

main::_log_stdout("display ".(scalar @{$results->{'hits'}->{'hits'}})." rows from ".$results->{'hits'}->{'total'}." found (took ".int($results->{'took'}/1000)."s)")
	unless $last_timestamp;
main::_log_stdout("timed_out",1)
	if $results->{'timed_out'};

#print Dumper($results);

my $src;
my $src_last;
my $src_t;
my $src_t_last;
foreach my $line (sort {
	if ($main::arg{'ch'})
	{
		$a->{'_source'}->{'h'} cmp $b->{'_source'}->{'h'} ||
		$a->{'_source'}->{'d'} cmp $b->{'_source'}->{'d'} ||
#		$a->{'_source'}->{'t'} cmp $b->{'_source'}->{'t'} ||
		$a->{'_source'}->{'@timestamp'} cmp $b->{'_source'}->{'@timestamp'} ||
		$a->{'_source'}->{'o'} <=> $b->{'_source'}->{'o'}
	}
	else
	{
		$a->{'_source'}->{'h'} cmp $b->{'_source'}->{'h'} ||
		$a->{'_source'}->{'d'} cmp $b->{'_source'}->{'d'} ||
		$a->{'_source'}->{'t'} cmp $b->{'_source'}->{'t'} ||
		$a->{'_source'}->{'@timestamp'} cmp $b->{'_source'}->{'@timestamp'} ||
		$a->{'_source'}->{'o'} <=> $b->{'_source'}->{'o'}
	}
} @{$results->{'hits'}->{'hits'}})
{
	$line->{'_source'}->{'t'}=~s|^cyclone3\.||;
	
	if ($line->{'_source'}->{'@timestamp'} gt $last_timestamp)
	{
		$last_timestamp = $line->{'_source'}->{'@timestamp'};
		$last_o = $line->{'_source'}->{'o'};
	}
	
	if ($main::arg{'s'} && !$line->{'_source'}->{'s'})
	{
		$Elastic->update(
			'index' => $line->{'_index'},
			'type' => $line->{'_type'},
			'id' => $line->{'_id'},
			'body' => {
				'doc' => {"s" => 1}
			}
		);
	}
	
	$line->{'_source'}->{'@timestamp'}=~/^(\d\d\d\d)\-(\d\d)\-(\d\d)T(\d\d):(\d\d):(\d\d).(\d\d\d)Z$/;
	my $td = DateTime->new(
		'year' => $1,
		'month' => $2,
		'day' => $3,
		'hour' => $4,
		'minute' => $5,
		'second' => $6,
		'time_zone'  => 'GMT'
	);
	$td->set_time_zone('local');
	
	my $src_date=$td->strftime('%F');
	$src=$line->{'_source'}->{'h'};
	$src.='/'.$line->{'_source'}->{'d'} if $line->{'_source'}->{'d'};
	#$src.='/'.$src_date.'.'.$line->{'_source'}->{'t'}.'.log';
	$src.='/'.$src_date;
	$src_t=$line->{'_source'}->{'t'};
	
	if (($src ne $src_last)
		|| (!$main::arg{'ch'} && ($src_t ne $src_t_last)))
	{
		print "\n";
		print color 'reset cyan';
		
		print $line->{'_source'}->{'h'};
		print '/'.(color 'reset bold cyan').$line->{'_source'}->{'d'}.(color 'reset cyan') if $line->{'_source'}->{'d'};
		
		print '/'.(color 'reset bold cyan').$src_date.(color 'reset cyan');
		if (!$main::arg{'ch'})
		{
			print '.'.(color 'reset bold cyan').$line->{'_source'}->{'t'}.(color 'reset cyan').'.log';
		}
		else
		{
			print '/';
		}
		
		print "\n";
		print color 'reset';
	}
	
	if ($main::arg{'ch'} && ($src_t ne $src_t_last))
	{
		print ''.(color 'reset bold cyan').$line->{'_source'}->{'t'}.(color 'reset cyan').'.log';
		print color 'reset';
		print "\n";
	}
	
	my $msg;#=$line->{'_source'}->{'m'};
	
	$msg.="[".sprintf('%06d',$line->{'_source'}->{'p'});
	if (!$main::arg{'c'})
	{
		$msg.=";".($line->{'_source'}->{'c'} || '       0');
	}
	$msg.="]";
	
	$msg.='['.$td->strftime('%H:%M:%S').".".$7.']';
	
	$msg.=" ".(" " x $line->{'_source'}->{'l'});
	
	my $msg_prefix_size=length($msg);
	my $message=$line->{'highlight'}->{'m'}->[0] || $line->{'_source'}->{'m'};
	
	if ($message=~/\\[nrt]/ms && $main::arg{'pretty'})
	{
		$message=~s/\\n/"\n" . (" " x $msg_prefix_size)/ge;
#		$message=~s/\\n/"\n" . $msg_prefix_size/ge;
		$message=~s|\\r|\r|g;
		$message=~s|\\t|   |g;
	}
	
	$msg.="-"
		if $line->{'_source'}->{'f'};
	$msg.=$message;
	
	if ($line->{'_source'}->{'data'})
	{
		my $msg_data=color 'bright_black';
		$msg_data.=to_json($line->{'_source'}->{'data'},{
			'pretty' => $main::arg{'pretty'},
			'canonical' => 1,
			'space_before' => 0
		});
		$msg_data=~s/\n/"\n" . (" " x $msg_prefix_size)/ge;
		$msg_data=~s|\s+$||;
		$msg_data.=color 'reset';
		$msg.="\n".(" " x $msg_prefix_size).$msg_data;
	}
#	print Dumper($line->{'_source'}->{'data'});
	
	print color 'bold red'
		if $line->{'_source'}->{'f'};
	
	print $msg."\n";
	
	print color 'reset';
	
	$src_last=$src;
	$src_t_last=$src_t;
}

	# main while
	if ($main::arg{'tail'})
	{
#		main::_log_stdout("search for new from '$last_timestamp'");
		
#		{"range" => {
#			'@timestamp' => {
#				'gte' => 'now-'.$main::arg{'range'}
#			}
#		}}
		my $last_filter=$search_config->{'body'}->{'query'}->{'filtered'}->{'filter'}->{'bool'}->{'must'}[-1];
		
		if (!$last_filter->{'range'} || !$last_filter->{'range'}->{'@timestamp'} || !$last_filter->{'range'}->{'@timestamp'}->{'gt'})
		{
			push @{$search_config->{'body'}->{'query'}->{'filtered'}->{'filter'}->{'bool'}->{'must'}},
				{"range" => {
					'@timestamp' => {
						'gt' => $last_timestamp
					}
				}};
		}
		else
#		if ($last_filter->{'range'} && $last_filter->{'range'}->{'@timestamp'} && $last_filter->{'range'}->{'gte'})
		{
			delete $last_filter->{'range'}->{'@timestamp'};
			$last_filter->{'range'}->{'@timestamp'}->{'gt'} = $last_timestamp;
		}
		
		sleep (1);
		next;
	}
	last
}

print "\n";
1;
