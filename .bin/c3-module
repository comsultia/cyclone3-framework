#!/usr/bin/perl
use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8;
use Term::ANSIColor;

BEGIN
{
	$main::debug=1 if $ENV{'CYCLONE3DEBUG'};
	if (!$ENV{'CYCLONE3PATH'})
	{
		$ENV{'CYCLONE3PATH'}="/www/TOM" if -d "/www/TOM"; # obsolete
		$ENV{'CYCLONE3PATH'}="/Cyclone3" if -d "/Cyclone3";
		$ENV{'CYCLONE3PATH'}="/srv/Cyclone3" if -d "/srv/Cyclone3";
	}
	$tom::dsgn="default";
}
END {use Inline;$SIG{__WARN__} = sub {};}

# process tom::P

our %arg;
foreach my $key(@ARGV)
{
	$key=~s/--// && do
	{
		my @ref=split('=',$key,2);
		$ref[1]=1 unless exists $ref[1];
		$main::arg{$ref[0]}=$ref[1];
		next;
	};
	$key=~s/-// && do
	{
		foreach (split('',$key)){$main::arg{$_}++;}
	};
}

if ($main::arg{'domain'})
{
	$main::arg{'domain'}=~s|^www\.||i;
	$main::h=$main::arg{'domain'};$main::h=~s|\.|_|g;$main::h=~s|/|__|g;
	
	my $path=$main::arg{'domain'};$path=~s|^(.[^/]*)(.*)||;
	my $path_dom=$1;my $path_sub=$2;
	$path_dom=~s|(.*\.\|)(.*?\..*?)$|$1|;
	$tom::p="!$2";$path_dom=~s|\.$||;
	
	foreach (reverse split('\.',$path_dom)){$tom::p.="/!$_";}
	foreach (split('/',$path_sub)){$tom::p.="/$_";}
	
	$tom::p=~s|//|/|g;
	$tom::p=$ENV{'CYCLONE3PATH'}."/".$tom::p;
	
	$tom::P=$tom::p;
}

require $ENV{'CYCLONE3PATH'}."/.core/.libs/TOM.pm";

use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8; # encode = fromutf8, decode=toutf8
use strict; # scrict code
use vars qw/
	$CGI
	%FORM
	$RPC
	$H
	$DOC
	$action
	$DOC_BODY
	%DOC_HEADER
	$TPL
	%COOKIES
	%COOKIES_all
	%COOKIES_save
	%COOKIES_all_save
	%USRM
	%env
	$IAdm
	$IAdm_log
	$ITst
	$ITst_log
	$DBH
	%DB
	$LNG_cp
	$time_modules
	$page_statuscode
	$result
	$page_save
	$url_regexp
	$USRM_flag
	$location
	$sitemap
	%a210
	%key
	/;

require TOM::Engine::pub;

package main;

my $t_domain=track TOM::Debug("Domain service init");
eval
{
	# import Content-Type library
	main::_log("use Content-Type library type='$pub::DOC'");
	eval "use TOM::Document::".$pub::DOC; die "can't load library TOM::Document:;($pub::DOC)" if $@;
	# import default header
	main::_log("require default.header");
	do $tom::P."/_dsgn/default.header"
		|| do $tom::P."/_dsgn/default.dsgn";
	
	$main::H=new TOM::Document(%DOC_HEADER);
	$main::time_current=time();
	$tom::time_current=$main::time_current;
};
$t_domain->close();

$TOM::engine_ready=1;

eval
{
	Tomahawk::module(%arg) if $main::arg{'d'}; # process double time
	
	$main::time_current=$tom::time_current=time();
	local (
		$tom::Tsec,
		$tom::Tmin,
		$tom::Thour,
		$tom::Tmday,
		$tom::Tmom,
		$tom::Tyear,
		$tom::Twday,
		$tom::Tyday,
		$tom::Tisdst) = localtime($tom::time_current);
#		main::_log("hour=$tom::Thour");
	# doladenie casu
	$tom::Tyear+=1900;$tom::Tmom++;
	# zaciatok dnesneho dna
	$main::time_day=$tom::time_current-($tom::Thour*3600)-($tom::Tmin*60)-$tom::Tsec;
	# formatujem cas
	local (
		$tom::Fsec,
		$tom::Fmin,
		$tom::Fhour,
		$tom::Fmday,
		$tom::Fmom,
		$tom::Fyear,
		$tom::Fwday,
		$tom::Fyday,
		$tom::Fisdst
		) = (
		sprintf ('%02d', $tom::Tsec),
		sprintf ('%02d', $tom::Tmin),
		sprintf ('%02d', $tom::Thour),
		sprintf ('%02d', $tom::Tmday),
		sprintf ('%02d', $tom::Tmom),
		$tom::Tyear,
		$tom::Twday,
		$tom::Tyday,
		$tom::Tisdst);
	
	if (exists $main::arg{'s'}) # speed test
	{
		$main::arg{'s'}=10 unless $main::arg{'s'};
		for (1..$main::arg{'s'})
		{
			main::_log("run [$_/$main::arg{'s'}]");
			Tomahawk::module(%arg);
		}
	}
	
	$main::debug=1 if $main::arg{'v'};
	
	main::_log("call to module");
	if ($main::debug){foreach (keys %arg)
	{
		main::_log(" $_='$arg{$_}'");
	}}
	%main::FORM=%arg;
	my ($out)=Tomahawk::module(%arg,'-stdout'=>1);
	if (!$out)
	{
		main::_log("returned error code $out $@ ".$tom::ERR,1);
	}
};
if ($@)
{
	main::_log("crashed with $@",1);
}

print color 'reset';

