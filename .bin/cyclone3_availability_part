#!/usr/bin/env perl
# ex:ts=4

use strict;
use warnings;
use DateTime;
use File::ReadBackwards;

my $cmd = shift || '';
if ($cmd eq 'config') {print qq{graph_title Cyclone3 CPU usage
graph_args --base 1000 --lower-limit 0
graph_category cyclone3
graph_vlabel milliseconds
graph_order pre post pro
graph_total total
pre.label prepare
pre.draw LINE2
pre.min 0
pre.max 1000
post.label postprocess
post.draw LINE2
post.min 0
post.max 1000
pro.label process
pro.draw LINE2
pro.min 0
pro.max 1000
};
	exit 0;
}

my $debug;
	$debug=1 if $cmd eq "debug";

my $date=`date +"%Y-%m-%d"`;chomp($date);
#my $text=`tail /srv/Cyclone3/_logs/$date.pub.bench.log -n 1000`;

#print $text

my $datetime_now=DateTime->now('time_zone' => 'local');
	my $startday=$datetime_now->day();
	$datetime_now->add('minutes' => -1);
	if ($startday>$datetime_now->day())
	{
		$datetime_now->add('days' => 1);
		$datetime_now->set_hour(0);
		$datetime_now->set_minute(0);
	}
#my $datetime_now_string=$datetime_now->hour().":".$datetime_now->minute();
my $datetime_now_string=sprintf('%02d',$datetime_now->hour()).":".sprintf('%02d',$datetime_now->minute()).":".sprintf('%02d',$datetime_now->second());
	print "from $datetime_now_string\n" if $debug;
	
my $i;
my $value_pre;
my $value_pro;
my $value_post;
my $bw = File::ReadBackwards->new('/srv/Cyclone3/_logs/'.$date.'.pub.bench.log') or die "can't read 'log_file' $!" ;
while( my $line = $bw->readline )
{
	chomp($line);
	if ($line=~/\[(\d\d):(\d\d):(\d\d)/)
	{
		my $time_str=$1.":".$2.":".$3;
		last if $time_str lt $datetime_now_string;
	}
	else
	{
		next;
	}
#	next 
	print $line."\n" if $debug;
	
	$i++;
	if ($line=~/pre_process:([\d\.]+)\/([\d\.]+)/)
	{
		$value_pre+=$2;
	}
	if ($line=~/ process:([\d\.]+)\/([\d\.]+)/)
	{
		$value_pro+=$2;
	}
	if ($line=~/post_process:([\d\.]+)\/([\d\.]+)/)
	{
		$value_post+=$2;
	}
}

$i=1 unless $i;

$value_pre/=$i;
$value_pro/=$i;
$value_post/=$i;

$value_pre=int($value_pre*1000);
$value_pro=int($value_pro*1000);
$value_post=int($value_post*1000);

$value_pre="U" unless $value_pre;
$value_pro="U" unless $value_pro;
$value_post="U" unless $value_post;

print "pre.value " . $value_pre . "\n";
print "pro.value " . $value_pro . "\n";
print "post.value " . $value_post . "\n";

#print "$value_req $value_proc";

#my $tom3_value=`ps ax | grep "\.core/tom3" | grep -vc "grep"`;chomp($tom3_value);
#print "tom3.value " . $tom3_value . "\n";

