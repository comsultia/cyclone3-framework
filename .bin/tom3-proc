#!/usr/bin/perl
use Term::ANSIColor;
use Time::HiRes;
BEGIN {
	if (!$ENV{'CYCLONE3PATH'})
	{
		$ENV{'CYCLONE3PATH'}="/www/TOM" if -d "/www/TOM"; # obsolete
		$ENV{'CYCLONE3PATH'}="/Cyclone3" if -d "/Cyclone3";
		$ENV{'CYCLONE3PATH'}="/srv/Cyclone3" if -d "/srv/Cyclone3";
	}
	require $ENV{'CYCLONE3PATH'}."/.bin/tom3-init";
	$0.=" {tom3-proc}";
}
use Term::InKey;
%form=
(
# '--host'	=>	"restart host (eg. www_localhost_com)",
# '-s'		=>	"show all",
);
if (($FORM{h})||($FORM{help})){&help();}


#open(*STDERR,">/dev/null");

use Proc::ProcessTable;
use DateTime;
use Ext::Redis::_init;

while(1)
{
	
	
	# cmdline
	# pctcpu
	# rss
	
	my %hosts;
	
	my $t = new Proc::ProcessTable;
	foreach my $p (@{$t->table})
	{
		use Data::Dumper;
#		print Dumper($p);
#		next unless $p->{'cmndline'}=~/(\.core\/tom3|perl.*core\.tom)/;
#		print $p->{'cmndline'}."\n";
		#next unless $p->{'cmndline'}=~/^.*\/perl $TOM::P\/[^ ]*\/(.*?)$/;
		
		next unless $p->{'cmndline'}=~/^c3\-([^ ]*)/;
		my $engine=$1;
		my $request;
		my $class;
		
		if ($p->{'cmndline'}=~/:([^ ]*)/)
		{
			$class=$1;
			$engine.=":".$class;
		}
		
		my $host='_global';
		$p->{'cmndline'}=~s|\[(.*?)\]|| && do {$host=$1};
		$p->{'cmndline'}=~s|\{(.*?)\}|| && do {$request=$1};
		
		push @{$hosts{$host}},{
			'engine'=>$engine,
			'size'=>$p->{'size'},
			'rss'=>$p->{'rss'},
			'pctcpu'=>$p->{'pctcpu'},
			'state'=>$p->{'state'},
			'start'=>$p->{'start'},
			'time'=>$p->{'time'},
			'pid'=>$p->{'pid'},
			'request' => $request
		};
		
	}
	
#	exit;
	
		my $l;
		foreach my $host(sort keys %hosts)
		{
			$l=length($host) if length($host)>$l;
		}
		
		$l=20 if $l<=20;
		
		my $print_out;
		$print_out.=color 'reset bold cyan';
		$print_out.="[DOMAIN(start)".(" " x ($l-13))."][ENGINE              ][STAT ][P ][  CPU][  RSS][START][TIMEm][  PID][IDLEs][  rqs][rq/m][rqcode  ][uri               ]\n";
		$print_out.=color 'reset cyan';
		
		my $processes;
		my $cpu;
		my $rss;
		foreach my $host(sort keys %hosts)
		{
			for (0..@{$hosts{$host}}-1)
			{
				$processes++;
				my $setcolor;
				$hosts{$host}[$_]{'state'}="proc" if $hosts{$host}[$_]{'state'} eq "onprocessor";
				if ($hosts{$host}[$_]{'state'} eq "run"){$setcolor = 'reset bold cyan';}
				if ($hosts{$host}[$_]{'state'} eq "proc"){$setcolor = 'reset bold cyan';}
				else {$setcolor = 'reset cyan';}
				$print_out.=color $setcolor;
				
				# host
				if (!$_){$print_out.="[".sprintf("%-".$l."s",$host)."]";}else {$print_out.=(" " x ($l+2));}
				
				# engine
				$hosts{$host}[$_]{'engine'}=substr($hosts{$host}[$_]{'engine'},0,20);
				$print_out.= "[".sprintf("%-20s",$hosts{$host}[$_]{'engine'})."]";
				
				# STAT
				$print_out.= "[";
				if ($hosts{$host}[$_]{'state'} eq "run"){$print_out.= color 'bold yellow'}
				$print_out.= sprintf("%5s",$hosts{$host}[$_]{'state'});
				$print_out.= color $setcolor;$print_out.= "]";
				
				# P
				$print_out.= "[".sprintf("%2s",$_+1)."]";
				
				# CPU
				$print_out.= "[";
				if ($hosts{$host}[$_]{'pctcpu'} > 10){$print_out.= color 'bold cyan'}
				if ($hosts{$host}[$_]{'pctcpu'} > 50){$print_out.= color 'yellow'}
				if ($hosts{$host}[$_]{'pctcpu'} > 95){$print_out.= color 'bold red'}
				$print_out.= sprintf('%5s',sprintf('%-2.1f',$hosts{$host}[$_]{'pctcpu'}));$print_out.= color $setcolor;$print_out.= "]";
				$cpu+=$hosts{$host}[$_]{'pctcpu'};
				
				# MEM
				$hosts{$host}[$_]{'rss'}=int($hosts{$host}[$_]{'rss'}/1024/1024);
				$print_out.= "[";
				if ($hosts{$host}[$_]{'rss'} > 200){$print_out.= color 'yellow'}
				if ($hosts{$host}[$_]{'rss'} > 300){$print_out.= color 'bold red'}
				$print_out.= sprintf("%4d",$hosts{$host}[$_]{'rss'});$print_out.= color $setcolor;$print_out.= "M]";
				$rss+=$hosts{$host}[$_]{'rss'};
				
				my $dt = DateTime->from_epoch( epoch => $hosts{$host}[$_]{'start'},'time_zone'=>'local');
				$print_out.= "[".sprintf('%02d',$dt->hour).":".sprintf('%02d',$dt->min)."]";
				
				$print_out.= "[";
				if ((time()-$hosts{$host}[$_]{'start'}) > $TOM::max_time*0.5){$print_out.= color 'yellow'};
				if ((time()-$hosts{$host}[$_]{'start'}) > $TOM::max_time*0.8){$print_out.= color 'bold red'};
				$print_out.= sprintf('%5s',int((time()-$hosts{$host}[$_]{'start'})/60)+1);
				$print_out.= color $setcolor;
				$print_out.= "]";
				
				$print_out.= "[".sprintf('%5s',$hosts{$host}[$_]{'pid'})."]";
				
				if ($Redis)
				{
					# additional data
					my $vals={@{$Redis->hgetall('c3process|'.$TOM::hostname.':'.$hosts{$host}[$_]{'pid'})}};
					if ($vals->{'time'})
					{
						$print_out.= "[";
						my $idle=(time() - $vals->{'time'});
#						if ($idle > 5){print color 'bold cyan'}
						if ($idle > 60){$print_out.= color 'yellow'}
#						if ($idle > 60){print color 'bold red'}
						if ($idle > 1)
						{
							$print_out.=sprintf('%5s',$idle);
						}
						else
						{
							$print_out.= "     ";
						}
						$print_out.= color $setcolor;$print_out.= "]";
						
						$print_out.= "[".sprintf('%5s',$vals->{'count'})."]";
						
						my $living=(time()-$hosts{$host}[$_]{'start'})/60;
						my $rqs=int($vals->{'count'}/($living||1));
						
						$print_out.= "[";
#						if ($rqs < 1){print color 'bold red'}
						if ($rqs < 10){$print_out.= color 'yellow'}
						elsif ($rqs < 60){}
						else {$print_out.= color 'bold cyan'}
#						if ($rqs > 60){print color 'bold red'}
#						if ($rqs > 60){print color 'bold red'}
						$print_out.=sprintf('%4s',$rqs);
						$print_out.= color $setcolor;$print_out.= "]";
						
						$print_out.= "[";
						if ($vals->{'request_code'}){$print_out.= color 'bold cyan'}
						$print_out.=sprintf('%8s',$vals->{'request_code'});
						$print_out.= color $setcolor;$print_out.= "]";
						
						$print_out.= "[";
						if ($vals->{'request_code'})
						{
							if ($idle >= 5)
							{
								$print_out.= color 'red';
							}
							elsif ($idle >= 2)
							{
								$print_out.= color 'bold yellow';
							}
							$print_out.=sprintf('%.70s',$vals->{'host'}.$vals->{'request'});
							$print_out.= "]";
						}
						
					}
					elsif ($hosts{$host}[$_]{'request'})
					{
						$print_out.= " ".$hosts{$host}[$_]{'request'};
					}
				}
				
				$print_out.= "\n";
				
			}
			
			
		}
		
		$print_out.= color 'reset cyan';
		$print_out.= "[TOTAL".(" " x ($l-5))."]                             [". sprintf('%2d',$processes)."][". sprintf('%5s',sprintf('%-2.2f',$cpu)) ."][" .sprintf('%4s',$rss). "M]\n";
		$print_out.= color 'reset cyan';
		
		&Clear() unless $FORM{'s'};
		print $print_out;
		#print color 'reset bold cyan';print "*";print "\n";
		Time::HiRes::sleep(1) unless $FORM{'r'};
		exit if $FORM{'s'};
	
}




&exit();
