#!/usr/bin/env c3-job
package Cyclone3::job;
use parent 'TOM::Engine::job::module';
use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8;
use strict;

use Ext::Elastic::_init;
use Data::Dumper;

sub execute
{
	my $self=shift;
	my $env=$self->env;
	
#	print "funguje\n";
	main::_log_stdout("putting settings");
	
	if (!$Elastic)
	{
		main::_log_stdout("Elastic not available");
		return undef;
	}
	
	my %log_date=main::ctodatetime(time(),format=>1);
	my $default_index=$log_date{'year'}.$log_date{'mon'};
	
	main::_log_stdout("open index .cyclone3.".$default_index);
	$Elastic->indices->open('index'=>'.cyclone3.'.$default_index);
	
	main::_log_stdout("check if .cyclone3.$default_index exists");
	
	if (!$Elastic->exists(
		'index' => '.cyclone3.'.$default_index,
		'type' => 'a010_test',
		'id' => 1
	))
	{
		$Elastic->index(
			'index' => '.cyclone3.'.$default_index,
			'type' => 'a010_test',
			'id' => 1,
			'body' => {
				'test' => 'test'
			}
		);
	}
	
	main::_log_stdout("delete_template");
	eval{$Elastic->indices->delete_template('name'=>'.cyclone3.*')};
	main::_log_stdout("put_template");
	$Elastic->indices->put_template(
		'name'=>'.cyclone3.*',
		'body' => {
			'template'=>'.cyclone3.*',
			'mappings' => {
				'_default_' => {
					"_meta" => {
						"version" => "1.00"
					},
					"numeric_detection" => 'false',
					"date_detection" => 'false',
#					"dynamic_templates" => [
#						
#					],
#					'properties' => {
#						
#					}
				},
				'event' => {
					"_meta" => {
						"version" => "1.00"
					},
					"numeric_detection" => 'false',
					"date_detection" => 'false',
					"dynamic_templates" => [ # http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-root-object-type.html
						{
							"pub.query" => {
								"path_match" => "pub.query.*",
								'mapping' => {
									'type' => 'string','index' => 'not_analyzed'
								}
							},
						},
#						{
#							"pub" => {
#								"path_match" => "pub.*",
#								'mapping' => {
#									'type' => 'string','index' => 'not_analyzed'
#								}
#							},
#						},
#						{
#							"user" => {
#								"path_match" => "user.*",
#								'mapping' => {
#									'type' => 'string','index' => 'not_analyzed'
#								}
#							},
#						},
						{
							"times" => {
								"path_match" => "times.*",
								'mapping' => {
									'type' => 'integer'
								}
							},
						},
					],
					'properties' => {
						'pub' => {
							'properties' => {
								'HOST' => {'type' => 'string','index' => 'not_analyzed'},
								'REMOTE_ADDR' => {'type' => 'string','index' => 'not_analyzed'}
							}
						},
						'datetime' => {
							'type' => 'date',
							'format' => 'YYYY-MM-dd HH:mm:ss.SSS',
							'store' => 'yes'
						},
						'severity' => {'type' => 'string','index' => 'not_analyzed'},
						'hostname' => {'type' => 'string','index' => 'not_analyzed'},
						'PID' => {'type' => 'integer'},
						'facility' => {'type' => 'string','index' => 'not_analyzed'},
						'engine' => {'type' => 'string','index' => 'not_analyzed'},
						'domain' => {'type' => 'string','index' => 'not_analyzed'},
						'request' => {'type' => 'string','index' => 'not_analyzed'}
					}
				}
			},
			'settings' => {
				'version' => '1.03',
				'analysis' => {
					'analyzer' => {
						'default_index' => {
							'tokenizer' => 'lowercase',
							'filter' => ['standard', 'lowercase', 'asciifolding', 'unique'],
							'char_filter' => ['html_strip']
						},
						'default_search' => {
							'tokenizer' => "lowercase",
							'filter' => ['standard', "lowercase", "asciifolding"]
						}
					},
					"filter" => {
						"cyclone3_delimiter" => {
							"type" => "word_delimiter",
							"generate_word_parts" => 'true',
							"catenate_words" => 'true',
							"catenate_numbers" => 'true',
							"catenate_all" => 'true',
							"split_on_case_change" => 'true',
							"preserve_original" => 'true',
							"split_on_numerics" => 'true',
							"stem_english_possessive" => 'true'
						}
					}
				}
			}
			
		}
	);
	
	main::_log_stdout("open index .cyclone3.".$default_index);
	$Elastic->indices->open('index'=>'.cyclone3.'.$default_index);
	
	if ($env->{'recreate'})
	{
		main::_log_stdout("delete indexes .cyclone3.*");
		$Elastic->indices->delete('index'=>'.cyclone3.*');
		main::_log_stdout("create index");
		$Elastic->index(
			'index' => '.cyclone3.'.$default_index,
			'type' => 'a010_test',
			'id' => 1,
			'body' => {
				'test' => 'test'
			}
		);
	}
	
	
return 1}
1;
