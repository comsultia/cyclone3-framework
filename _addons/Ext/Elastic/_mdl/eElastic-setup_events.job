#!/usr/bin/env c3-job
package Cyclone3::job;
use parent 'TOM::Engine::job::module';
use open ':utf8', ':std';
use encoding 'utf8';
use utf8;
use strict;

use Ext::Elastic::_init;
use Data::Dumper;

sub execute
{
	my $self=shift;
	my $env=$self->env;
	
#	print "funguje\n";
	main::_log_stdout("putting settings");
	
	if (!$Elastic)
	{
		main::_log_stdout("Elastic not available");
		return undef;
	}
	
	my %log_date=main::ctodatetime(time(),format=>1);
	my $default_index=$log_date{'year'}.$log_date{'mon'};
	
	main::_log_stdout("open index .cyclone3.".$default_index);
	$Elastic->indices->open('index'=>'.cyclone3.'.$default_index);
	
	main::_log_stdout("check if .cyclone3.$default_index exists");
	
	if (!$Elastic->exists(
		'index' => '.cyclone3.'.$default_index,
		'type' => 'a010_test',
		'id' => 1
	))
	{
		$Elastic->index(
			'index' => '.cyclone3.'.$default_index,
			'type' => 'a010_test',
			'id' => 1,
			'body' => {
				'test' => 'test'
			}
		);
	}
	
	main::_log_stdout("open index .cyclone3.".$default_index);
	$Elastic->indices->open('index'=>'.cyclone3.'.$default_index);
	
	if ($env->{'recreate'})
	{
		main::_log_stdout("delete indexes .cyclone3.*");
		$Elastic->indices->delete('index'=>'.cyclone3.*');
		main::_log_stdout("create index");
		$Elastic->index(
			'index' => '.cyclone3.'.$default_index,
			'type' => 'a010_test',
			'id' => 1,
			'body' => {
				'test' => 'test'
			}
		);
	}
	
	main::_log_stdout("close indexes .cyclone3.*");
	$Elastic->indices->close('index'=>'.cyclone3.*');	
	
	main::_log_stdout("put settings");
	$Elastic->indices->put_settings(
		'index'=>'.cyclone3.*',
		'body' => {
			'version' => '1.02',
			'analysis' => {
				'analyzer' => {
					'default_index' => {
						'tokenizer' => 'lowercase',
#						'tokenizer' => 'word_delimiter',
						'filter' => ['standard', 'lowercase', 'asciifolding', 'trim', 'stop', 'unique'],
#						'filter' => ['cyclone3_delimiter'],
						'char_filter' => ['html_strip']
					},
					'default_search' => {
						'tokenizer' => "lowercase",
						'filter' => ["standard", "lowercase", "asciifolding", "stop", "porter_stem"]
					}
				},
				"filter" => {
					"cyclone3_delimiter" => {
						"type" => "word_delimiter",
						"generate_word_parts" => 'true',
						"catenate_words" => 'true',
						"catenate_numbers" => 'true',
						"catenate_all" => 'true',
						"split_on_case_change" => 'true',
						"preserve_original" => 'true',
						"split_on_numerics" => 'true',
						"stem_english_possessive" => 'true'
					}
				}
			}
		}
	);
	
	# event
	main::_log_stdout("put mapping event");
	$Elastic->indices->put_mapping(
		'index' => ".cyclone3.*",
		'type' => "event",
		'body' => {
			"_meta" => {
				"version" => "1.00"
			},
			"numeric_detection" => 'false',
			"date_detection" => 'false',
			"dynamic_templates" => [ # http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/mapping-root-object-type.html
				{
					"pub.query" => {
						"path_match" => "pub.query.*",
						'mapping' => {
							'type' => 'string','index' => 'not_analyzed'
						}
					},
				},
#				{
#					"pub" => {
#						"path_match" => "pub.*",
#						'mapping' => {
#							'type' => 'string','index' => 'not_analyzed'
#						}
#					},
#				},
				{
					"times" => {
						"path_match" => "times.*",
						'mapping' => {
							'type' => 'integer'
						}
					},
				},
#				{
#					"strings" => {
#						"match" => "*",
#						"match_mapping_type" => "string",
#						"mapping" => {
#							"type" => "string",
#							"index" => "not_analyzed"
#						}
#					}
#          },
#				"dates": {
#					"match": ".*Date|date",
#					"match_pattern": "regex",
#					"mapping": {
#						"type": "date"
#					}
#				}
			],
			'properties' => {
#				'timestamp' => {
#					'type' => 'float',
#					'index' => 'not_analyzed'
#				},
				'datetime' => {
					'type' => 'date',
					'format' => 'YYYY-MM-dd HH:mm:ss.SSS',
					'store' => 'yes'
				},
				'severity' => {'type' => 'string','index' => 'not_analyzed'},
				'hostname' => {'type' => 'string','index' => 'not_analyzed'},
				'PID' => {'type' => 'integer'},
				'facility' => {'type' => 'string','index' => 'not_analyzed'},
				'engine' => {'type' => 'string','index' => 'not_analyzed'},
				'domain' => {'type' => 'string','index' => 'not_analyzed'},
				'request' => {'type' => 'string','index' => 'not_analyzed'}
			}
		}
	);
	
	main::_log_stdout("open indexes .cyclone3.*");
	
	$Elastic->indices->open('index'=>'.cyclone3.*');
	
	main::_log_stdout("getting settings");
	
	my $result = $Elastic->indices->get_settings(
		'index'   => '.cyclone3.'.$default_index,
	);
	
#	print Dumper($result);
	
return 1}
1;
