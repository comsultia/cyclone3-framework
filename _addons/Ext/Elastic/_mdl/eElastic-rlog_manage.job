#!/usr/bin/env c3-job
package Cyclone3::job;
use parent 'TOM::Engine::job::module';
use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8;
use strict;

use Ext::Elastic::_init;
use Data::Dumper;

sub execute
{
	my $self=shift;
	my $env=$self->env;
	return if $self->running({'max'=>(3600*12)}); # check if not already running
	
	my $max_days = $TOM::DEBUG_log_type{'pub'}{'max_days'} || 7;
#		$max_days = 32;
	
	if (!$Ext::Elastic_rlog && !$Ext::Elastic)
	{
		return 1;
	}
	
	return 1
		unless $Ext::Elastic_rlog->{'_manage'};
	
	$Ext::Elastic = $Ext::Elastic_rlog
		|| $Ext::Elastic;	
	$Ext::Elastic->{'request_timeout'} = 300;
	
	main::_log("manage=".$Ext::Elastic_rlog->{'_manage'}." (\$Ext::Elastic_rlog->{'_manage'})");
	
	my $Elastic=Search::Elasticsearch->new($Ext::Elastic);
	
	if (!$Elastic)
	{
		return 1;
	}
	
	my @filter=[{"terms" => {"hd" => [$TOM::domain || 'undef']}}];
	
	if ($Ext::Elastic_rlog->{'_manage'})
	{
		# check config
		my $temp_version=1.18;
		my $temp_data={};
		eval {$temp_data=$Elastic->indices->get_template('name'=>'logstash-*');};
		if ($temp_data->{'logstash-*'}->{'mappings'}->{'fluentd'}->{'_meta'}->{'version'} < $temp_version)
		{
			main::_log_stdout("updating template to version $temp_version");
			$Elastic->indices->put_template(
				'name'=>'logstash-*',
				'body' => {
					'timeout' => 600000,
					'template'=>'logstash-*',
					'settings' => {
						"number_of_shards" => 4,
						"number_of_replicas" => 0, # at creation time of indice don't allocate between nodes
						"index.routing.allocation.exclude.tag" => "weak",
						"index.refresh_interval" => "30s"
					},
					'mappings' => {
						'fluentd' => {
							"_meta" => {
								"version" => $temp_version
							},
							'properties' => {
								
								'@timestamp' => {
									"type" => "date"
								},
								
								'a' => { # archived?
									'type' => 'string',
									'index' => 'not_analyzed'
								},
								'p' => { # pid
									'type' => 'integer',
								},
								'h' => { # hostname
									'type' => 'string',
									'index' => 'not_analyzed'
								},
								'hd' => { # host domain
									'type' => 'string',
									'index' => 'not_analyzed'
								},
								'l' => { # level
									'type' => 'integer'
								},
								'o' => { # helps to natural order
									'type' => 'long'
								},
								'd' => { # domain
									'type' => 'string',
									'index' => 'not_analyzed'
								},
								'dm' => { # domain master
									'type' => 'string',
									'index' => 'not_analyzed'
								},
								'c' => { # code
									'type' => 'string',
									'index' => 'not_analyzed'
								},
								'e' => { # engine
									'type' => 'string',
									'index' => 'not_analyzed'
								},
								'f' => { # fault
									'type' => 'integer',
								},
								't' => { # log name / type
									'type' => 'string',
									'index' => 'not_analyzed'
								},
								'm' => { # message
									'type' => 'string'
								},
							},
							
							'dynamic_templates' => [
								{'string' => {
									"match" => "*_s",
									"mapping" => {
										"type" => "string",
										"index" => "not_analyzed"
									}
								}},
								{'text' => {
									"match" => "*_t",
									"mapping" => {
										"type" => "string"
									}
								}},
								{'integer' => {
									"match" => "*_i",
									"mapping" => {
										"type" => "integer"
									}
								}},
								{'float' => {
									"match" => "*_f",
									"mapping" => {
										"type" => "float"
									}
								}},
								{'date' => {
									"match" => "*_d",
									"mapping" => {
										"type" => "date"
									}
								}}
							]
							
						}
					}
				}
			);
		}
	}
	
	my $nodes_weak = 0;
	my $nodes_strong = 0;
	my $nodes_medium = 0;
	my $nodes_data = 0;
	my $nodes_live = 0;
	
	my %nodes;
	if ($Ext::Elastic_rlog->{'_manage'})
	{
		my $node_stats  = $Elastic->cluster->stats();
		$nodes_data = $node_stats->{'nodes'}->{'count'}->{'data_only'} + $node_stats->{'nodes'}->{'count'}->{'master_data'};
		$node_stats  = $Elastic->nodes->stats();
		foreach my $node (keys %{$node_stats->{'nodes'}})
		{
			$nodes{$node}=$node_stats->{'nodes'}->{$node}->{'attributes'}->{'tag'};
			$nodes_weak += 1
				if $node_stats->{'nodes'}->{$node}->{'attributes'}->{'tag'}=~/weak/;
			$nodes_strong += 1
				if $node_stats->{'nodes'}->{$node}->{'attributes'}->{'tag'}=~/strong/;
			$nodes_medium += 1
				if $node_stats->{'nodes'}->{$node}->{'attributes'}->{'tag'}=~/medium/;
			$nodes_live += 1
				if $node_stats->{'nodes'}->{$node}->{'attributes'}->{'tag'}=~/live/;
		}
		
#		main::_log("data_nodes=$nodes_data strong=$nodes_strong weak=$nodes_weak medium=$nodes_medium");
		# re-occupy
		$nodes_weak ||= 0;
		$nodes_strong ||= 0;
		$nodes_live ||= 0;
		$nodes_medium ||= 0;
		
		main::_log("data_nodes=$nodes_data strong=$nodes_strong live=$nodes_live weak=$nodes_weak medium=$nodes_medium");
	}
	
	my @indices_list;
	
	if ($Ext::Elastic_rlog->{'_manage'})
	{
		main::_log("checking .marvel indices");
		my $indices=$Elastic->indices->stats('index' => '.marvel-*')->{'indices'};
		my $settings=$Elastic->indices->get_settings('index' => '.marvel-*');
		foreach my $indice (sort keys %{$indices})
		{
			next unless $indice=~/^\.marvel-\d/;
			my $old = int((time() - int($settings->{$indice}->{'settings'}->{'index'}->{'creation_date'}/1000))/86400);
			if ($old >= 7)
			{
				main::_log("'$indice' old $old, removing");
				$Elastic->indices->delete('index' => $indice);
			}
		}
	}
	
	main::_log("checking indices");
	my $indices=$Elastic->indices->stats('index' => 'logstash-*')->{'indices'};
	my $settings=$Elastic->indices->get_settings('index' => 'logstash-*');
	foreach my $indice (sort keys %{$indices})
	{
		
		if ($Ext::Elastic_rlog->{'_manage'})
		{
			
			if (!$indices->{$indice}->{'total'}->{'docs'}->{'count'})
			{
				main::_log(" indice $indice is empty, removing");
				$Elastic->indices->delete('index' => $indice);
				next;
			}
			
			my $tags;
			if ($settings->{$indice}->{'settings'}->{'index'}->{'routing'}
				&& $settings->{$indice}->{'settings'}->{'index'}->{'routing'}->{'allocation'}
				&& $settings->{$indice}->{'settings'}->{'index'}->{'routing'}->{'allocation'}->{'exclude'}
				&& $settings->{$indice}->{'settings'}->{'index'}->{'routing'}->{'allocation'}->{'exclude'}->{'tag'}
			)
			{
	#			print Dumper($settings->{$indice}->{'settings'}->{'index'}->{'routing'}->{'allocation'}->{'exclude'}->{'tag'});
				$tags=$settings->{$indice}->{'settings'}->{'index'}->{'routing'}->{'allocation'}->{'exclude'}->{'tag'};
			}
			
			my $old = int((time() - int($settings->{$indice}->{'settings'}->{'index'}->{'creation_date'}/1000))/86400);
			my $rel=($indices->{$indice}->{'total'}->{'docs'}->{'deleted'}/$indices->{$indice}->{'total'}->{'docs'}->{'count'});
			main::_log(" indice $indice docs=".$indices->{$indice}->{'total'}->{'docs'}->{'count'}." deleted=".$indices->{$indice}->{'total'}->{'docs'}->{'deleted'}."(".int($rel*100)."%) replicas=".$settings->{$indice}->{'settings'}->{'index'}->{'number_of_replicas'}." segments=".$indices->{$indice}->{'total'}->{'segments'}->{'count'}." old=".$old."d exclude=$tags");
			
			
			if ($old > $max_days) # old indices
			{
				my $tags_='strong,medium,live';
				if ($tags ne $tags_)
				{
					main::_log("  change routing out of '$tags_'");
					$Elastic->indices->put_settings(
						'index' => $indice,
						'body' => {
							"index.routing.allocation.exclude.tag" => $tags_
						}
					);
				}
				
				my $reg=($tags_=~s/,/\|/g)?'('.$tags_.')':'';
				my $replicas=(grep {not $nodes{$_}=~/$reg/} keys %nodes) -1;
					$replicas=0 if $replicas<0;
					$replicas=1 if $replicas>1;
				if ($settings->{$indice}->{'settings'}->{'index'}->{'number_of_replicas'} != $replicas)
				{
					main::_log("  change replicas to $replicas");
					$Elastic->indices->put_settings(
						'index' => $indice,
						'body' => {
							"index.number_of_replicas" => $replicas
						}
					);
				}
			}
			elsif ($old > 7) # not live indices
			{
				my $tags_='weak,live';
				if ($tags ne $tags_)
				{
					main::_log("  change routing out of '$tags_'");
					$Elastic->indices->put_settings(
						'index' => $indice,
						'body' => {
							"index.routing.allocation.exclude.tag" => $tags_
						}
					);
				}
				
				my $reg=($tags_=~s/,/\|/g)?'('.$tags_.')':'';
				my $replicas=(grep {not $nodes{$_}=~/$reg/} keys %nodes) -1;
#				my $replicas=$nodes_data-$nodes_weak-1;
					$replicas=0 if $replicas<0;
					$replicas=1 if $replicas>1;
				if ($settings->{$indice}->{'settings'}->{'index'}->{'number_of_replicas'} != $replicas)
				{
					main::_log("  change replicas to $replicas");
					$Elastic->indices->put_settings(
						'index' => $indice,
						'body' => {
							"index.number_of_replicas" => $replicas
						}
					);
				}
			}
			else # live indice
			# allow only strong nodes
			{
				my $tags_='weak,medium';
				if ($tags ne $tags_)
				{
					main::_log("  change routing out of '$tags_'");
					$Elastic->indices->put_settings(
						'index' => $indice,
						'body' => {
							"index.routing.allocation.exclude.tag" => $tags_
						}
					);
				}
				
				my $reg=($tags_=~s/,/\|/g)?'('.$tags_.')':'';
				my $replicas=(grep {not $nodes{$_}=~/$reg/} keys %nodes) -1;
#				my $replicas=$nodes_strong+$nodes_live-1;
					$replicas=0 if $replicas<0;
#					$replicas=0 if $replicas>0;
					$replicas=1 if $replicas>1;
				if ($settings->{$indice}->{'settings'}->{'index'}->{'number_of_replicas'} != $replicas)
				{
					main::_log("  change replicas to $replicas");
					$Elastic->indices->put_settings(
						'index' => $indice,
						'body' => {
							"index.number_of_replicas" => $replicas
						}
					);
				}
			}
			
			if ($tom::Thour >= 23 || $tom::Thour <= 6) # do it only when developers sleep
			{
				if ($rel>=0.15)
				{
					main::_log("  optimize");
					eval {$Elastic->indices->optimize('index' => $indice,'only_expunge_deletes' => 1);};
					if ($@)
					{
						main::_log($@,1);
					}
	#				last;
				}
			}
		}
		
		push @indices_list,$indice;
	}
	
return 1}
1;
