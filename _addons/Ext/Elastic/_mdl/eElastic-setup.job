#!/usr/bin/env c3-job
package Cyclone3::job;
use parent 'TOM::Engine::job::module';
use open ':utf8', ':std';
use encoding 'utf8';
use utf8;
use strict;

use Ext::Elastic::_init;
use Data::Dumper;

sub execute
{
	my $self=shift;
	my $env=$self->env;
	
#	print "funguje\n";
	main::_log_stdout("putting settings");
	
	if (!$Elastic)
	{
		main::_log_stdout("Elastic not available");
		return undef;
	}
	
	main::_log_stdout("check if cyclone3.tom exists");
	
	if (!$Elastic->exists(
		'index' => 'cyclone3.tom',
		'type' => 'a010_test',
		'id' => 1
	))
	{
		$Elastic->index(
			'index' => 'cyclone3.tom',
			'type' => 'a010_test',
			'id' => 1,
			'body' => {
				'test' => 'test'
			}
		);
	}
	
	main::_log_stdout("open index cyclone3.tom");
	$Elastic->indices->open('index'=>'cyclone3.tom');	
	
	if ($env->{'recreate'})
	{
		main::_log_stdout("delete indexes cyclone3.*");
		$Elastic->indices->delete('index'=>'cyclone3.*');
		main::_log_stdout("create index");
		$Elastic->index(
			'index' => 'cyclone3.tom',
			'type' => 'a010_test',
			'id' => 1,
			'body' => {
				'test' => 'test'
			}
		);
	}
	
	main::_log_stdout("put settings");
	$Elastic->indices->close('index'=>'cyclone3.*');
	$Elastic->indices->put_settings(
		'index'=>'cyclone3.*',
		'body' => {
			'version' => '1.02',
			'analysis' => {
				'analyzer' => {
					'default_index' => {
						'tokenizer' => 'lowercase',
#						'tokenizer' => 'word_delimiter',
						'filter' => ['standard', 'lowercase', 'asciifolding', 'trim', 'stop', 'unique'],
#						'filter' => ['cyclone3_delimiter'],
						'char_filter' => ['html_strip']
					},
					'default_search' => {
						'tokenizer' => "lowercase",
						'filter' => ["standard", "lowercase", "asciifolding", "stop", "porter_stem"]
					}
				},
				"filter" => {
					"cyclone3_delimiter" => {
						"type" => "word_delimiter",
						"generate_word_parts" => 'true',
						"catenate_words" => 'true',
						"catenate_numbers" => 'true',
						"catenate_all" => 'true',
						"split_on_case_change" => 'true',
						"preserve_original" => 'true',
						"split_on_numerics" => 'true',
						"stem_english_possessive" => 'true'
					}
				}
			}
		}
	);
	
	# _default_
	main::_log_stdout("put mapping _default_");
	$Elastic->indices->put_mapping(
		'index' => "cyclone3.*",
		'type' => "_default_",
		'body' => {
			"_meta" => {
				"version" => "1.00"
			},
			"dynamic_templates" => [
#				{
#					"pub.query" => {
#						"path_match" => "pub.query.*",
#						'mapping' => {
#							'type' => 'string','index' => 'not_analyzed'
#						}
#					},
#				},
			],
			'properties' => {
				'status' => {
					'type' => 'string',
					'index' => 'not_analyzed'
				}
			}
		}
	);
	
	# a401
	main::_log_stdout("put mapping a401_article");
	$Elastic->indices->put_mapping(
		'index' => "cyclone3.*",
		'type' => "a401_article",
		'body' => {
			"_meta" => {
				"version" => "1.00"
			},
			'properties' => {
				'status' => {
					'type' => 'string',
					'index' => 'not_analyzed'
				},
				'cat' => {
					'properties' => {
						'ID' => { 'type' => 'integer' },
						'charindex' => {
							'type' => 'string',
							"index" => "not_analyzed"
						},
					},
				},
				'article_attrs' => {
					'properties' => {
						'datetime_start' => {
							'type' => 'date',
							'format' => 'YYYY-MM-dd HH:mm:ss',
							'store' => 'yes'
						}
					}
				}
			}
		}
	);
	
	main::_log_stdout("open indexes cyclone3.*");
	
	$Elastic->indices->open('index'=>'cyclone3.*');
	
	main::_log_stdout("getting settings");
	
	my $result = $Elastic->indices->get_settings(
		'index'   => 'cyclone3.tom',
	);
	
#	print Dumper($result);
	
return 1}
1;
