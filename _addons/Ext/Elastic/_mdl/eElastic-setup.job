#!/usr/bin/env c3-job
package Cyclone3::job;
use parent 'TOM::Engine::job::module';
use open ':utf8', ':std';
use encoding 'utf8';
use utf8;
use strict;

use Ext::Elastic::_init;
use Data::Dumper;

sub execute
{
	my $self=shift;
	my $env=$self->env;
	
#	print "funguje\n";
	main::_log_stdout("putting settings");
	
	if (!$Elastic)
	{
		main::_log_stdout("Elastic not available");
		return undef;
	}
	
	if (!$Elastic->exists(
		'index' => 'cyclone3.tom',
		'type' => 'a010_test',
		'id' => 1
	))
	{
		$Elastic->index(
			'index' => 'cyclone3.tom',
			'type' => 'a010_test',
			'id' => 1,
			'body' => {
				'test' => 'test'
			}
		);
	}
	
	$Elastic->indices->close('index'=>'cyclone3.*');
	
	$Elastic->indices->put_settings(
		'index'=>'cyclone3.*',
	#	'type' => 'a401_article',
		'body' => {
	#		'settings' => {
				'version' => '1.02',
				'analysis' => {
					'analyzer' => {
						'default_index' => {
							'tokenizer' => 'lowercase',
	#						'tokenizer' => 'word_delimiter',
							'filter' => ['standard', 'lowercase', 'asciifolding', 'trim', 'stop', 'unique'],
	#						'filter' => ['cyclone3_delimiter'],
							'char_filter' => ['html_strip']
						},
						'default_search' => {
							'tokenizer' => "lowercase",
							'filter' => ["standard", "lowercase", "asciifolding", "stop", "porter_stem"]
						}
					},
					"filter" => {
						"cyclone3_delimiter" => {
							"type" => "word_delimiter",
							"generate_word_parts" => 'true',
							"catenate_words" => 'true',
							"catenate_numbers" => 'true',
							"catenate_all" => 'true',
							"split_on_case_change" => 'true',
							"preserve_original" => 'true',
							"split_on_numerics" => 'true',
							"stem_english_possessive" => 'true'
						}
					}
				}
	#		}
		}
	);
	
	$Elastic->indices->open('index'=>'cyclone3.*');
	
	main::_log_stdout("getting settings");
	
	my $result = $Elastic->indices->get_settings(
		'index'   => 'cyclone3.tom',
	#	'type' => 'a401_article',
	#	'name'    => 'name'
	);
	
	print Dumper($result);
	
return 1}
1;
