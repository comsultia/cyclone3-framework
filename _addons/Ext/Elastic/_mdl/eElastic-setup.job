#!/usr/bin/env c3-job
package Cyclone3::job;
use parent 'TOM::Engine::job::module';
use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8;
use strict;

use Ext::Elastic::_init;
use Data::Dumper;

sub execute
{
	my $self=shift;
	my $env=$self->env;
	
	main::_log_stdout("putting settings");
	
	$Elastic||=$Ext::Elastic::service;
	
	if (!$Elastic)
	{
		main::_log_stdout("Elastic not available");
		return undef;
	}
	
	main::_log_stdout("check if cyclone3.tom exists");
#	$Elastic->indices->open('index'=>'cyclone3.*');
	
#	main::_log_stdout("delete_template");
#	eval{$Elastic->indices->delete_template('name'=>'cyclone3.*')};

	# tested on elasticsearch 2.2.1
	my $version='1.10';
	main::_log_stdout("put_template");
	$Elastic->indices->put_template(
		'name'=>'cyclone3.*',
		'body' => {
			'template'=>'cyclone3.*',
			'mappings' => {
				'_default_' => {
					"_meta" => {
						"version" => $version
					},
					'properties' => {
						'status' => {
							'type' => 'string',
							'index' => 'not_analyzed'
						}
					},
					'dynamic_templates' => [
						{
							"status" => {
								"match" => "*_status",
								'mapping' => {
									'type' => 'string',
									'index' => 'not_analyzed'
								}
							}
						},
						{
							"status_" => {
								"match" => "status_*",
								'mapping' => {
									'type' => 'string',
									'index' => 'not_analyzed'
								}
							}
						},
						{
							"datetime" => {
								"match" => "datetime_*",
								'mapping' => {
									'type' => 'date',
									'format' => 'yyyy-MM-dd HH:mm:ss'
								}
							}
						},
						
						# metadata in metahash tree
						{'metadata_string' => {
							"path_match" => "metahash.*.*_s",
							"mapping" => {
								"type" => "string",
								"index" => "not_analyzed"
							}
						}},
						{'metadata_text' => {
							"path_match" => "metahash.*.*_t",
							"mapping" => {
								"type" => "string"
							}
						}},
						{'metadata_integer' => {
							"path_match" => "metahash.*.*_i",
							"mapping" => {
								"type" => "integer"
							}
						}},
						{'metadata_float' => {
							"path_match" => "metahash.*.*_f",
							"mapping" => {
								"type" => "float"
							}
						}},
						{'metadata_date' => {
							"path_match" => "metahash.*.*_d",
							"mapping" => {
								"type" => "date",
#								'format' => 'yyyy-MM-dd HH:mm:ss'
							}
						}},
						{'metadata_other' => {
							"path_match" => "metahash.*.*",
							"mapping" => {
								"type" => "string",
								"index" => "not_analyzed"
							}
						}},
					]
				},
				
				'a401_article' => {
					"_meta" => {
						"version" => $version
					},
					'properties' => {
						'status' => {
							'type' => 'string',
							'index' => 'not_analyzed'
						},
						'cat' => {'type'=>'string','index'=>'not_analyzed'},
						'article_attrs' => {
							'properties' => {
								'datetime_start' => {
									'type' => 'date',
									'format' => 'YYYY-MM-dd HH:mm:ss',
									'store' => 'yes'
								}
							}
						}
					}
				},
				
				'a710_org' => {
					"_meta" => {
						"version" => $version
					},
					'properties' => {
						'status' => {
							'type' => 'string',
							'index' => 'not_analyzed'
						},
						'name' => {
							'type' => "string",
							'copy_to' => 'name_completion',
						},
						'name_completion' => {
							'type' => "completion",
							'analyzer' => "simple",
							'search_analyzer' => "simple",
						},
						'name_short' => {
							'type' => "string",
							'copy_to' => 'name_short_completion',
						},
						'name_short_completion' => {
							'type' => "completion",
							'analyzer' => "simple",
							'search_analyzer' => "simple",
						},
						'cat' => {'type'=>'string','index'=>'not_analyzed'},
						'cat_name' => {'type'=>'string','index'=>'not_analyzed'},
						'status' => {
							'type' => 'string',
							'index' => 'not_analyzed'
						}
					},
					'dynamic_templates' => [
						# locale
						{'locale' => {
							"path_match" => "locale.*.*",
							"mapping" => {
								"type" => "string"
							}
						}}
					]
				},
				
				'a910_product' => {
					"_meta" => {
						"version" => $version
					},
					'properties' => {
						'ID' => {'type' => 'long'},
						'ID_entity' => {'type' => 'long'},
						'name' => {
							'type' => "string",
							'copy_to' => 'name_completion',
						},
						'name_completion' => {
							'type' => "completion",
							'analyzer' => "simple",
							'search_analyzer' => "simple",
#							'payloads' => 'true'
						},
						'full_name' => {
							'type' => "string",
							'copy_to' => 'full_name_completion',
						},
						'full_name_completion' => {
							'type' => "completion",
							'analyzer' => "simple",
							'search_analyzer' => "simple",
#							'payloads' => 'true'
						},
						'price' => {'type' => 'float'},
						'price_full' => {'type' => 'float'},
						'cat' => {'type'=>'string','index'=>'not_analyzed'},
						'status' => {
							'type' => 'string',
							'index' => 'not_analyzed'
						}
					},
					'dynamic_templates' => [
						# prices
						{'prices' => {
							"path_match" => "prices.*.*",
							"mapping" => {
								"type" => "float"
							}
						}},
						# locale
						{'locale' => {
							"path_match" => "locale.*.*",
							"mapping" => {
								"type" => "string"
							}
						}}
					]
				}
				
			},
			
			'settings' => {
				'version' => $version,
				'analysis' => {
					'analyzer' => {
						'default_index' => {
							'tokenizer' => 'standard',
							'filter' => ['cyclone3_delimiter','cyclone3_word_size','standard', 'lowercase', 'asciifolding', 'unique'],
							'char_filter' => ['html_strip']
						},
						'default_search' => {
							'tokenizer' => "standard",
							'filter' => ['cyclone3_delimiter','standard', "lowercase", "asciifolding"]
						}
					},
					'filter' => {
						"cyclone3_delimiter" => {
							"type" => "word_delimiter",
							"generate_word_parts" => 'true',
							"catenate_words" => 'true',
							"catenate_numbers" => 'true',
							"catenate_all" => 'true',
							"split_on_case_change" => 'true',
							"preserve_original" => 'true',
							"split_on_numerics" => 'true',
							"stem_english_possessive" => 'true'
						},
						"cyclone3_synonym" => {
							"type" => "synonym",
							"synonyms_path" => "/etc/elasticsearch/synonym.txt"
						},
						"cyclone3_word_size" => {
							"type" => "length",
							"min" => '2'
						}
					}
				}
			}
			
		}
	);
	
	if (!$Elastic->exists(
		'index' => 'cyclone3.tom',
		'type' => 'a010_test',
		'id' => 1
	))
	{
		main::_log_stdout("first index");
		eval {$Elastic->index(
			'index' => 'cyclone3.tom',
			'type' => 'a010_test',
			'id' => 1,
			'body' => {
				'test' => 'test'
			}
		)};
	}	
	
#	main::_log_stdout("open index cyclone3.tom");
#	$Elastic->indices->open('index'=>'cyclone3.tom');
	
	if ($env->{'recreate'})
	{
		main::_log_stdout("delete indexes cyclone3.*");
		$Elastic->indices->delete('index'=>'cyclone3.*');
		main::_log_stdout("create index cyclone3.tom");
		$Elastic->index(
			'index' => 'cyclone3.tom',
			'type' => 'a010_test',
			'id' => 1,
			'body' => {
				'test' => 'test'
			}
		);
	}
	
#	main::_log_stdout("getting settings");
#	my $result = $Elastic->indices->get_settings(
#		'index'   => 'cyclone3.tom',
#	);
#	print Dumper($result);
	
return 1}
1;
