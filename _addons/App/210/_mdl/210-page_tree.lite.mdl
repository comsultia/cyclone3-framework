#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8;
use strict;

use App::020::_init;
use App::210::_init;

=head1 NAME

210-page_tree.lite.mdl

=cut

sub execute
{
	my %env=@_;
	Tomahawk::GetXSGN('-convertvars'=>1) || return undef;
	delete $env{'ID_charindex'};
	
	$env{'tree'}=1 unless exists $env{'tree'};
	$env{'ID.current'}=$env{'current_ID'} if $env{'current_ID'};
	
	my $from;
	
	# ak idem vykreslovat strom od nejakeho ID
	if ($env{'ID'})
	{
		my %data=App::020::SQL::functions::get_ID(
			'db_h'    => 'main',
			'db_name' => $App::210::db_name,
			'tb_name' => 'a210_page',
			'ID'      => $env{'ID'},
			'columns' => 
			{
				'ID_charindex' => 1,
				'name' => 1,
				'name_url' => 1
			}
		);
		if ($data{'ID'})
		{
			$env{'ID_charindex'}=$data{'ID_charindex'};
			$XSGN{'TMP'}=~s|<%db_(.*?)%>|$data{$1}|g;
		}
		else
		{
			main::_log("can't find ID='$data{'ID'}'",1);
			return undef;
		}
		
	}
	
	my @ID_charindex_plus;
	
	if ($env{'level'}<0)
	{
		# display nodes above the current tree level
		
		my $reg='(.{0,'.(abs($env{'level'})*4).'})';
		$env{'ID_charindex'}=~s|^(.*?)$reg$|\1|;
		main::_log("ID_charindex=$env{'ID_charindex'} reg='$reg'");
	}
	elsif ($env{'level'})
	{
		# start output from specified level
		
		main::_log("adding all ID's from level='$env{'level'}'");
		my $ID_charindex=$env{'ID_charindex'};$ID_charindex=~s|:$||;
		
		my $level=$env{'level'}+1;
		while ($level>$env{'level'})
		{
			# level count
			my $dbg_level=$ID_charindex;$dbg_level=~s|:||g;
			my $level=(length($dbg_level)/3)+1;
			main::_log("I'm in level='$level' with charindex='$ID_charindex' max level='$env{level}'");
			last if $level<$env{'level'};
			my $out=$ID_charindex=~s|(...)$||;$ID_charindex=~s|:$||;
			last unless $out;
			main::_log("adding ID_charindex='$ID_charindex'");
			push @ID_charindex_plus, $ID_charindex;
		}
	}
	
	if ($env{'ID_charindex'})
	{
		# start drawing from specified charindex node
		
		$from=$env{'ID_charindex'};
		
		if (!$env{'parent'})
		{
			# don't show parent element of this node and its siblings
			
			$from.=':';
		}
	}
	
	my $where="lng='$env{'lng'}' AND status='Y' ";
	
	if ($env{'check_sub'})
	{
		main::_log("checking if ID_charindex='$from' has subs");
		my $sql=qq{
			SELECT
				ID
			FROM
				`$App::210::db_name`.`a210_page`
			WHERE $where AND ID_charindex LIKE '$from%'
		};
		my %sth0=TOM::Database::SQL::execute($sql,'quiet'=>1,
			'-cache' => 3600,
			'-cache_changetime' => App::020::SQL::functions::_get_changetime(
				{
					'db_h'=>"main",
					'db_name' => $App::210::db_name,
					'tb_name' => "a210_page"
				}
			)
		);
		if($sth0{'rows'}==0){
			if(exists $XSGN{'TMP.empty'}){
				$XSGN{'TMP'}=$XSGN{'TMP.empty'};
			}
		}
		elsif ($sth0{'rows'}==1)
		{
			my $ID_charindex=$env{'ID_charindex'};$ID_charindex=~s|:$||;
			$ID_charindex=~s|...$||;
			$ID_charindex=~s|:$||;
			push @ID_charindex_plus, $ID_charindex.'____';
			if ($env{'parent'})
			{
				push @ID_charindex_plus, $ID_charindex;
			}
		}
	}
	
	if (@ID_charindex_plus)
	{
		$where.="AND (ID_charindex LIKE '$from%'";
		foreach (@ID_charindex_plus)
		{
			$where.=" OR ID_charindex LIKE '$_'";
		}
		$where.=") ";
	}
	else
	{
		$where.="AND ID_charindex LIKE '$from%' ";
	}
	
	if ($env{'depth'})
	{
		# show only nodes up to specified depth
		
		my $chars=length($from)+$env{'depth'}*4;
		$where.="AND length(ID_charindex)<".($chars)." ";
	}
	
	$where="WHERE ".$where if $where;
	
	$env{'db_order'}="ID_charindex" unless $env{'db_order'};
	
	my $sql=qq{
		SELECT
			ID,
			ID_entity,
			ID_charindex,
			datetime_create,
			name,
			name_url,
			t_name,
			lng,
			status,
			visible,
			is_default
		FROM
			`$App::210::db_name`.`a210_page`
$where
		ORDER BY
			$env{'db_order'}
	};
	
	my @path;
	my @path_url;
	
	my %charindex_ID;
	
	my $level;
	my $level_prev;
	my $level_next;
	
	main::_log("quering for data from a210_page");
	my %sth0=TOM::Database::SQL::execute(
		$sql,
		'log'=>1,
		'-cache' => 300,
		'-cache_changetime' => App::020::SQL::functions::_get_changetime(
			{
				'db_h'=>"main",
				'db_name' => $App::210::db_name,
				'tb_name' => "a210_page"
			}
		)
	);
	if ($sth0{'sth'})
	{
		main::_log("received $sth0{'rows'} page nodes");
		
		# creating a complete temporary tree to work with
		
		my @tree;
		while (my %db0_line=$sth0{'sth'}->fetchhash())
		{
			$charindex_ID{$db0_line{'ID_charindex'}}=$db0_line{'ID'};
			
			my $dbg=$db0_line{'ID_charindex'};
			$dbg=~s|^(.*?)(.{0,4})$|\1|;
			
			$db0_line{'ID_parent'}=$charindex_ID{$dbg};
			
			push @tree, {%db0_line};
		}
		
		my $i=0;
		
		foreach my $entity(@tree)
		{
			
			my $dbg_level=$entity->{'ID_charindex'};$dbg_level=~s|:||g;
			$level=(length($dbg_level)/3)+1;
			
			if ($tree[$i+1])
			{
				my $dbg_level=$tree[$i+1]->{'ID_charindex'};$dbg_level=~s|:||g;
				$level_next=(length($dbg_level)/3)+1;
			}
			else
			{
				$level_next=0;
			}
			
			if ($env{'tree'})
			{
				if ($level>$level_prev)
				{
					my $subtree = $XSGN{'tree.'.($level-1)} || $XSGN{'tree'};
					my $rec=$XSGN{'TMP'}=~s|<#tree#>|$subtree|;
				}
			}
			
			for ($level..$level_prev+1)
			{
				delete $path[$_];
			}
			
			$path[$level]=$entity->{'name_url'};
			
			my $path_;
			foreach my $node (App::020::SQL::functions::tree::get_path(
				$entity->{'ID'},
				'db_h'    => 'main',
				'db_name' => $App::210::db_name,
				'tb_name' => 'a210_page',
				'-cache' => 3600,
			))
			{
				$path_.='/'.$node->{'name_url'};
			}
			$path_=~s|^/||;
			
			
			$XSGN{'NULL'}=$XSGN{'item'};
			
			if (
					(
						($env{'ID.current'} eq $entity->{'ID'})
						|| ($main::FORM{'a210_path'}=~/^$path_\//)
						|| ($main::FORM{'a210_path'} eq $path_)
					)
					&&
					$XSGN{'item.current'}
			)
			{
				$XSGN{'NULL'}=$XSGN{'item.current'};
			}
			
			$XSGN{'NULL'}=~s|<%ID%>|$entity->{'ID'}|g;
			$XSGN{'NULL'}=~s|<%ID_entity%>|$entity->{'ID_entity'}|g;
			$XSGN{'NULL'}=~s|<%ID_parent%>|$entity->{'ID_parent'}|g;
			$XSGN{'NULL'}=~s|<%name%>|$entity->{'name'}|g;
			$XSGN{'NULL'}=~s|<%name_url%>|$entity->{'name_url'}|g;
			$XSGN{'NULL'}=~s|<%datetime_create%>|$entity->{'datetime_create'}|g;
			$XSGN{'NULL'}=~s|<%t_name%>|$entity->{'t_name'}|g;
			$XSGN{'NULL'}=~s|<%status%>|$entity->{'status'}|g;
			$XSGN{'NULL'}=~s|<%visible%>|$entity->{'visible'}|g;
			$XSGN{'NULL'}=~s|<%is_default%>|$entity->{'is_default'}|g;
			$XSGN{'NULL'}=~s|<%path%>|$path_|g;
			$XSGN{'NULL'}=~s|<%level%>|$level|g;
			
			if ($env{'tree'})
			{
				if ($level_next<$level)
				{
					$XSGN{'NULL'}=~s|<#item#>||g;
				}
				if ($level_next<=$level)
				{
					$XSGN{'NULL'}=~s|<#tree#>||g;
				}
			}
			
			$XSGN{'TMP'}=~s|<#item#>|$XSGN{'NULL'}|;
			
			if ($env{'tree'})
			{
				for ($level_next..$level-2)
				{
					$XSGN{'TMP'}=~s|<#item#>||;
				}
				for ($level_next..$level-1)
				{
					$XSGN{'TMP'}=~s|<#tree#>||;
				}
			}
			
			$level_prev=$level;
			$i++;
		}
		
	}
	else
	{
		main::_log("not received any nodes");
	}
	
	return 1;
}

our $authors="open\@comsultia.com";

=head1 AUTHORS

Comsultia, Ltd. (open@comsultia.com)

=cut

1;
