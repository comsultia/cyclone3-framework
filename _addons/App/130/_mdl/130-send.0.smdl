#!/usr/bin/perl
# áéíóú - USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use encoding 'utf8';
use utf8;
use strict;

=head1 NAME

130-send.0.smdl

=head1 DEPENDS

libraries:

 Secure::form

modules:

 130-send.0.mdl

=cut

use Secure::form;

=head1 INPUTS

Here are all parameters with examples.

B<Main>:

=over

=item

B<action> [varchar('', 'send')]: determine what to do.

B<1.> if it is not specified the form will only display the data

B<2.> if action is 'send' the form wil process data and

2. B<a.> if there is an error - display form with data and error message

2. B<b.> if data processing is successful - send email and display ending screen

=item

B<send_TMP> [varchar] B<should be specified>: TMP for send module

=item

B<send_xsgn> [varchar] B<should be specified>: xsgn file of send module

=back

B<Sending information>:

=over

=item

B<from_service> [varchar]: name of service which calls this supermodule. Mainly it is Contact or Faq.

 <VAR id="from_service" value="Contact" />

B<Deprecated> alias for this parameter is B<service>.

=item

B<db_from_email>: Email address that will be stored in database as from_email

=item

B<email> [varchar] B<should be specified>: email addresses separated by semicolon

 <VAR id="email" value="name1@domain1.com;name2@domain2.com" />

=item

B<xt_EMAIL> [varchar]: email designs to be copied from main email design separated by semicolon

 <VAR id="xt_EMAIL" value="bcc;visitor" />

=item

B<allow_EMAIL_DESIGN> [1/0]: determines whether DESIGN can be used as email design

Example 1:

 <VAR id="allow_EMAIL_bcc" value="1" />

Example 2:

 <VAR id="allow_EMAIL_visitor" value="1" />

=item

B<send_DESIGN> [1/0]: determines whether DESIGN can be sent

Example 1:

 <VAR id="send_bcc" value="1" />

Example 2:

 <VAR id="send_visitor" value="1" />

=item

B<email_DESIGN> [varchar]: another email addresses to send email to.

To correct send email please check appropriate values of B<xt_EMAIL>, B<allow_EMAIL_DESIGN>, B<send_DESIGN>

Example 1:

 <VAR id="email_bcc" value="name1@domain1.com;name2@domain2.com" />

Example 2:

 <VAR id="email_visitor" value="name1@domain1.com;name2@domain2.com" />

=back

B<Data check>:

=over

=item

B<required> [varchar]: names of required fields separated by semicolon

 <VAR id="required" value="name;email;message" />

=item

B<required_all> [1/0]: if value is 1, all field in for must contain a value

=item

B<required_choiceX> [varchar]: at least one of names separated by semicolon should be filled

 <VAR id="required_choice1" value="tel;email" />
 <VAR id="required_choice2" value="country;city" />

=back

B<Form>:

=over

=item

B<_a130_form_FIELD> [everything]: default value for FIELD in form

Example 1: This example fills @ into field email in form

 <VAR id="_a130_form_email" value="@" />

Example 2: Default checks checkbox

 <VAR id="_a130_form_send_visitor_checked" value="checked" />

=back

B<Image security>:

=over

=item

B<xt_picture_security> [1/0]: turn on/off generating of image

=item

B<xt_picture_numchars> [int]: number of letters of the hash displayed in image

=item

B<xt_picture_width> [int]: width in pixels

=item

B<xt_picture_height> [int]: height in pixels

=item

B<xt_picture_fontcolor> [varchar]: rgb format like in css

=item

B<xt_picture_bgcolor> [varchar]: rgb format like in css

=item

B<xt_picture_noisecolor1> [varchar]: rgb format like in css

=item

B<xt_picture_noisecolor1> [varchar]: rgb format like in css

=back

=head1 INPUT EXAMPLES

B<Call from type>:

This contact form is secured by images. It sends emails to our client and also to us.

 <MODULE>
  <VAR id="-type" value="smdl" />
  <VAR id="-global" value="1" />
  <VAR id="-category" value="130" />
  <VAR id="-name" value="send" />

   <VAR id="send_TMP" value="CONTENT-C" />
   <VAR id="send_xsgn" value="kontakt" />

   <VAR id="from_service" value="Kontakt" />
   <VAR id="required" value="name;email" />
   <VAR id="email" value="example@example.tld" />

   <VAR id="xt_EMAIL" value="bcc" />
   <VAR id="allow_EMAIL_bcc" value="1" />
   <VAR id="send_bcc" value="1" />
   <VAR id="email_bcc" value="boss@example.tld" />

   <#VAR id="_a130_form_email" value="@" />

   <VAR id="xt_picture_security" value="1" />
   <VAR id="xt_picture_bgcolor" value="#FCEDC9" />
   <VAR id="xt_picture_fontcolor" value="#cc0000" />
   <VAR id="xt_picture_noise1color" value="#cccc00" />
   <VAR id="xt_picture_noise2color" value="black" />
 </MODULE>

=head1 XSGN of module

B<Main>:

=over

=item

B<&lt;#TMP#&gt;>: top level xsgn

=item

B<&lt;#INCORRECT_DATA#&gt;>

=item

B<&lt;%field%&gt;> [prefix: ft_ - text field]

 <input type="text" name="ft_email" value="<%email%>" />

=item

B<&lt;%field_selected%&gt;> [prefix: fs_ - select field]

 <select name="fs_lang">
  <option value="">-- choose one --</>
  <option value="sk" <%lang_sk_selected%>>slovak</>
  <option value="en" <%lang_en_selected%>>english</>
  <option value="de" <%lang_de_selected%>>german</>
 </select>

=item

B<&lt;%field_checked%&gt;> [prefix: fr_ - radio button, fch - checkbox]

Example 1: radio button

 <input type="radio" id="lang_sk" name="fr_lang" value="sk" <%lang_sk_checked%> /><label for="lang_sk">slovak</label>
 <input type="radio" id="lang_en" name="fr_lang" value="en" <%lang_en_checked%> /><label for="lang_en">english</label>
 <input type="radio" id="lang_de" name="fr_lang" value="de" <%lang_de_checked%> /><label for="lang_de">german</label>

Example 2: checkbox 1

 <input type="checkbox" id="lang_sk" name="fch_lang[]" value="sk" <%lang_sk_checked%> /><label for="lang_sk">slovak</label>
 <input type="checkbox" id="lang_en" name="fch_lang[]" value="en" <%lang_en_checked%> /><label for="lang_en">english</label>
 <input type="checkbox" id="lang_de" name="fch_lang[]" value="de" <%lang_de_checked%> /><label for="lang_de">german</label>

Example 3: checkbox 2

 <input type="checkbox" id="lang_sk" name="fch_lang_sk" value="slovak" <%lang_sk_checked%> /><label for="lang_sk">slovak</label>
 <input type="checkbox" id="lang_en" name="fch_lang_en" value="english" <%lang_en_checked%> /><label for="lang_en">english</label>
 <input type="checkbox" id="lang_de" name="fch_lang_de" value="german" <%lang_de_checked%> /><label for="lang_de">german</label>

If selected languages from checkbox will be slovak and german,
B<&lt;%lang%&gt;> in

=over

=item

Example 2 will be "sk, de"

=item

Example 3 will be "slovak, german"

=back

=back

B<Form successfuly sent>:

=over

=item

B<&lt;#SENT#&gt;>: top level xsgn

=item

B<&lt;#EMAIL#&gt;>: email design

=item

B<&lt;%field%&gt;>: value of this field in form

 Name of person: <%name%>

Gateway B<&lt;%name%&gt;> can contain more values in this case

 Name: <input type="text" name="ft_name_firstname" value="<%name_firstname%>" />
 Surname: <input type="text" name="ft_name_surname" value="<%name_surname%>" />

=back

=head1 XSGN EXAMPLES

B<TMP>: [B<security image>]

 <DEFINITION id="TMP">
 <div class="form">
  <h2>Contact form</h2>
  <form action="...&fi_security_hash=<%security-value%>" method="post" enctype="multipart/form-data" class="form-faq">
   ...
   <div><label for="security_hash">Security hash:</label><input type="text" id="security_hash" name="ft_security_hash" value="" /></div>
   <div><label>Security image:</label><img src="<%security-fullpath%>" border="0" /></div>
   ...
  </form>
 </div>
 </DEFINITION>

B<Note> that in form link should be correct security hash named B<fi_security_hash>.

B<SENT>:

 <DEFINITION id="SENT">
 <h1>Contact</h1>
 <div class="form-sent">
  <h2>Contact form</h2>
  <p>Formular was successfully send.<br /><a href="\?\|\?type=kontakt&IDcat=090A01">OK</a></p>
 </div>
 </DEFINITION>

B<EMAIL>:

 <DEFINITION id="EMAIL">
 From: <%email%>
 To: <%to%>
 Date: <%date%>
 Subject: www.example.tld Contact form
 Content-Type: <%ct%>

 This email was automaticaly generated on form from na example.tld

 Name: <%name%>
 E-mail: <%email%>
 Message: <%message%>
 </DEFINITION>

=cut

sub execute
{
	my %env=@_;
	my %env_module;

	# NASTAVENIA
	# spracovanie formularu
	# priznak odoslania formularu
	$env_module{action} = $main::FORM{action} if exists $main::FORM{action};
	# povinne polozky
	my @required = split ";", $env{required} if $env{required};
	# povinne volitelne
	my @required_choice;
	foreach (grep { $_ =~ /^required_choice/ } %env)
	{
		push @required_choice, split (";", $env{$_});
	}

	# spracovanie informacie, ci sa ma mail poslat aj uzivatelovi
	$env_module{send_visitor} = $main::FORM{fch_send_visitor} if $main::FORM{fch_send_visitor};

	# spracovanie premennych
	my %formvars; # sem si ukladam spracovane premenne
	foreach (sort keys %main::FORM)
	{
		next unless $_ =~ /^(ft|fs|fch|fr)/; # spracujem len premenne s tymito prefixami

		# parsovanie nazvu premennej
		my $fullname = $_;
		$_ =~ s|^([^_]+)_||; my $prefix = $1; # prefix
		$_ =~ s|^([^_]+)||; my $varname = $1; # vyparsujem nazov premennej
		my $postfix = $_; # zostane mi postfix, ak je neprazdny, doplnim ho o "_"

		# hodnota
		my $varvalue = $main::FORM{$fullname};

		# takto spracujem vsetky premenne (aj checkbox, radio ...)
		$formvars{$varname.$postfix} = $varvalue;

		# Doplnenie o specificke zalezitosti - checkbox, premenne s postfixami ... su dalej

		# s postfixami
		if (length($postfix))
		{
			$formvars{$varname} .= ", " if $formvars{$varname} && $varvalue;
			$formvars{$varname} .= $varvalue;
		}

		# checkboxy (checked informacia)
		# tieto hodnoty este menim v module na XSGN{CHECKED}
		# teraz tam ale vlozim defaultnu hodnotu
		$formvars{$varname.$postfix."_checked"} = "checked" if $prefix eq "fch";

		# radiobuttony (checked informacia)
		# tieto hodnoty este menim v module na XSGN{CHECKED}
		# teraz tam ale vlozim defaultnu hodnotu
		$formvars{$varname.$postfix."_$varvalue"."_checked"} = "checked" if $prefix eq "fr";

		# selecty vratane multiselectov
		if ($prefix eq "fch")
		{
			# obycajny select
			# tieto hodnoty este menim v module na XSGN{SELECTED}
			# teraz tam ale vlozim defaultnu hodnotu
			$formvars{$varname.$postfix."_$varvalue"."_checked"} = "checked" unless (ref($varvalue));

			# multiselect
			if (ref($varvalue) eq "ARRAY")
			{
				my $null; # tu si zozbieram jeho hodnoty
				foreach (@{$varvalue})
				{
					# tieto hodnoty este menim v module na XSGN{SELECTED}
					# teraz tam ale vlozim defaultnu hodnotu
					$formvars{$varname.$postfix."_$_"."_checked"} = "checked";
					$null .= ", " if $null; $null .= $_;
				}
				$formvars{$varname.$postfix} = $null; # namiesto nepekneho "ARRAY(0x...)" sa tu bude nachadzat zoznam hodnot
			}
		}

		# selecty vratane multiselectov
		if ($prefix eq "fs")
		{
			# obycajny select
			# tieto hodnoty este menim v module na XSGN{SELECTED}
			# teraz tam ale vlozim defaultnu hodnotu
			$formvars{$varname.$postfix."_$varvalue"."_selected"} = "selected" unless (ref($varvalue));

			# multiselect
			if (ref($varvalue) eq "ARRAY")
			{
				my $null; # tu si zozbieram jeho hodnoty
				foreach (@{$varvalue})
				{
					# tieto hodnoty este menim v module na XSGN{SELECTED}
					# teraz tam ale vlozim defaultnu hodnotu
					$formvars{$varname.$postfix."_$_"."_selected"} = "selected"; 
					$null .= ", " if $null; $null .= $_;
				}
				$formvars{$varname.$postfix} = $null; # namiesto nepekneho "ARRAY(0x...)" sa tu bude nachadzat zoznam hodnot
			}
		}
	}

	# listing formvars premennych
	foreach (sort keys %formvars) { main::_log("formvars -> $_: $formvars{$_}"); }

	# Kontrola premennych
	my $ok = 1;

	my %mark;
#=head1
	if ($env{required_all})
	{
		foreach (keys %main::FORM)
		{
			next unless $_ =~ /^f(t|r|s|ch|f)_/;
			if ( !$main::FORM{$_} )
			{
				$mark{$_} = 1;
				$ok = 0
			}
		}
	}
#=cut


	# povinne
	if (@required)
	{
		foreach (@required)
		{
			unless ($formvars{$_} || $main::FORM{$_}) { $mark{$_} = 1; $ok = 0; };
			# kontrola tvaru emailu
			if
			(
				$_ eq "email" &&
				not Secure::form::check_email( $formvars{email} )
			)
			{
				$mark{$_} = 1;
				$ok = 0;
			}

		}
	}

	# povinne volitelne
	if ($ok && @required_choice)
	{
		$ok = 0;
		foreach (@required_choice)
		{
			# ak mam len jeden required_choice
			unless (ref($_))
			{
				# akonahle najdem jedno spravne vyplnene pole, nic ma nezaujima a koncim
				if ($formvars{$_} || $main::FORM{$_}) { $ok = 1; last; }
			}

			# ak mam viac required_choicov
			# napr: required_choice1 = "meno;priezvisko"
			#       required_choice2 = "email;fax;telefon"
			if (ref($_) eq "ARRAY")
			{
				# teraz som v x-tom choice, prejdem si polia tohto choicu
				# v kazdom zacinam hladat nanovo, preto nastavujem $ok na 0
				$ok = 0;
				my @null = $_;
				foreach my $choice_value (@null)
				{
					# ak najdem vyplnene pole, koncim s tymto choicom
					if ($formvars{$choice_value} || $main::FORM{$choice_value}) { $ok = 1; last; }
				}

				# ak som v tomto choici nenasiel ani jedno dobre pole, koncim, lebo v KAZDOM
				# choici musi byt aspon jedno pole vyplnene
				last unless $ok;
			}
		}
	}

	if
	(
		$env{xt_picture_security} &&
		(
			!$main::FORM{fi_security_hash} ||
			!$main::FORM{ft_security_hash} ||
			$main::FORM{fi_security_hash} ne $main::FORM{ft_security_hash}
		)
	)
	{
		main::_log("Kontrola security hash - nespravny kod");
		$mark{'security_hash'} = 1;
		$ok = 0;
	}

	# Oznacim nevyplnene polozky
	foreach my $field ( keys %mark )
	{
		main::_log( 'Mark: '.$field );
		$formvars{'_a130_mark_'.$field} = 1;
	}

	# spracovanie priloh
	my @file = grep { $_ =~ /^ff_/ && $main::FORM{$_} } (keys %main::FORM);
	$env_module{_a130_attachmentcount} = scalar @file; # pocet priloh
	main::_log("Spracuvam prilohy") if $env_module{_a130_attachmentcount};
	
	foreach my $subor (@file)
	{
		$main::FORM{multipart} =~ /name="$subor"; filename="(.*?)".*?Content-Type: ([^\s]+)/s;

		# ak je priloha vacsia, ako je povolene, nespracujem ju a vyhodim
		if ($env{attachment_max_length} && length($main::FORM{$subor})>$env{attachment_max_length})
		{
			main::_log("X Priloha $subor ($1, ".length($main::FORM{$subor})."/$env{attachment_max_length}) je vacsia ako povolena velkost");
			next;
		}

		main::_log("- Priloha $subor ($1, ".length($main::FORM{$subor})."/$env{attachment_max_length}) je ok");

		$env_module{"_a130_attach_${subor}_filename"} = $1;
		$env_module{"_a130_attach_${subor}_ct"} = $2;
		$env_module{"_a130_attach_${subor}_content"} = $main::FORM{$subor};
	}

	# poslem si do modulu informaciu, ci formular zbehol
	$env_module{form_ok} = $ok;

	# ocistim env_module od nepotrebnych premennych (zacinajucich na pomlcku)
	main::_log("Modulu posuvam premenne");
	foreach (keys %env)
	{
		my $kluc = $_; my $value = $env{$_};
		next if $kluc =~ /^(-|required|send_TMP|send_xsgn)/;
		next if $kluc =~ /^_a130_form_/ && $env_module{action};
		$kluc =~ s|^_a130_formforce_|_a130_form_|;
		main::_log("$kluc");
		$env_module{$kluc} = $value;
	}

	#foreach (keys %env_module) { main::_log("env_module -> $_: $env_module{$_}"); }

	# convert formvarsov do $env_module{_a130_form_} formatu
	foreach (keys %formvars)
	{
		my $pref = "_a130_form_"; $pref = '' if $_ =~ /_a130_mark_/;
		$env_module{"$pref$_"} = $formvars{$_};
	}

	$env{send_global}=1 unless (exists $env{send_global});
	Tomahawk::module(
		-type => "mdl",
		-category => "130",
		-name => "send",
		-global => $env{send_global},
		
		-xsgn => $env{send_xsgn},
		-TMP => $env{send_TMP},
		-xlng_xsgn => $env{send_xlng_xsgn},
		xt_xlng => $env{send_xt_xlng},
		xt_design => $env{send_xt_design},

		%env_module
	);


	return 1;
}

=head1 SEE ALSO

L<130-send.0.mdl|source-doc/"_mdl/130/130-send.0.mdl">

=cut

our $authors = 'matej.gregor@comsultia.com';

=head1 AUTHOR

Matej Gregor (matej.gregor@comsultia.com)

=cut

1;
