#!/bin/perl
# USE UTF-8 !!!
package CRON::module;
use strict;

use TOM::Utils::vars;
use Mail::Mailer qw(sendmail);
use Net::SMTP;

sub execute
{
	my %env=@_;
	
	while (my $file=<$TOM::P/_temp/_email-*>)
	{
		main::_log("found $file");
		open(HND_EMAIL,"<".$file);
		
		my $old=$main::time_current-(stat($file))[9];
		if ($old>86400)
		{
			main::_log("delete too old email '$old'secs");
			unlink $file;
			next;
		}
		
		my $from=<HND_EMAIL>;chomp($from);
		my $to=<HND_EMAIL>;chomp($to);
		$to=TOM::Utils::vars::unique_split($to);
		my $body;
		while (my $line=<HND_EMAIL>){$body.=$line};
		main::_log("from:$from to:$to");
		
		if (!$TOM::smtp_host)
		{
			main::_log("sending using mailer");
			$body=~/Subject: (.*?)\n/;
			my $subject=$1;
			main::_log("subject = $subject");
			my $mailer = new Mail::Mailer 'sendmail';
			$mailer->open({'From' => $from,'To' => $to,'Subject' => $subject,});
			print $mailer $body;
			$mailer->close();
			
			unlink $file || main::_log("can't unlink $!",1);
			
			next;
		}
		
		
		my $smtp;
		
		if ($TOM::smtp_SSL)
		{
			require Net::SMTP::SSL;
			$smtp = new Net::SMTP::SSL
			(
				$TOM::smtp_host,
				'Port' => 465,
			);
			if (not $smtp->auth($TOM::smtp_user,$TOM::smtp_pass))
			{
				main::_log("SSL Authentification not works",1);
				return 1;
			}
		}
		else
		{
			$smtp = Net::SMTP->new($TOM::smtp_host);
			if ($TOM::smtp_user)
			{
				main::_log("authentification with user '$TOM::smtp_user'");
				if (not $smtp->auth($TOM::smtp_user,$TOM::smtp_pass))
				{
					main::_log("Authentification not works (SSL or TLS?)",1);
					return 1;
				}
			}
		}
		
		my @rcpt=split(';',$to);
		
		if (not $smtp->mail($from))
		{
			main::_log("can't send, not accepted sender ".$smtp->status,1);
			next;
		}
		
		if (not $smtp->recipient(@rcpt))
		{
			main::_log("can't send, not accepted RCPT: @rcpt ".$smtp->status,1);
			next;
		}
		
		if (not $smtp->data())
		{
			main::_log("can't accept DATA",1);
			next;
		}
		
		if (not $smtp->datasend($body))
		{
			main::_log("can't accept DATASEND",1);
			next;
		}
		
		if (not $smtp->dataend())
		{
			main::_log("can't accept DATAEND",1);
			next;
		}
		
		main::_log("sended");
		
		$smtp->quit;
		
		unlink $file || main::_log("can't unlink $!",1);
		
		next;
		
	
		$smtp->dataend();
		
		$smtp->quit;
			
	}

return 1;}

1;
