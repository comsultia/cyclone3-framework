#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8;
use strict;


use App::210::_init;
use App::301::_init;


sub execute
{
	my %env=@_;
	my %env_out;
	
	my @sql_bind;
	my $sql_where;
	my $sql_changetime;
	#my $sql_limit=1;
	my $sql_order_by=$env{'sql_order_by'} || 'user_profile.surname ASC, user_profile.firstname DESC';
	my $sql_group_by;
	
	$sql_where.=" AND user.hostname=?";
	push @sql_bind, $tom::H_cookie;
	
	if ($env{'unique'})
	{
		$sql_group_by="user.ID_user";
	}
	
	if ($env{'contact_cat.ID_entity'})
	{
		my $sql_cat;
		foreach my $ID_category (split(';',$env{'contact_cat.ID_entity'}))
		{
			next unless $ID_category;
			if ($ID_category=~s/\*$//)
			{
				my $cat_sql=qq{SELECT ID_charindex FROM $App::301::db_name.a301_contact_cat WHERE ID_entity=$ID_category AND status IN ('Y','L') LIMIT 1};
				$ID_category=qq{SELECT ID_entity FROM $App::301::db_name.a301_contact_cat WHERE ID_charindex LIKE CONCAT(($cat_sql),"%") AND status IN ('Y','L')};
			}
			$sql_cat.=" OR contact_rel_cat.ID_category IN ($ID_category)";
			$sql_cat=~s/^ OR //;
		}
		if ($sql_cat)
		{
			$sql_where.=" AND (".$sql_cat.") ";
		}
	}
	
   if ($env{'user.ID_user'})
	{
		$sql_where.=" AND user.ID_user IN ('".join('\',\'',split(';',$env{'user.ID_user'}))."')";
	}
	main::_log('-------------------------'.$env{'user.ID_user'});

	$sql_where.=" AND ".$env{'sql_where'} if $env{'sql_where'};
	
	$sql_where=~s|^ ||;
	
	# get template
	Tomahawk::GetTpl('env' => \%env) || return undef;
	
	my $i;
	my %sth0=TOM::Database::SQL::execute(qq{
		SELECT
			user.hostname,
			
			contact_cat.ID_entity AS cat_ID_entity,
			contact_cat.name AS cat_name,
			
			user.ID_user,
			user.login,
			user.pass,
			user.email,
			user.status,
			user.datetime_register,
			user.datetime_last_login,
			
			user_profile.firstname,
			user_profile.surname,
			user_profile.gender,
			user_profile.country_code,
			user_profile.date_birth,
			user_profile.city,
			user_profile.ZIP,
			user_profile.street,
			user_profile.street_num,
			user_profile.address_postal,
			user_profile.about_me,
			user_profile.note,
			user_profile.metadata,
			
			contact_lng.name_long,
			contact_lng.description
			
		FROM
			$App::301::db_name.a301_user AS user
		INNER JOIN $App::301::db_name.a301_user_profile AS user_profile ON
		(
			user_profile.ID_entity = user.ID_user
		)
		LEFT JOIN $App::301::db_name.a301_contact_rel_cat AS contact_rel_cat ON
		(
			user.ID_user = contact_rel_cat.ID_user
		)
		LEFT JOIN $App::301::db_name.a301_contact_cat AS contact_cat ON
		(
			contact_cat.ID = contact_rel_cat.ID_category AND
			contact_cat.status IN ('Y','L')
		)
		LEFT JOIN $App::301::db_name.a301_contact_lng AS contact_lng ON
		(
			contact_lng.ID_entity = user.ID_user AND
			contact_lng.lng = '$env{'lng'}'
		)
		WHERE
			user.status IN ('Y','L')
			$sql_where}.do{if($sql_group_by){qq{
		GROUP BY
			$sql_group_by}}}.qq{
		ORDER BY
			$sql_order_by
		LIMIT
			1
	},'bind'=>[@sql_bind],'log'=>1,'-slave'=>1,
		'-changetime'=>App::020::SQL::functions::_get_changetime(
			{
				'db_h'=>"main",
				'db_name' => $App::301::db_name,
				'tb_name' => "a301_user"
			}),
	);
	
	my %user=$sth0{'sth'}->fetchhash();
	
	return 1 unless $user{'ID_user'};
	
	main::_log("found user.ID_user=$user{'ID_user'}");
	
	$user{'related_avatar'}=(App::160::SQL::get_relations(
		'db_name' => $App::301::db_name,
		'l_prefix' => 'a301',
		'l_table' => 'user',
		'l_ID_entity' => $user{'ID_user'},
		'r_prefix' => "a501",
		'r_table' => "image",
		'rel_type' => "avatar",
		'status' => "Y"
	))[0];
	
	my @ACL=App::301::perm::get_ACL(
		'r_prefix' => 'a710',
		'r_table' => 'org',
		'r_ID_entity' => '1'
	);
	
	foreach my $acl_item (@ACL)
	{
		$user{'roles'}=$acl_item->{'roles'};
	}
	
	use App::020::mimetypes::html;
	my $parser=new App::020::mimetypes::html(
		'tpl_ext' => $TPL # extend
	);
	
	# parser body
	$parser->parse($user{'description'});
	$parser->eof();
	$user{'description_parser'}={
		'output' => $parser->{'output'},
		'addon' => $parser->{'addon'},
		'entity' => $parser->{'entity'},
		'thumbnail' => $parser->{'thumbnail'},
	};
	push @{$env_out{'entity'}},@{$parser->{'entity'}} if $parser->{'entity'}; # depend on this too
	
	$TPL->{'variables'}{'contact'}=\%user;
	
	push @{$env_out{'call'}{'H'}{'add_DOC_title'}},$user{'firstname'}.' '.$user{'surname'};
	
	return 1,%env_out;
}

1;