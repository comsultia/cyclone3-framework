#!/bin/perl
package CRON::module;
use open ':utf8', ':std';
use Encode;
use encoding 'utf8';
use utf8;
use strict; # scrict code


use TOM::Utils::datetime;
use TOM::Net::email;
use MIME::Entity;
use App::100::_init;

sub execute
{
	my %env=@_;
	
	# check sql errors
	my $tpl=new TOM::Template(
		'level' => "auto",
		'name' => "email",
		'content-type' => "xhtml"
	);
	# DESIGN
	$tpl->{'entity'}{'email.xhtml'}=~s|<%main-title%>|SQL errors|g;
	$tpl->{'entity'}{'email.xhtml'}=~s|<%main-desc%>|This notification ...|g;
	
	# vykreslim hlavicku
	$tpl->{'entity'}{'email.table'} =~ s|<%title%>|Table of new SQL errors|g;
	$tpl->{'entity'}{'email.table'} =~ s|<%main-term%>||g;
	$tpl->{'entity'}{'email.table'} =~ s|<%colscount%>|1|g;
	
	my $i;
	if (opendir (DIR, $TOM::P."/_logs/_debug"))
	{
		foreach my $file(sort readdir DIR)
		{
#			main::_log("file=$file");next;
			next if -d $TOM::P."/_logs/_debug/".$file;
			next unless $file=~/sql\.err\.event$/;
			
			local $/;
			open(HND,'<'.$TOM::P."/_logs/_debug/".$file);
			my $data=<HND>;
			$data=~s|\n|<br/>|gms;
			$data=~s|\t|     |gms;
			$data=~s| |&nbsp;|gms;
			
			$i++;
			
			my $line = $tpl->{'entity'}{'email.table.line'};
			my $col = $tpl->{'entity'}{'email.table.col.value'};
				$col =~ s|<%value%>|$data|g;
				$line =~ s|<#email.table.col.value#>|$col|g;
			$tpl->{'entity'}{'email.table'} =~ s|<#email.table.line#>|$line|g;
			
			last if $i == 5;
			
			unlink $TOM::P."/_logs/_debug/".$file;
			
		}
	}
	
	if ($i)
	{
		# nalejem do HTML
		$tpl->{'entity'}{'email.xhtml'} =~ s|<#email.content#>|$tpl->{'entity'}{'email.table'}|;
		
		# cleaning
		$tpl->{'entity'}{'email.xhtml'} =~ s|<#.*?#>||gs;
		$tpl->{'entity'}{'email.xhtml'} =~ s|<%.*?%>||gs;
		
		#----------------------------------------------------------------
		# Completing mail
		my $db_email = TOM::Utils::vars::unique_split($TOM::contact{'TOM_farm'});#$db_email='roman.fordinal@comsultia.com';
		my $date = TOM::Utils::datetime::mail_current();
		
		my $ent = MIME::Entity->build
		(
			 'Type'    => 'multipart/related',
			 'From'    => '"Cyclone3 ('.$TOM::hostname.')" <'.$TOM::contact{'from'}.'>',
			 'To'      => TOM::Net::email::convert_TO($db_email),
			 'Subject' => "Suspected SQL activity at $TOM::hostname",
			 'Date'    => $date,
		);
		
		$ent->attach
		(
			 'Data' => $tpl->{'entity'}{'email.xhtml'},
			 'Type' => "text/html;charset=\"UTF-8\"",
			 'Encoding' => "8bit",
		);
		
		$ent->attach
		(
			 'Path'       => $tpl->{'file'}{'cyclone3-150x44.png'}{'dst'},
			 'Type'       => "image/gif",
			 'Content-ID' => "<logo\@cyclone3.org>",
			 'Encoding'   => "base64"
		);
		
		TOM::Net::email::send
		(
			 'to' => $db_email,
			 'body' => $ent->as_string()
		);
		
	}
	
#	return 1;
	
	# check new users creating
	my %sth0=TOM::Database::SQL::execute(qq{
		SELECT IP, COUNT(*) AS cnt, user_agent
		FROM
			`TOM`.`a301_user_online` 
		GROUP BY
			IP, user_agent
		HAVING
			cnt>=30
		ORDER BY
			cnt DESC 
		LIMIT
			0,5
	});
	if ($sth0{'rows'})
	{
		use TOM::Utils::datetime;
		use MIME::Entity;
		my $date = TOM::Utils::datetime::mail_current();
		my $tpl=new TOM::Template(
			'level' => "auto",
			'name' => "email",
			'content-type' => "text"
		);
		my $email_body=$tpl->{'entity'}{'email.plain'};
		$email_body=~s|<%main-title%>|Suspected activity at $TOM::hostname|g;
		$email_body=~s|<%main-desc%>|List of IP adresses with higher activity - new registered users|g;
		my $email_content;
		while (my %db0_line=$sth0{'sth'}->fetchhash())
		{
			$email_content.="IP: $db0_line{'IP'} new users: $db0_line{'cnt'} useragent: $db0_line{'user_agent'}\n";
		}
		$email_body=~s|<#email.content#>|$email_content|g;
		$email_body=~s|<#.*?#>||g;
		$email_body=~s|<%.*?%>||g;
		my $msg = MIME::Entity->build
		(
#			'Type'    => "multipart/related",
			'List-Id' => "Cyclone3",
			'Date'    => $date,
			'From'    => "Cyclone3 ('$TOM::hostname') <$TOM::contact{'from'}>",
			'To'      => TOM::Net::email::convert_TO($TOM::contact{'TOM_farm'}),
			'Subject' => "Suspected activity at $TOM::hostname",
			
			'Type' => "text/plain;charset=\"UTF-8\"",
			'Encoding' => "8bit",
			'Data' => $email_body
		);
		TOM::Net::email::send
		(
			to => $TOM::contact{'TOM_farm'},
			body => $msg->as_string()
		);
	}
	
return 1}

1;
