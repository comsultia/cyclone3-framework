#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use encoding 'utf8';
use utf8;
use strict;



=head1 NAME

8021-message_list.lite.mdl

=head1 DESCRIPTION

Lite list of messages

=head1 DEPENDS

=over

=item *

L<App::8021::_init|app/"8021/_init.pm">

=back

=cut

use App::8021::_init;



=head1 INPUTS

=over

=item *

B<db_name> - database name

=item *

B<sql_limit> - limit to display (default '1')

=item *

B<message.status> - required status, nonseparated values (default 'Y')

=item *

B<message.lng> - required language (default is current)

=back

=cut



=head1 XSGN

=over

=item *

B<TMP> - default

=item *

B<#item#> - gateway to message item

=item *

B<item> - message item

=item *

B<%db_*%> - message database values

B<%db_name%>, B<%db_body%>,...

=back

=cut



sub execute
{
	my %env=@_;
	Tomahawk::GetXSGN('-convertvars'=>1) || return undef;
	
	if($main::USRM{'logged'} ne 'Y'){
		$XSGN{'TMP'}=$XSGN{'TMP_unlogged'};
		return 1;
	}
	
	$env{'db_name'}=$App::8021::db_name unless $env{'db_name'};
	
	$env{'message.lng'}=$env{'lng'} unless $env{'message.lng'};
	$env{'sql_limit'}='10' unless $env{'sql_limit'};
	
	$env{'message.status'}='Y' unless $env{'message.status'};
		my $status_sql=join "','", split('',$env{'message.status'});
	
	if ($env{'sql_limit'}=~/^,/){$env{'sql_limit'}="0".$env{'sql_limit'};}
	if ($env{'sql_limit'}=~/^0,/ && $env{'sql_limit_start'})
	{
		$env{'sql_limit'}=~s/^(\d+),/$1+$env{'sql_limit_start'}.","/e;
	}
	
	my $sql_where;
	
	if ($env{'sql_where'})
	{
		$sql_where.=" AND ".$env{'sql_where'};
	}
	
	my $sql=qq{
		SELECT
			*
		FROM
			`$env{'db_name'}`.a8021_message AS message
		WHERE
			message.status IN ('$status_sql') AND
			message.lng='$env{'message.lng'}'
			$sql_where
		ORDER BY
			message.datetime_sent DESC
		LIMIT $env{'sql_limit'}
	};
	my %sth0=TOM::Database::SQL::execute($sql,'log'=>1);
	
	# Line counter
	my $item_counter=0;
	
	while (my %db0_line=$sth0{'sth'}->fetchhash())
	{
		my $item=$XSGN{'item'};
		
		if(!$db0_line{'datetime_read'}){
			$item=$XSGN{'item_unread'};
		}
		else
		{
			my $sql1=qq{
				SELECT
					*
				FROM
					`$env{'db_name'}`.a8021_message AS message
				WHERE
					message.status IN ('$status_sql') AND
					message.lng='$env{'message.lng'}' AND
					ID_reply='$db0_line{'ID_entity'}'
				LIMIT 1
			};
			my %sth1=TOM::Database::SQL::execute($sql1,'log'=>1);
			if(my %db1_line=$sth1{'sth'}->fetchhash())
			{
				$item=$XSGN{'item_replied'};
			}
		}
		
		$item_counter++;
		
		# fill raw data into $XSGN{'item'}
		$item=~s|<%db_(.*?)%>|$db0_line{$1}|g;
		
		my %recipient=App::301::authors::get_author($db0_line{'posix_recipient'});
		foreach(keys %recipient)
		{
			$item=~s|<%recipient_$_%>|$recipient{$_}|g;
		}
		
		my %owner=App::301::authors::get_author($db0_line{'posix_owner'});
		foreach(keys %owner)
		{
			$item=~s|<%owner_$_%>|$owner{$_}|g;
		}
		
		$item=~s|<%item_number%>|$item_counter|;
		
		$item=~s|<%name%>|$db0_line{'name'}|;
		
		$XSGN{'TMP'}=~s|<#item#>|$item|;
	}
	
	
	
	if ($env{'sql_limit'}=~/(\d+),(\d+)/)
	{
		$env{'offset'}=$1;
		$env{'count'}=$2;
	}
	else
	{
		$env{'count'}=$env{'sql_limit'};
	}
	
	
	# offset
	if ($env{'count'} && $item_counter >= $env{'count'}) # count
	{
		$XSGN{'next'}=~s|<%offset%>|$env{'offset'}+$env{'count'}|ge;
		$XSGN{'TMP'}=~s|<#next#>|$XSGN{'next'}|g;
	}
	if ($env{'offset'}-$env{'sql_limit_start'})
	{
		if ($env{'offset'}-$env{'count'}-$env{'sql_limit_start'}>0)
		{
			$XSGN{'previous'}=~s|<%offset%>|$env{'offset'}-$env{'count'}|ge;
		}
		else
		{
			$XSGN{'previous'}=~s|<%offset%>||ge;
		}
		$XSGN{'TMP'}=~s|<#previous#>|$XSGN{'previous'}|g;
	}
	
	
	if(!$item_counter)
	{
		if($XSGN{'TMP_failure_no-data'})
		{
			$XSGN{'TMP'} = $XSGN{'TMP_failure_no-data'};
		}
	}
	
	
	return 1;
}


our $authors="open\@comsultia.com";

=head1 AUTHORS

Comsultia, Ltd. (open@comsultia.com)

=cut

1;
