#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use encoding 'utf8';
use utf8;
use strict;



=head1 NAME

401-article_list.lite.mdl

=head1 DESCRIPTION

Lite list of articles

=head1 DEPENDS

=over

=item *

L<App::401::_init|app/"401/_init.pm">

=back

=cut

use App::401::_init;



=head1 INPUTS

=over

=item *

B<-xlng_load> - load template internationalization file

=item *

B<db_name> - database name

=item *

B<article_attrs.ID_category> - comma separated list of articles ID_category (can be set with * suffix to select all subcategories - 5;2*;3;7)

=item *

B<article_attrs.status> - required status, nonseparated values (default 'Y')

=item *

B<article_content.lng> - required language (default is current)

=item *

B<article_content.mimetype> - required content mimetype (default is 'text/html')

=item *

B<sql_limit> - limit to display (default '1')

=item *

B<sql_limit_start> - at start skip defined items

=item *

B<sql_order_by> - order by in SQL

=item *

B<sql_where> - where in SQL

=back

=cut



=head1 XSGN

=over

=item *

B<TMP> - default

=item *

B<#previous#> B<#next#> - to skip to another offset

=item *

B<previous> B<next> - include into <#previous#> <#next#>

=item *

B<%offset%> - offset value (calculated from sql_limit input param)

=item *

B<%sql_limit%> - SQL limit

=item *

B<%sql_limit_start%> - start SQL limit from value

=item *

B<#item#> - gateway to article item

=item *

B<item> - article item

=item *

B<item.1> - first article item

=item *

B<%db_*%> - article database items

B<%db_ID_category%>, B<%db_ID_category_name%>, B<%db_name%>, B<%db_name_url%>, B<%db_subtitle%>

=item *

B<%ID%> - article ID

=item *

B<%ID_entity%> - article ID_entity

=item *

B<%name%> - article name

=item *

B<%abstract%> - article abstract

=item *

B<%abstract_plain%> - article abstract as plaintext

=item *

B<%alias_url%> - alias_url

=item *

B<#video_mark#> - gateway to video mark

=item *

B<video_mark> - video mark

=item *

B<#gallery_mark#> - gateway to gallery mark

=item *

B<gallery_mark> - gallery mark

=item *

B<TMP_failure_no-data> - if defined, replaces TMP for empty database output

=back

=cut



sub execute
{
	my %env=@_;
	Tomahawk::GetXSGN('-convertvars'=>1) || return undef;
	
	if ($Tomahawk::mdl_C{'-xlng_load'})
	{
		main::_log("using xlng transformation");
		Tomahawk::GetXLNG() || return undef; # retrieve language xml
		Tomahawk::XLNGtoXSGN(); # implement XLNG into XSGN
	}
	
	$env{'db_name'}=$App::401::db_name unless $env{'db_name'};
	
	$env{'article_content.lng'}=$env{'lng'} unless $env{'article_content.lng'};
	$env{'sql_limit'}='1' unless $env{'sql_limit'};
	$env{'article_attrs.status'}='Y' unless $env{'article_attrs.status'};
		my $status_sql=join "','", split('',$env{'article_attrs.status'});
	
	$env{'article_content.mimetype'}='text/html' unless $env{'article_content.mimetype'};
	
	$env{'sql_order_by'}='article_attrs.datetime_start DESC' unless $env{'sql_order_by'};
	
	if (not $env{'sql_limit'}=~/,/){$env{'sql_limit'}="0,".$env{'sql_limit'}}
	if ($env{'sql_limit'}=~/^,/){$env{'sql_limit'}="0".$env{'sql_limit'};}
	if ($env{'sql_limit'}=~/^0,/ && $env{'sql_limit_start'})
	{
		$env{'sql_limit'}=~s/^(\d+),/$1+$env{'sql_limit_start'}.","/e;
	}
	
	my $count_max;#=$env{'sql_limit'};
	if ($env{'sql_limit'}=~/,(\d+)/)
	{
		$count_max=$1;
		$env{'sql_limit'}=~s/,(\d+)/",".($1+1)/e;
	}
	
	my $execution_success=1;
	
	my $sql_where;
	
	my $sql_cat;
	foreach my $ID_category(split(';',$env{'article_attrs.ID_category'}))
	{
		next unless $ID_category;
		if ($ID_category=~s/\*$//)
		{
			my $cat_sql=qq{
						SELECT
							ID_charindex
						FROM
							`$App::401::db_name`.a401_article_cat
						WHERE
							ID=$ID_category
						LIMIT 1
			};
			$ID_category=qq{
				SELECT
					ID
				FROM
					`$App::401::db_name`.a401_article_cat
				WHERE
					ID_charindex LIKE CONCAT(($cat_sql),"%") AND
					lng='$env{'article_content.lng'}' AND
					status IN ('$status_sql')
			};
		}
		$sql_cat.=" OR article_attrs.ID_category IN ($ID_category)";
		$sql_cat=~s/^ OR //;
	}
	if ($sql_cat)
	{
		$sql_where.=" AND (".$sql_cat.") ";
	}
	
	
	if ($env{'article.ID_entity'})
	{
		$sql_where.=" AND article.ID_entity IN ('".
			(join "','", split(';',$env{'article.ID_entity'})).
			"')";
	}
	
	if ($env{'sql_where'})
	{
		$sql_where.=" AND ".$env{'sql_where'};
	}
	
	my $sql=qq{
		SELECT
			*
		FROM
			`$env{'db_name'}`.a401_article_view AS article
		WHERE
			article.status IN ('$status_sql') AND
			article.lng='$env{'article_content.lng'}' AND
			article.datetime_start <= NOW() AND
			(article.datetime_stop IS NULL OR article.datetime_stop >= NOW()) AND
			article.mimetype='$env{'article_content.mimetype'}'
			$sql_where
		ORDER BY
			$env{'sql_order_by'}
		LIMIT $env{'sql_limit'}
	};
	
	my $sql=qq{
		SELECT
			
			article.ID_entity AS ID_entity_article,
			article.ID AS ID_article,
			article_attrs.ID AS ID_attrs,
			article_content.ID AS ID_content,
			
			article_attrs.ID_category,
			article_cat.name AS ID_category_name,
			article_cat.name_url AS ID_category_name_url,
			
			article_ent.posix_owner,
			article_ent.ID_author AS posix_author,
			article_content.ID_editor AS posix_editor,
			
			article_content.datetime_create,
			article_attrs.datetime_start,
			article_attrs.datetime_stop,
                        
			
			article_attrs.priority_A,
			article_attrs.priority_B,
			article_attrs.priority_C,
			
			article_attrs.name,
			article_attrs.name_url,
			article_content.subtitle,
			article_content.mimetype,
			article_content.abstract,
			article_content.body,
			article_content.keywords,
			article_content.lng,
			
                        IF(
                            round((`article_ent`.rating_score / `article_ent`.rating_votes),2),
                            round((`article_ent`.rating_score / `article_ent`.rating_votes),2), '0.00'
                        ) as rating,
                        
                        
			article_ent.visits,
			
			article_attrs.status,
			
			IF
			(
				(
					article.status LIKE 'Y' AND
					article_attrs.status LIKE 'Y' AND
					article_content.status LIKE 'Y'
				),
				'Y', 'U'
			) AS status_all
			
		FROM `$env{'db_name'}`.a401_article AS article
		LEFT JOIN `$env{'db_name'}`.a401_article_attrs AS article_attrs ON
		(
			article_attrs.ID_entity = article.ID
		)
		LEFT JOIN `$env{'db_name'}`.`a401_article_ent` AS article_ent ON
		(
			article_ent.ID_entity = article.ID_entity
		)
		LEFT JOIN `$env{'db_name'}`.`a401_article_content` AS article_content ON
		(
			article_content.ID_entity = article.ID_entity AND
			article_content.lng = article_attrs.lng
		)
		LEFT JOIN `$env{'db_name'}`.`a401_article_cat` AS article_cat ON
		(
			article_cat.ID = article_attrs.ID_category
		)

		WHERE
			article_attrs.status IN ('$status_sql') AND
			article_attrs.lng='$env{'article_content.lng'}' AND
			article_attrs.datetime_start <= NOW() AND
			(article_attrs.datetime_stop IS NULL OR article_attrs.datetime_stop >= NOW()) AND
			article_content.mimetype='$env{'article_content.mimetype'}'
			$sql_where
		
		ORDER BY
			$env{'sql_order_by'}
			
		LIMIT
			$env{'sql_limit'}
	};
	
	
	my %sth0=TOM::Database::SQL::execute($sql,'log'=>1,'-slave'=>1,'-cache_auto_'=>60);
	
	if(!$sth0{'sth'})
	{
		main::_log("SQL can't be executed",1);
	}
	
	if(!$sth0{'rows'})
	{
		main::_log("err: could not fetch articles");
	}
	
	main::_log("received ".$sth0{'rows'}." rows");
	
	# 'Cache' for author records
	my %tmp_authors;
	
	# Line counter
	my $item_counter=0;
	
   my %IDs_entity;
	while (my %db0_line=$sth0{'sth'}->fetchhash())
	{
      next if $IDs_entity{$db0_line{'ID_entity_article'}};
      $IDs_entity{$db0_line{'ID_entity_article'}}++;
      
      $item_counter++;
		
		last if $count_max<$item_counter;
		
		main::_log("article[$item_counter] article_attrs.name='$db0_line{'name'}'");
		
		my $item=
			$XSGN{'item.'.$item_counter}
			|| $XSGN{'item'};
		
		if ($XSGN{'item-empty'} && (!$db0_line{'abstract'} || $db0_line{'abstract'} eq "<p>&nbsp;&nbsp;</p>") && (!$db0_line{'body'} || $db0_line{'body'} eq "<p>&nbsp;&nbsp;</p>"))
		{
			$item=$XSGN{'item-empty'};
		}
		elsif ($XSGN{'item-emptybody'} && (!$db0_line{'body'} || $db0_line{'body'} eq "<p>&nbsp;&nbsp;</p>"))
		{
			$item=$XSGN{'item-emptybody'};
		}
		
      my %datetime=TOM::Utils::datetime::datetime_collapse($db0_line{'datetime_start'});
      $db0_line{'datetime_start.year'}=$datetime{'year'};
      $db0_line{'datetime_start.month'}=$datetime{'month'};
      $db0_line{'datetime_start.mday'}=$datetime{'mday'};
      $db0_line{'datetime_start.hour'}=$datetime{'hour'};
      $db0_line{'datetime_start.min'}=$datetime{'min'};
      $db0_line{'datetime_start.sec'}=$datetime{'sec'};
      
		# fill raw data into $XSGN{'item'}

		$item=~s|<%db_(.*?)%>|$db0_line{$1}|g;
		
		
		my %author=App::301::authors::get_author($db0_line{'posix_author'});
		$item=~s|<%author_(.*?)%>|$author{$1}|g;
		
		my %editor=App::301::authors::get_author($db0_line{'posix_editor'});
		$item=~s|<%editor_(.*?)%>|$editor{$1}|g;
		
		
		# process abstract
		my $p=new App::401::mimetypes::html;
		
		# img
		$p->{'ignore'}{'img'}=
			$env{'body.ignore.img'}
			|| $env{'ignore.img'}
			|| undef;
		
		$p->{'ignore'}{'img.1'}=
			$env{'abstract.ignore.img.1'}
			|| $env{'ignore.img.1'}
			|| undef;
		
		# a501_image
		$p->{'config'}->{'a501_image_file.ID_format'}=
			$env{'article.'.$item_counter.'.abstract.a501_image_file.ID_format'}
			|| $env{'article.'.$item_counter.'.a501_image_file.ID_format'}
			|| $env{'abstract.a501_image_file.ID_format'}
			|| $env{'a501_image_file.ID_format'}
			|| undef;
		$p->{'config'}->{'a501_image_file.ID_format.1'}=
			$env{'article.'.$item_counter.'.abstract.a501_image_file.ID_format.1'}
			|| $env{'article.'.$item_counter.'.a501_image_file.ID_format.1'}
			|| $env{'abstract.a501_image_file.ID_format.1'}
			|| $env{'a501_image_file.ID_format.1'}
			|| undef;
		$p->{'entity'}->{'a501_image'}=
			$XSGN{'abstract.a501_image'}
			|| $XSGN{'a501_image'}
			|| undef;
		$p->{'entity'}->{'a501_image.1'}=
			$XSGN{'abstract.a501_image.1'}
			|| $XSGN{'a501_image.1'}
			|| undef;
		
		# a510_video
		$p->{'entity'}{'a510_video_part'}=
			$XSGN{'abstract.a510_video_part'}
			|| $XSGN{'a510_video_part'}
			|| undef;
		
		$p->parse($db0_line{'abstract'});
		#$p->eof();
		my $abstract_html=$p->{'out'};
		$item=~s|<%abstract%>|$abstract_html|g;
		
		my $abstract_plain=TOM::Text::format::xml2plain($db0_line{'abstract'});
		$item=~s|<%abstract_plain%>|$abstract_plain|;
		
		
		# BODY
		if ($env{'article_content.body'})
		{
			
			# process abstract
			my $p=new App::401::mimetypes::html;
			
			# img
			$p->{'ignore'}{'img'}=
				$env{'body.ignore.img'}
				|| $env{'ignore.img'}
				|| undef;
			
			$p->{'ignore'}{'img.1'}=
				$env{'body.ignore.img.1'}
				|| $env{'ignore.img.1'}
				|| undef;
			
			# a501_image
			$p->{'config'}->{'a501_image_file.ID_format'}=
				$env{'article.'.$item_counter.'.abstract.a501_image_file.ID_format'}
				|| $env{'article.'.$item_counter.'.a501_image_file.ID_format'}
				|| $env{'abstract.a501_image_file.ID_format'}
				|| $env{'a501_image_file.ID_format'}
				|| undef;
			$p->{'config'}->{'a501_image_file.ID_format.1'}=
				$env{'article.'.$item_counter.'.abstract.a501_image_file.ID_format.1'}
				|| $env{'article.'.$item_counter.'.a501_image_file.ID_format.1'}
				|| $env{'abstract.a501_image_file.ID_format.1'}
				|| $env{'a501_image_file.ID_format.1'}
				|| undef;
			$p->{'entity'}->{'a501_image'}=
				$XSGN{'abstract.a501_image'}
				|| $XSGN{'a501_image'}
				|| undef;
			$p->{'entity'}->{'a501_image.1'}=
				$XSGN{'abstract.a501_image.1'}
				|| $XSGN{'a501_image.1'}
				|| undef;
			
			# a510_video
			$p->{'entity'}{'a510_video_part'}=
				$XSGN{'abstract.a510_video_part'}
				|| $XSGN{'a510_video_part'}
				|| undef;
			
			$p->parse($db0_line{'body'});
			
			$item=~s|<%out\.body\.(.*?)%>|$p->{'out_var'}->{$1}|g;
			$item=~s|<#out\.body\.(.*?)#>|$p->{'out_tag'}->{$1}|g;
			
			my $body_html=$p->{'out'};
			$item=~s|<%body%>|$body_html|;
			
			if ($p->{'count'}->{'video'})
			{
            $item=~s|<#video_mark#>|$XSGN{'video_mark'}|g;
			}
			
		}
		
		
		# find alternate attributes (for thumbnail image for example)
		$p->parse($db0_line{'body'}) unless $p->{'out_tag'}->{'img.1'};
		
		$item=~s|<%out\.(.*?)%>|$p->{'out_var'}->{$1}|g;
		$item=~s|<#out\.(.*?)#>|$p->{'out_tag'}->{$1}|g;
		
		
		if ($env{'relation'})
		{
			foreach my $relation (App::160::SQL::get_relations(
				'db_name' => $App::401::db_name,
				'l_prefix' => 'a401',
				'l_table' => 'article',
				'l_ID_entity' => $db0_line{'ID_entity_article'},
#				'rel_type' => $env{'rel_type'},
#				'r_prefix' => "a501",
#				'r_table' => "image",
				'status' => "Y"
			))
			{
				if ($relation->{'r_prefix'} eq "a501" && $relation->{'r_table'} eq "image")
				{$item=~s|<#gallery_mark#>|$XSGN{'gallery_mark'}|g;}
#				if ($relation->{'r_prefix'} eq "a821" && $relation->{'r_table'} eq "discussion")
#				{$XSGN{'NULL'}=~s|<%discussion_status%>|Y|g;}
			}
		}
		
		# check alternate url
		my $ID_category=$db0_line{'ID_category'};
		main::_log("finding alias_url from ID_category='$ID_category'");
		my $alias_url;
		my %data=App::020::SQL::functions::get_ID(
			'ID' => $ID_category,
			'db_h' => 'main',
			'db_name' => $App::401::db_name,
			'tb_name' => 'a401_article_cat',
			'columns' => {'*' => 1},
			'-cache' => 3600,
			'-slave' => 1,
		);
		$alias_url=$data{'alias_url'} if $data{'alias_url'};
		main::_log("setup alias_url='$alias_url' in ID_category='$ID_category'") if $alias_url;
		while ($ID_category && !$alias_url)
		{
			my %data=App::020::SQL::functions::tree::get_parent_ID(
				'ID' => $ID_category,
				'db_h' => 'main',
				'db_name' => $App::401::db_name,
				'tb_name' => 'a401_article_cat',
				'columns' => {'*' => 1},
				'-cache' => 3600,
				'-slave' => 1,
			);
			$ID_category=$data{'ID'};
			if ($data{'alias_url'})
			{
				$alias_url=$data{'alias_url'};
				main::_log("setup alias_url='$alias_url' in ID_category='$ID_category'");
				last;
			}
		}
		main::_log("can't find alias_url") unless $alias_url;
		
		$item=~s|<%alias_url%>|$alias_url|g if $alias_url;
		$item=~s|<%alias_url%>|$tom::H_www|g unless $alias_url;
		
		$item=~s|<%item_number%>|$item_counter|g;
		
		$item=~s|<%name%>|$db0_line{'name'}|;
		
		if($XSGN{'TMP'}=~/<#item.$item_counter#>/)
		{
			$XSGN{'TMP'}=~s|<#item.$item_counter#>|$item|;
		}
		else
		{
			$XSGN{'TMP'}=~s|<#item#>|$item|;
		}
	}
	
	$XSGN{'TMP'}=~s|<%total_count%>|$item_counter|g;
	
	if ($env{'sql_limit'}=~/(\d+),(\d+)/)
	{
		$env{'offset'}=$1;
		#$env{'count'}=$2;
	}
	else
	{
		#$env{'count'}=$env{'sql_limit'};
	}
	#$env{'count'}=$count_max;
	
	
	# offset
	if ($count_max && $item_counter >= $count_max && $count_max < $sth0{'rows'}) # count
	{
		$XSGN{'next'}=~s|<%offset%>|$env{'offset'}+$count_max|ge;
		$XSGN{'TMP'}=~s|<#next#>|$XSGN{'next'}|g;
	}
	if ($env{'offset'}-$env{'sql_limit_start'})
	{
		if ($env{'offset'} - $count_max - $env{'sql_limit_start'}>0)
		{
			$XSGN{'previous'}=~s|<%offset%>|$env{'offset'}-$count_max|ge;
		}
		else
		{
			$XSGN{'previous'}=~s|<%offset%>||ge;
		}
		$XSGN{'TMP'}=~s|<#previous#>|$XSGN{'previous'}|g;
	}
	
	
	if(!$item_counter)
	{
		if($XSGN{'TMP_failure_no-data'})
		{
			$XSGN{'TMP'} = $XSGN{'TMP_failure_no-data'};
		}
	}
	
	return 1;
}


our $authors="open\@comsultia.com";

=head1 AUTHORS

Comsultia, Ltd. (open@comsultia.com)

=cut

1;
