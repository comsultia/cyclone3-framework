#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8;
use strict;



=head1 NAME

401-article_list.lite.mdl

=head1 DESCRIPTION

Lite list of articles

=head1 DEPENDS

=over

=item *

L<App::401::_init|app/"401/_init.pm">

=back

=cut

use App::401::_init;
use Ext::TextHyphen::_init;


=head1 INPUTS

=over

=item *

B<-xlng_load> - load template internationalization file

=item *

B<db_name> - database name

=item *

B<article_attrs.ID_category> - comma separated list of articles ID_category (can be set with * suffix to select all subcategories - 5;2*;3;7)

=item *

B<article_attrs.status> - required status, nonseparated values (default 'Y')

=item *

B<article_content.lng> - required language (default is current)

=item *

B<article_content.mimetype> - required content mimetype (default is 'text/html')

=item *

B<sql_limit> - limit to display (default '1')

=item *

B<sql_limit_start> - at start skip defined items

=item *

B<sql_order_by> - order by in SQL

=item *

B<sql_where> - where in SQL

=back

=cut



=head1 XSGN

=over

=item *

B<TMP> - default

=item *

B<#previous#> B<#next#> - to skip to another offset

=item *

B<previous> B<next> - include into <#previous#> <#next#>

=item *

B<%offset%> - offset value (calculated from sql_limit input param)

=item *

B<%sql_limit%> - SQL limit

=item *

B<%sql_limit_start%> - start SQL limit from value

=item *

B<#item#> - gateway to article item

=item *

B<item> - article item

=item *

B<item.1> - first article item

=item *

B<%db_*%> - article database items

B<%db_ID_category%>, B<%db_ID_category_name%>, B<%db_name%>, B<%db_name_url%>, B<%db_subtitle%>

=item *

B<%ID%> - article ID

=item *

B<%ID_entity%> - article ID_entity

=item *

B<%name%> - article name

=item *

B<%abstract%> - article abstract

=item *

B<%abstract_plain%> - article abstract as plaintext

=item *

B<%alias_url%> - alias_url

=item *

B<#video_mark#> - gateway to video mark

=item *

B<video_mark> - video mark

=item *

B<#gallery_mark#> - gateway to gallery mark

=item *

B<gallery_mark> - gallery mark

=item *

B<TMP_failure_no-data> - if defined, replaces TMP for empty database output

=back

=cut



sub execute
{
	my %env=@_;
	Tomahawk::GetXSGN('-convertvars'=>1) || return undef;
	
	if ($Tomahawk::mdl_C{'-xlng_load'})
	{
		main::_log("using xlng transformation");
		Tomahawk::GetXLNG() || return undef; # retrieve language xml
		Tomahawk::XLNGtoXSGN(); # implement XLNG into XSGN
	}
	
	$env{'db_name'}=$App::401::db_name unless $env{'db_name'};
	
	$env{'sql_limit'}='1' unless $env{'sql_limit'};
	
	if (not $env{'sql_limit'}=~/,/){$env{'sql_limit'}="0,".$env{'sql_limit'}}
	if ($env{'sql_limit'}=~/^,/){$env{'sql_limit'}="0".$env{'sql_limit'};}
	if ($env{'sql_limit'}=~/^0,/ && $env{'sql_limit_start'})
	{
		$env{'sql_limit'}=~s/^(\d+),/$1+$env{'sql_limit_start'}.","/e;
	}
	
	my $count_max;
	if ($env{'sql_limit'}=~/,(\d+)/)
	{
		$count_max=$1;
		$env{'sql_limit'}=~s/,(\d+)/",".($1+10)/e;
	}
	
	if (not $env{'sql_limit'}=~/^(\d+),(\d+)$/)
	{
		$env{'sql_limit'}='1';
	}
	
	$env{'sql_order_by'}='article_attrs.datetime_start DESC' unless $env{'sql_order_by'};
	$env{'sql_order_by'}=" ".$env{'sql_order_by'};
	
	$env{'sql_order_by'}=~s| modified|IF(article_content.datetime_modified,article_content.datetime_modified,article_attrs.datetime_start)|g;
	
#	if ($env{'sql_order_by'} eq "datetime_modified")
#	{
#		$env{'sql_order_by'}=qq{
#			( IF(article_content.datetime_modified,article_content.datetime_modified,article_attrs.datetime_start) ) DESC
#		};
#	}
	
	$env{'article_content.lng'}=$env{'lng'} unless $env{'article_content.lng'};
	
	$env{'article_attrs.status'}='Y' unless $env{'article_attrs.status'};
		my $status_sql=join "','", split('',$env{'article_attrs.status'});
	
	$env{'world_status'}='Y' unless $env{'world_status'};
	
	my %hyphen;
	if ($env{'hyphen'})
	{
		foreach(split('[,;]',$env{'hyphen'}))
		{
			$hyphen{$_}=1;
		}
	}
	
	my $execution_success=1;
	
	my $sql_where;
	
	my $sql_cat;
	foreach my $ID_category(split(';',$env{'article_attrs.ID_category'}))
	{
		next unless $ID_category;
		if ($ID_category=~s/\*$//)
		{
			next unless $ID_category;
			my $cat_sql=qq{
				SELECT
					ID_charindex
				FROM
					`$env{'db_name'}`.`a401_article_cat`
				WHERE
					ID=$ID_category
				LIMIT 1
			};
			$ID_category=qq{
				SELECT
					ID
				FROM
					`$env{'db_name'}`.`a401_article_cat`
				WHERE
					ID_charindex LIKE CONCAT(($cat_sql),"%") AND
					lng='$env{'article_content.lng'}' AND
					status IN ('$status_sql')
			};
		}
		$sql_cat.=" OR article_attrs.ID_category IN ($ID_category)";
		$sql_cat=~s/^ OR //;
	}
	if ($sql_cat)
	{
		$sql_where.=" AND (".$sql_cat.") ";
	}
	
	if ($env{'article.ID_entity'})
	{
		$sql_where.=" AND article.ID_entity IN ('".
			(join "','", split(';',$env{'article.ID_entity'})).
			"')";
	}
	
	if ($env{'article.ID'})
	{
		$sql_where.=" AND article.ID IN ('".
			(join "','", split(';',$env{'article.ID'})).
			"')";
	}
	
	if ($env{'world_status'} eq 'Y')
	{
		$sql_where.=" AND (ACL_world.perm_R='Y' OR ACL_world.perm_R IS NULL) ";
	}
	else
	{
#		$sql_where.=" AND ACL_world.perm_R='N' ";
	}
	
	my $sql_select;
	
	if ($env{'sql_order_by'}=~s|:visits_(.*?):|:VISITS:|)
	{
		my $dur=$1;
		my $sql_visits=qq{(SELECT COUNT(ID_article) FROM $env{'db_name'}.a401_article_visit AS visit WHERE visit.ID_article=article.ID_entity AND datetime_event >= DATE_SUB(NOW(),INTERVAL $dur))};
		$env{'sql_order_by'}=~s|:VISITS:|$sql_visits|;
		$sql_select=", $sql_visits AS visits_dur ";
	}
	
	if ($env{'sql_where'})
	{
		$sql_where.=" AND ".$env{'sql_where'};
	}
	
	if ($env{'modified.datetime_from'})
	{
		$sql_select.=qq{
		, IF (
			IF(article_content.datetime_modified > article_attrs.datetime_start,article_content.datetime_modified,article_attrs.datetime_start)
			> '$env{'modified.datetime_from'}',
			"Y",
			"N"
		) AS mark_modified
		};
	}
	
	my $sql=qq{
		SELECT
			
			article.ID_entity AS ID_entity_article,
			article.ID AS ID_article,
			article_attrs.ID AS ID_attrs,
			article_content.ID AS ID_content,
			
			article_attrs.ID_category,
			article_cat.name AS ID_category_name,
			article_cat.name AS cat_name,
			article_cat.name_url AS ID_category_name_url,
			article_cat.name_url AS cat_name_url,
			
			article_ent.posix_owner,
			article_ent.ID_author AS posix_author,
			article_ent.visits,
			article_ent.sources,
			article_content.ID_editor AS posix_editor,
			
			article_content.datetime_create,
			article_attrs.datetime_start,
			article_attrs.datetime_stop,
         
			
			article_attrs.priority_A,
			article_attrs.priority_B,
			article_attrs.priority_C,
			
			article_attrs.name,
			article_attrs.name_url,
			article_attrs.name_hyphens,
			article_attrs.alias_url,
			
			article_content.subtitle,
			article_content.subtitle_hyphens,
			article_content.mimetype,
			article_content.abstract,
			article_content.abstract_hyphens,
			article_content.body,
			article_content.body_hyphens,
			article_content.keywords,
			article_content.lng,
			
			IF(
				round((`article_ent`.rating_score / `article_ent`.rating_votes),2),
				round((`article_ent`.rating_score / `article_ent`.rating_votes),2), '0.00'
			) as rating,
			rating_score,
			rating_votes,
			
			article_ent.visits,
			
			article_attrs.status,
			
			IF
			(
				(
					article.status LIKE 'Y' AND
					article_attrs.status LIKE 'Y'
				),
				'Y', 'U'
			) AS status_all
			$sql_select
			
		FROM `$env{'db_name'}`.a401_article_attrs AS article_attrs
		LEFT JOIN `$env{'db_name'}`.a401_article AS article ON
		(
			article_attrs.ID_entity = article.ID
		)
		LEFT JOIN `$env{'db_name'}`.`a401_article_ent` AS article_ent ON
		(
			article_ent.ID_entity = article.ID_entity
		)
		LEFT JOIN `$env{'db_name'}`.`a401_article_content` AS article_content ON
		(
			article_content.ID_entity = article.ID_entity AND
			article_content.status = 'Y' AND
			article_content.lng = article_attrs.lng
		)
		LEFT JOIN `$env{'db_name'}`.`a401_article_cat` AS article_cat ON
		(
			article_cat.ID = article_attrs.ID_category
		)
		LEFT JOIN `$env{'db_name'}`.`a301_ACL_user_group` AS ACL_world ON
		(
			ACL_world.ID_entity = 0 AND
			r_prefix = 'a401' AND
			r_table = 'article' AND
			r_ID_entity = article.ID_entity
		)
		
		WHERE
			article_attrs.status IN ('$status_sql') AND
			article_attrs.lng='$env{'article_content.lng'}' AND
			article_attrs.datetime_start <= NOW() AND
			(article_attrs.datetime_stop IS NULL OR article_attrs.datetime_stop >= NOW())
			$sql_where
			
		ORDER BY
			$env{'sql_order_by'}
			
		LIMIT
			$env{'sql_limit'}
	};
	my %sth0=TOM::Database::SQL::execute($sql,'quiet'=>1,'-slave'=>1,'-cache_auto_'=>60);
	
	if(!$sth0{'sth'})
	{
		main::_log("SQL can't be executed",1);
	}
	
	if(!$sth0{'rows'})
	{
		main::_log("err: could not fetch articles");
	}
	
	main::_log("received ".$sth0{'rows'}." rows");
	
	# 'Cache' for author records
	my %tmp_authors;
	
   my %IDs_entity;
	
	# Line counter
	my $item_counter=0;
	
	while (my %db0_line=$sth0{'sth'}->fetchhash())
	{
		next if $IDs_entity{$db0_line{'ID_entity_article'}};
		$IDs_entity{$db0_line{'ID_entity_article'}}++;
		
		$item_counter++;
		
		last if $count_max<$item_counter;
		
		main::_log("article[$item_counter] article_attrs.name='$db0_line{'name'}'");
		
		my $item = $XSGN{'item'};
		$item = $XSGN{'item.odd'} if (($item_counter % 2) && (exists $XSGN{'item.odd'}));
		$item = $XSGN{'item.'.$item_counter} if $XSGN{'item.'.$item_counter};
		
		my $abstract_plain=TOM::Text::format::xml2plain($db0_line{'abstract'});
		my $body_plain=TOM::Text::format::xml2plain($db0_line{'body'});
		
		if ($XSGN{'item-empty'} && 
			(!$db0_line{'abstract'} || (length($abstract_plain) < 10)) &&
			(!$db0_line{'body'} || (length($body_plain) < 10)))
		{
			$item=$XSGN{'item-empty'};
		}
		elsif ($XSGN{'item-emptybody'} && ((!$db0_line{'body'}) || (length($body_plain) < 10)))
		{
			$item=$XSGN{'item-emptybody'};
		}
		
		if ($db0_line{'version'}) # this content is versioned
		{
			$item=~s|<#versioned#>|$XSGN{'versioned'}|g;
		}else{
			$item=~s|<#unversioned#>|$XSGN{'unversioned'}|g;
		}
		
		if ($db0_line{'datetime_modified'}) # this content was modified
		{
			$item=~s|<#modified#>|$XSGN{'modified'}|g;
		}else{
			$item=~s|<#unmodified#>|$XSGN{'unmodified'}|g;
		}
		
		use DateTime;
		
      if($db0_line{'datetime_start'})
		{
			my %datetime=TOM::Utils::datetime::datetime_collapse($db0_line{'datetime_start'});
			$db0_line{'datetime_start.year'}=$datetime{'year'};
			$db0_line{'datetime_start.month'}=$datetime{'month'};
			$db0_line{'datetime_start.month_'}=$datetime{'month'}-1+1;
			$db0_line{'datetime_start.mday'}=$datetime{'mday'};
			$db0_line{'datetime_start.hour'}=$datetime{'hour'};
			$db0_line{'datetime_start.min'}=$datetime{'min'};
			$db0_line{'datetime_start.sec'}=$datetime{'sec'};
			
			$db0_line{'datetime_start.month.name'}=$Utils::datetime::MONTHS{$env{'lng'}}[$datetime{'month'}-1];
			$db0_line{'datetime_start.month.name.long'}=$Utils::datetime::MONTHS_L{$env{'lng'}}[$datetime{'month'}-1];
			
			if($db0_line{'datetime_start'} ne "0000-00-00 00:00:00")
			{
				my $dt = DateTime->new(year => $datetime{'year'}, month => $datetime{'month'}, day => $datetime{'mday'}, hour => $datetime{'hour'}, minute => $datetime{'min'}, second => $datetime{'sec'}, time_zone => 'local');
				$db0_line{'datetime_start.wday'}=$dt->day_of_week();
				$db0_line{'datetime_start.wday.name'}=$Utils::datetime::DAYS{$env{'lng'}}[$dt->day_of_week()];
				$db0_line{'datetime_start.wday.name.long'}=$Utils::datetime::DAYS_L{$env{'lng'}}[$dt->day_of_week()];
			}
			
			my $dt = DateTime->now();
			my $dt_to = DateTime->new(
				'year' => $datetime{'year'},
				'month' => $datetime{'month'},
				'day' => $datetime{'mday'},
				'hour' => $datetime{'hour'}
			);
			my $dt_dur=$dt_to-$dt;
			
			my $dur_string;
			if ($dt_dur->years() >= 2)
			{$dur_string.=$Utils::datetime::PUBLISHED{$env{'lng'}}[0]." ".$dt_dur->years()." ".$Utils::datetime::PUBLISHED{$env{'lng'}}[13];}
			elsif ($dt_dur->years() >= 1)
			{$dur_string.=$Utils::datetime::PUBLISHED{$env{'lng'}}[0]." ".$Utils::datetime::PUBLISHED{$env{'lng'}}[12];}
			else
			{
				if ($dt_dur->months() >= 2)
				{$dur_string.=$Utils::datetime::PUBLISHED{$env{'lng'}}[0]." ".$dt_dur->months()." ".$Utils::datetime::PUBLISHED{$env{'lng'}}[11];}
				elsif ($dt_dur->months() >= 1)
				{$dur_string.=$Utils::datetime::PUBLISHED{$env{'lng'}}[0]." ".$Utils::datetime::PUBLISHED{$env{'lng'}}[10];}
				else
				{
					if ($dt_dur->weeks() >= 2)
					{$dur_string.=$Utils::datetime::PUBLISHED{$env{'lng'}}[0]." ".$dt_dur->weeks()." ".$Utils::datetime::PUBLISHED{$env{'lng'}}[9];}
					elsif ($dt_dur->weeks() >= 1)
					{$dur_string.=$Utils::datetime::PUBLISHED{$env{'lng'}}[0]." ".$Utils::datetime::PUBLISHED{$env{'lng'}}[8];}
					else
					{
						if ($dt_dur->days() >= 2)
						{$dur_string.=$Utils::datetime::PUBLISHED{$env{'lng'}}[0]." ".$dt_dur->days()." ".$Utils::datetime::PUBLISHED{$env{'lng'}}[7];}
						elsif ($dt_dur->days() >= 1)
						{$dur_string.=$Utils::datetime::PUBLISHED{$env{'lng'}}[0]." ".$dt_dur->days()." ".$Utils::datetime::PUBLISHED{$env{'lng'}}[6];}
						else
						{
							if ($dt_dur->hours() >= 2)
							{$dur_string.=$Utils::datetime::PUBLISHED{$env{'lng'}}[0]." ".$dt_dur->hours()." ".$Utils::datetime::PUBLISHED{$env{'lng'}}[5];}
							elsif ($dt_dur->hours() >= 1)
							{$dur_string.=$Utils::datetime::PUBLISHED{$env{'lng'}}[0]." ".$dt_dur->hours()." ".$Utils::datetime::PUBLISHED{$env{'lng'}}[4];}
#							if ($dt_dur->hours() >= 1)
#							{$dur_string.=$Utils::datetime::PUBLISHED{$env{'lng'}}[2];}
							else
							{
								$dur_string.=$Utils::datetime::PUBLISHED{$env{'lng'}}[1];
							}
						}
					}
				}
			}
			$item=~s|<%published%>|$dur_string|g;
		
		
			my $dur_string;
			if ($dt_dur->years() >= 5)
			{$dur_string=$dt_dur->years()." ".$Utils::datetime::PUBLISHED_OLD{$env{'lng'}}[20];}
			elsif ($dt_dur->years() >= 2)
			{$dur_string=$dt_dur->years()." ".$Utils::datetime::PUBLISHED_OLD{$env{'lng'}}[19];}
			elsif ($dt_dur->years() >= 1)
			{$dur_string=$dt_dur->years()." ".$Utils::datetime::PUBLISHED_OLD{$env{'lng'}}[18];}
			else
			{
				if ($dt_dur->months() >= 5)
				{$dur_string=$dt_dur->months()." ".$Utils::datetime::PUBLISHED_OLD{$env{'lng'}}[17];}
				elsif ($dt_dur->months() >= 2)
				{$dur_string=$dt_dur->months()." ".$Utils::datetime::PUBLISHED_OLD{$env{'lng'}}[16];}
				elsif ($dt_dur->months() >= 1)
				{$dur_string=$dt_dur->months()." ".$Utils::datetime::PUBLISHED_OLD{$env{'lng'}}[15];}
				else
				{
					if ($dt_dur->weeks() >= 5)
					{$dur_string=$dt_dur->weeks()." ".$Utils::datetime::PUBLISHED_OLD{$env{'lng'}}[14];}
					elsif ($dt_dur->weeks() >= 2)
					{$dur_string=$dt_dur->weeks()." ".$Utils::datetime::PUBLISHED_OLD{$env{'lng'}}[13];}
					elsif ($dt_dur->weeks() >= 1)
					{$dur_string=$dt_dur->weeks()." ".$Utils::datetime::PUBLISHED_OLD{$env{'lng'}}[12];}
					else
					{
						if ($dt_dur->days() >= 5)
						{$dur_string=$dt_dur->days()." ".$Utils::datetime::PUBLISHED_OLD{$env{'lng'}}[11];}
						elsif ($dt_dur->days() >= 2)
						{$dur_string=$dt_dur->days()." ".$Utils::datetime::PUBLISHED_OLD{$env{'lng'}}[10];}
						elsif ($dt_dur->days() >= 1)
						{$dur_string=$dt_dur->days()." ".$Utils::datetime::PUBLISHED_OLD{$env{'lng'}}[9];}
						else
						{
							if ($dt_dur->hours() >= 5)
							{$dur_string=$dt_dur->hours()." ".$Utils::datetime::PUBLISHED_OLD{$env{'lng'}}[8];}
							elsif ($dt_dur->hours() >= 2)
							{$dur_string=$dt_dur->hours()." ".$Utils::datetime::PUBLISHED_OLD{$env{'lng'}}[7];}
							elsif ($dt_dur->hours() >= 1)
							{$dur_string=$dt_dur->hours()." ".$Utils::datetime::PUBLISHED_OLD{$env{'lng'}}[6];}
	#						if ($dt_dur->hours() >= 1)
	#						{$dur_string.=$Utils::datetime::PUBLISHED{$env{'lng'}}[2];}
							else
							{
								$dur_string.=$Utils::datetime::PUBLISHED_OLD{$env{'lng'}}[0];
							}
						}
					}
				}
			}
			$item=~s|<%published_old%>|$dur_string|g;
		}
		
      if($db0_line{'datetime_modified'})
		{
			my %datetime=TOM::Utils::datetime::datetime_collapse($db0_line{'datetime_modified'});
			$db0_line{'datetime_modified.year'}=$datetime{'year'};
			$db0_line{'datetime_modified.month'}=$datetime{'month'};
			$db0_line{'datetime_modified.month_'}=$datetime{'month'}-1+1;
			$db0_line{'datetime_modified.mday'}=$datetime{'mday'};
			$db0_line{'datetime_modified.hour'}=$datetime{'hour'};
			$db0_line{'datetime_modified.min'}=$datetime{'min'};
			$db0_line{'datetime_modified.sec'}=$datetime{'sec'};
			
			$db0_line{'datetime_modified.month.name'}=$Utils::datetime::MONTHS{$env{'lng'}}[$datetime{'month'}-1];
			$db0_line{'datetime_modified.month.name.long'}=$Utils::datetime::MONTHS_L{$env{'lng'}}[$datetime{'month'}-1];
			
			if($db0_line{'datetime_start'} ne "0000-00-00 00:00:00")
			{
				my $dt = DateTime->new(year => $datetime{'year'}, month => $datetime{'month'}, day => $datetime{'mday'}, hour => $datetime{'hour'}, minute => $datetime{'min'}, second => $datetime{'sec'}, time_zone => 'local');
				$db0_line{'datetime_modified.wday'}=$dt->day_of_week_0();
				$db0_line{'datetime_modified.wday.name'}=$Utils::datetime::DAYS{$env{'lng'}}[$dt->day_of_week_0()];
				$db0_line{'datetime_modified.wday.name.long'}=$Utils::datetime::DAYS_L{$env{'lng'}}[$dt->day_of_week_0()];
			}
		}
		
		# hyphen
		foreach (keys %hyphen)
		{
			if ($db0_line{$_} && $db0_line{$_.'_hyphens'})
			{
				$db0_line{$_}=Ext::TextHyphen::add_hyphens($db0_line{$_},split(',',$db0_line{$_.'_hyphens'}));
			}
		}
		
		my %author=App::301::authors::get_author($db0_line{'posix_author'});
		$item=~s|<%author_(.*?)%>|$author{$1}|g;
		
		my %editor=App::301::authors::get_author($db0_line{'posix_editor'});
		$item=~s|<%editor_(.*?)%>|$editor{$1}|g;
		
		# process abstract
		my $p=new App::401::mimetypes::html;
		
		$p->config('name'=>'abstract','env'=>\%env,'entity'=>\%XSGN,'counter'=>$item_counter,'prefix'=>'article');
		
		$p->parse($db0_line{'abstract'}."\n");
		#$p->eof();
		my $abstract_html=$p->{'out'};
		$item=~s|<%abstract%>|$abstract_html|g;
		
		$item=~s|<%abstract_plain%>|$abstract_plain|;
		
		# BODY
		if ($env{'article_content.body'})
		{
			
			# process abstract
			my $p=new App::401::mimetypes::html;
			
			$p->config('name'=>'body','env'=>\%env,'entity'=>\%XSGN,'counter'=>$item_counter,'prefix'=>'article');
			
			$p->parse($db0_line{'body'});
			
			$item=~s|<%out\.body\.(.*?)%>|$p->{'out_var'}->{$1}|g;
			$item=~s|<#out\.body\.(.*?)#>|$p->{'out_tag'}->{$1}|g;
			
			$XSGN{'TMP'}=~s|<%item\.$item_counter\.out\.body\.(.*?)%>|$p->{'out_var'}->{$1}|g;
			$XSGN{'TMP'}=~s|<#item\.$item_counter\.out\.body\.(.*?)#>|$p->{'out_tag'}->{$1}|g;
			
			my $body_html=$p->{'out'};
			$item=~s|<%body%>|$body_html|;
			
			if ($p->{'count'}->{'video'})
			{
				$item=~s|<#video_mark#>|$XSGN{'video_mark'}|g;
			}
			
			# find alternate attributes (for thumbnail image for example)
			$p->parse($db0_line{'body'}) unless $p->{'out_tag'}->{'img.1'};
			
		}
		
		$item=~s|<%out\.(.*?)%>|$p->{'out_var'}->{$1}|g;
		$item=~s|<#out\.(.*?)#>|$p->{'out_tag'}->{$1}|g;
		
		$XSGN{'TMP'}=~s|<%item\.$item_counter\.out\.(.*?)%>|$p->{'out_var'}->{$1}|g;
		$XSGN{'TMP'}=~s|<#item\.$item_counter\.out\.(.*?)#>|$p->{'out_tag'}->{$1}|g;
		
		if ($db0_line{'rating_votes'} >= 5 && $db0_line{'rating'}>=4.5)
		{
			$item=~s|<#rating_top_mark#>|$XSGN{'rating_top_mark'}|g;
		}
		
		if ($db0_line{'world_status'} eq 'N')
		{
			$item=~s|<#private_mark#>|$XSGN{'private_mark'}|g;
		}
		
		if ($env{'relation'})
		{
			my $related_article;
			foreach my $relation (App::160::SQL::get_relations(
				'db_name' => $env{'db_name'},
				'l_prefix' => 'a401',
				'l_table' => 'article',
				'l_ID_entity' => $db0_line{'ID_entity_article'},
#				'rel_type' => $env{'rel_type'},
#				'r_prefix' => "a501",
#				'r_table' => "image",
				'status' => "Y"
			))
			{
				my %related_articles;
				
				if (
					$relation->{'r_prefix'} eq "a401" && 
					$relation->{'r_table'} eq "article" && 
					($relation->{'rel_type'} eq "link" || $relation->{'rel_type'} eq "autolink") && 
					!$related_articles{$relation->{'r_ID_entity'}} &&
					$XSGN{'related_article'}
				)
				{
					$related_article++;
					my $item_article=$XSGN{'related_article.'.$related_article} || $XSGN{'related_article'};
					next unless $item_article;
					my $sql=qq{
						SELECT
							article.ID_entity,
							article.ID,
							article_attrs.ID_category,
							article_cat.name AS ID_category_name,
							article_cat.name_url AS ID_category_name_url,
							article_attrs.name,
							article_attrs.datetime_start,
							article_attrs.name_url
						FROM `$env{'db_name'}`.a401_article AS article
						LEFT JOIN `$env{'db_name'}`.a401_article_attrs AS article_attrs ON
						(
							article_attrs.ID_entity = article.ID
						)
						LEFT JOIN `$env{'db_name'}`.`a401_article_ent` AS article_ent ON
						(
							article_ent.ID_entity = article.ID_entity
						)
						LEFT JOIN `$env{'db_name'}`.`a401_article_cat` AS article_cat ON
						(
							article_cat.ID = article_attrs.ID_category
						)
						WHERE
							article.ID_entity='$relation->{'r_ID_entity'}' AND
							article_attrs.status='Y' AND
							article_attrs.lng='$env{'article_content.lng'}' AND
							article_attrs.datetime_start <= NOW() AND
							(article_attrs.datetime_stop IS NULL OR article_attrs.datetime_stop >= NOW())
						ORDER BY
							article_attrs.datetime_start DESC
						LIMIT
							1
					};
					my %sth1=TOM::Database::SQL::execute($sql,'quiet'=>1,'-slave'=>1,'-cache'=>600);
					my %db1_line=$sth1{'sth'}->fetchhash();
					if (!$db1_line{'ID_entity'})
					{
						$related_article--;
						next;
					}
					
					$related_articles{$db1_line{'ID_entity'}}++;
					
					my %datetime=TOM::Utils::datetime::datetime_collapse($db1_line{'datetime_start'});
					$db1_line{'datetime_start.year'}=$datetime{'year'};
					$db1_line{'datetime_start.month'}=$datetime{'month'};
					$db1_line{'datetime_start.mday'}=$datetime{'mday'};
					$db1_line{'datetime_start.hour'}=$datetime{'hour'};
					$db1_line{'datetime_start.min'}=$datetime{'min'};
					$db1_line{'datetime_start.sec'}=$datetime{'sec'};
					$item_article=~s|<%db_(.*?)%>|$db1_line{$1}|g;
					
					my $alias_url=App::401::functions::article_alias_url('ID_category'=>$db1_line{'ID_category'});
					$item_article=~s|<%alias_url%>|$alias_url|g if $alias_url;
					$item_article=~s|<%alias_url%>|$tom::H_www|g unless $alias_url;
					$item_article=~s|<%alias_url_db%>|$alias_url|g;
					
					$item=~s|<#related_article#>|$item_article|g;
				}
				
				if ($relation->{'r_prefix'} eq "a501" && $relation->{'r_table'} eq "image")
				{
					$item=~s|<#gallery_mark#>|$XSGN{'gallery_mark'}|g;
				}
				
				if ($relation->{'r_prefix'} eq "a542" && $relation->{'rel_type'} eq "attachment" && $relation->{'r_table'} eq "file")
				{
					main::_log('i have attachment: '.$relation->{'r_ID_entity'});
					my $sql=qq{
						SELECT
							*
						FROM
							`$App::542::db_name`.a542_file_view AS file
						WHERE
									file.status IN ('Y')
							AND	file.lng='$env{'article_content.lng'}'
							AND	file.ID_entity_file=$relation->{'r_ID_entity'}
						LIMIT 1
					};
					my %sth1=TOM::Database::SQL::execute($sql,'log'=>1,'-slave'=>1);
					if (my %db1_line=$sth1{'sth'}->fetchhash())
					{
						my $item_attachment = $XSGN{'attachment'};
						
						$db1_line{'file_size_gb'}=sprintf("%0.2f", ($db1_line{'file_size'} / (1024 * 1024 * 1024)));
						$db1_line{'file_size_mb'}=sprintf("%0.2f", ($db1_line{'file_size'} / (1024 * 1024)));
						$db1_line{'file_size_kb'}=sprintf("%0.2f", ($db1_line{'file_size'} / 1024));
						$db1_line{'file_size.gb'}=sprintf("%0.2f", ($db1_line{'file_size'} / (1024 * 1024 * 1024)));
						$db1_line{'file_size.mb'}=sprintf("%0.2f", ($db1_line{'file_size'} / (1024 * 1024)));
						$db1_line{'file_size.kb'}=sprintf("%0.2f", ($db1_line{'file_size'} / 1024));
						
						my %datetime=TOM::Utils::datetime::datetime_collapse($db1_line{'datetime_create'});
						$db1_line{'datetime_create.year'}=$datetime{'year'};
						$db1_line{'datetime_create.month'}=$datetime{'month'};
						$db1_line{'datetime_create.month_'}=$datetime{'month'}-1+1;
						$db1_line{'datetime_create.mday'}=$datetime{'mday'};
						$db1_line{'datetime_create.hour'}=$datetime{'hour'};
						$db1_line{'datetime_create.min'}=$datetime{'min'};
						$db1_line{'datetime_create.sec'}=$datetime{'sec'};
						
						$db1_line{'datetime_create.month.name'}=$Utils::datetime::MONTHS{$env{'lng'}}[$datetime{'month'}-1];
						$db1_line{'datetime_create.month.name.long'}=$Utils::datetime::MONTHS_L{$env{'lng'}}[$datetime{'month'}-1];
						
						if($db1_line{'datetime_create'} ne "0000-00-00 00:00:00")
						{
							my $dt = DateTime->new(year => $datetime{'year'}, month => $datetime{'month'}, day => $datetime{'mday'}, hour => $datetime{'hour'}, minute => $datetime{'min'}, second => $datetime{'sec'}, time_zone => 'local');
							$db1_line{'datetime_create.wday'}=$dt->day_of_week();
							$db1_line{'datetime_create.wday.name'}=$Utils::datetime::DAYS{$env{'lng'}}[$dt->day_of_week()];
							$db1_line{'datetime_create.wday.name.long'}=$Utils::datetime::DAYS_L{$env{'lng'}}[$dt->day_of_week()];
						}
						
						if($db1_line{'datetime_publish_start'})
						{
							my %datetime=TOM::Utils::datetime::datetime_collapse($db1_line{'datetime_publish_start'});
							$db1_line{'datetime_publish_start.year'}=$datetime{'year'};
							$db1_line{'datetime_publish_start.month'}=$datetime{'month'};
							$db1_line{'datetime_publish_start.month_'}=$datetime{'month'}-1+1;
							$db1_line{'datetime_publish_start.mday'}=$datetime{'mday'};
							$db1_line{'datetime_publish_start.hour'}=$datetime{'hour'};
							$db1_line{'datetime_publish_start.min'}=$datetime{'min'};
							$db1_line{'datetime_publish_start.sec'}=$datetime{'sec'};
							
							$db1_line{'datetime_publish_start.month.name'}=$Utils::datetime::MONTHS{$env{'lng'}}[$datetime{'month'}-1];
							$db1_line{'datetime_publish_start.month.name.long'}=$Utils::datetime::MONTHS_L{$env{'lng'}}[$datetime{'month'}-1];
							
							if($db1_line{'datetime_publish_start'} ne "0000-00-00 00:00:00")
							{
								my $dt = DateTime->new(year => $datetime{'year'}, month => $datetime{'month'}, day => $datetime{'mday'}, hour => $datetime{'hour'}, minute => $datetime{'min'}, second => $datetime{'sec'}, time_zone => 'local');
								$db1_line{'datetime_publish_start.wday'}=$dt->day_of_week();
								$db1_line{'datetime_publish_start.wday.name'}=$Utils::datetime::DAYS{$env{'lng'}}[$dt->day_of_week()];
								$db1_line{'datetime_publish_start.wday.name.long'}=$Utils::datetime::DAYS_L{$env{'lng'}}[$dt->day_of_week()];
							}
						}
						
						$item_attachment=~s|<%db_(.*?)%>|$db1_line{$1}|g;
						$item=~s|<#attachment#>|$item_attachment|g;
					}
				}
				
				if ($relation->{'r_prefix'} eq "a821" && $relation->{'rel_type'} eq "discussion" && $relation->{'r_table'} eq "discussion")
				{
					require App::821::_init;
					$item=~s|<%discussion_status%>|Y|g;
					my $sql=qq{
						SELECT
							COUNT(*) AS cnt
						FROM
							`$App::821::db_name`.a821_discussion_message
						WHERE
							ID_discussion='$relation->{'r_ID_entity'}'
							AND status = 'Y'
					};
					my %sth1=TOM::Database::SQL::execute($sql,'quiet'=>1,'-slave'=>1);
					my %db1_line=$sth1{'sth'}->fetchhash();
					$item=~s|<%discussion_messages%>|$db1_line{'cnt'}|g;
				}
			}
		}
		
		# check alternate url
		my $alias_url=App::401::functions::article_alias_url('ID_category'=>$db0_line{'ID_category'});
		$item=~s|<%alias_url%>|$alias_url|g if $alias_url;
		$item=~s|<%alias_url%>|$tom::H_www|g unless $alias_url;
		$item=~s|<%alias_url_db%>|$alias_url|g;
		
		$item=~s|<%name%>|$db0_line{'name'}|;
		
		$XSGN{'TMP'}=~s|<%db_item_(.*?)%>|$db0_line{$1}|g;
		
		$item=~s|<%db_(.*?)%>|$db0_line{$1}|g;
		
		$item=~s|<%item_number%>|$item_counter|g;
		while($item=~/<%item_number.divisible(\d+)%>/){
			my $tmp=$1;
			my $divisible=0;
			$divisible=1 if not $item_counter % $tmp;
			$item=~s|<%item_number.divisible$tmp%>|$divisible|g;
		}
		$item=~s|<%item_(.*?)%>|$db0_line{$1}|g;
		
		if($XSGN{'TMP'}=~/<#item.$item_counter#>/)
		{
			$XSGN{'TMP'}=~s|<#item.$item_counter#>|$item|;
		}
		else
		{
			$XSGN{'TMP'}=~s|<#item#>|$item|;
		}
	}
	
	$XSGN{'TMP'}=~s|<%total_count%>|$item_counter|g;
	
	if ($env{'env.counter'})
	{
		$main::env{'count'}+=$item_counter;
	}
	
	if ($env{'sql_limit'}=~/(\d+),(\d+)/)
	{
		$env{'offset'}=$1;
		#$env{'count'}=$2;
	}
	else
	{
		#$env{'count'}=$env{'sql_limit'};
	}
	
	if($XSGN{'paging'})
	{
		if(
			($count_max && $item_counter >= $count_max && $count_max < $sth0{'rows'})
			||	($env{'offset'}-$env{'sql_limit_start'})
		){
			$XSGN{'TMP'}=~s|<#paging#>|$XSGN{'paging'}|g;
		}
	}
	main::_log("count_max: ".$count_max." item_counter: ".$item_counter." count_max: ".$count_max." sth_rows: ".$sth0{'rows'});
	if ($count_max && $item_counter >= $count_max && $count_max < $sth0{'rows'}) # count
	{
		$XSGN{'next'}=~s|<%offset%>|$env{'offset'}+$count_max|ge;
		$XSGN{'TMP'}=~s|<#next#>|$XSGN{'next'}|g;
	}
	else
	{
		$XSGN{'TMP'}=~s|<#next#>|$XSGN{'next.disabled'}|g;
	}
	if ($env{'offset'}-$env{'sql_limit_start'})
	{
		if ($env{'offset'} - $count_max - $env{'sql_limit_start'}>0)
		{
			$XSGN{'previous'}=~s|<%offset%>|$env{'offset'}-$count_max|ge;
		}
		else
		{
			$XSGN{'previous'}=~s|<%offset%>||ge;
		}
		$XSGN{'TMP'}=~s|<#previous#>|$XSGN{'previous'}|g;
	}
	else
	{
		$XSGN{'TMP'}=~s|<#previous#>|$XSGN{'previous.disabled'}|g;
	}
	
	$XSGN{'TMP.empty'}=$XSGN{'TMP_failure_no-data'} if $XSGN{'TMP_failure_no-data'}; #backwards compatibility
	
	if(!$item_counter)
	{
		if(defined $XSGN{'TMP.empty'})
		{
			$XSGN{'TMP'} = $XSGN{'TMP.empty'};
		}
	}
	
	if($env{'article_attrs.ID_category'}=~/^([0-9]+)\*?$/)
	{
		my $ID_category=$1;
		my $sql=qq{
			SELECT
				name, name_url
			FROM
				`$env{'db_name'}`.`a401_article_cat`
			WHERE
						ID_entity=$ID_category
				AND	lng='$env{'article_content.lng'}'
				AND	status IN ('$status_sql')
		};
		my %sth0=TOM::Database::SQL::execute($sql,'quiet'=>1,'-slave'=>1,'-cache_auto_'=>60);
		
		if($sth0{'sth'})
		{
			if (my %db0_line=$sth0{'sth'}->fetchhash())
			{
				$XSGN{'TMP'}=~s|<%category_name%>|$db0_line{'name'}|g;
				$XSGN{'TMP'}=~s|<%category_name_url%>|$db0_line{'name_url'}|g;
			}
		}
	}
	
	return 1;
}


our $authors="open\@comsultia.com";

=head1 AUTHORS

Comsultia, Ltd. (open@comsultia.com)

=cut

1;
