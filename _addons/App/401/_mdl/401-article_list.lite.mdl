#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use encoding 'utf8';
use utf8;
use strict;



=head1 NAME

401-article_list.lite.mdl

=head1 DESCRIPTION

Lite list of articles

=head1 DEPENDS

=over

=item *

L<App::401::_init|app/"401/_init.pm">

=back

=cut

use App::401::_init;



=head1 INPUTS

=over

=item *

B<db_name> - database name

=item *

B<article_attrs.ID_category> - select articles from ID_category (can be set with * suffix to select all subcategories)

=item *

B<article_attrs.status> - required status, nonseparated values (default 'Y')

=item *

B<article_content.lng> - required language (default is current)

=item *

B<article_content.mimetype> - required content mimetype (default is 'text/html')

=item *

B<sql_limit> - limit to display (default '1')

=back

=cut



=head1 XSGN

=over

=item *

B<TMP> - default

=item *

B<TMP_failure_no-data> - if defined, replaces TMP for empty database output

=item *

B<#item#> - gateway to article item

=item *

B<item> - article item

=item *

B<item.1> - first article item

=item *

B<%db_*%> - article database items

B<%db_ID_category%>, B<%db_ID_category_name%>, B<%db_name%>, B<%db_name_url%>, B<%db_subtitle%>

=item *

B<%ID%> - article ID

=item *

B<%ID_entity%> - article ID_entity

=item *

B<%name%> - article name

=back

=cut



sub execute
{
	my %env=@_;
	Tomahawk::GetXSGN('-convertvars'=>1) || return undef;
	
	$env{'db_name'}=$App::401::db_name unless $env{'db_name'};
	
	$env{'article_content.lng'}=$env{'lng'} unless $env{'article_content.lng'};
	$env{'sql_limit'}='1' unless $env{'sql_limit'};
	$env{'article_attrs.status'}='Y' unless $env{'article_attrs.status'};
		my $status_sql=join "','", split('',$env{'article_attrs.status'});
	
	$env{'article_content.mimetype'}='text/html' unless $env{'article_content.mimetype'};
	
	my $execution_success=1;
	
	my $sql_where;
	
	# find ID_category LIKE *
	if ($env{'article_attrs.ID_category'}=~s/\*$//)
	{
		my $cat_sql=qq{
					SELECT
						ID_charindex
					FROM
						`$App::401::db_name`.a401_article_cat
					WHERE
						ID=$env{'article_attrs.ID_category'}
					LIMIT 1
		};
		$env{'article_attrs.ID_category'} = qq{
			SELECT
				ID
			FROM
				`$App::401::db_name`.a401_article_cat
			WHERE
				ID_charindex LIKE CONCAT(($cat_sql),"%") AND
				lng='$env{'article_content.lng'}' AND
				status IN ('$status_sql')
		};
	}
	
	
	$sql_where.="AND article.ID_category IN ($env{'article_attrs.ID_category'})"
		if $env{'article_attrs.ID_category'};
	
	if ($env{'sql_where'})
	{
		$sql_where.=" AND ".$env{'sql_where'};
	}
	
	my $sql=qq{
		SELECT
			*
		FROM
			`$env{'db_name'}`.a401_article_view AS article
		WHERE
			article.status IN ('$status_sql') AND
			article.lng='$env{'article_content.lng'}' AND
			article.mimetype='$env{'article_content.mimetype'}'
			$sql_where
		ORDER BY
			article.datetime_start DESC
		LIMIT $env{'sql_limit'}
	};
	
	#$XSGN{'TMP'}=$sql;
	#return 1;
	
	my %sth0=TOM::Database::SQL::execute($sql,'log'=>1,'slave'=>1);
	
	if(!$sth0{'sth'})
	{
		main::_log("SQL can't be executed",1);
	}
	
	if(!$sth0{'rows'})
	{
		main::_log("err: could not fetch articles");
	}
	
	main::_log("received ".$sth0{'rows'}." rows");
	
	# 'Cache' for author records
	my %tmp_authors;
	
	# Line counter
	my $item_counter=0;
	
	while (my %db0_line=$sth0{'sth'}->fetchhash())
	{
		$item_counter++;
		
		main::_log("article[$item_counter] article_attrs.name='$db0_line{'name'}'");
		
		my $item=
			$XSGN{'item.'.$item_counter}
			|| $XSGN{'item'};
		
		# fill raw data into $XSGN{'item'}
		$item=~s|<%db_(.*?)%>|$db0_line{$1}|g;
		
		
		my %author=App::301::authors::get_author($db0_line{'posix_author'});
		foreach(keys %author)
		{
			$item=~s|<%author_$_%>|$author{$_}|g;
		}
		
		my %editor=App::301::authors::get_author($db0_line{'posix_editor'});
		foreach(keys %editor)
		{
			$item=~s|<%editor_$_%>|$editor{$_}|g;
		}
		
		
		# process abstract
		my $p=new App::401::mimetypes::html;
		
		# img
		$p->{'ignore'}{'img'}=
			$env{'body.ignore.img'}
			|| $env{'ignore.img'}
			|| undef;
		
		$p->{'ignore'}{'img.1'}=
			$env{'abstract.ignore.img.1'}
			|| $env{'ignore.img.1'}
			|| undef;
		
		# a501_image
		$p->{'config'}->{'a501_image_file.ID_format'}=
			$env{'abstract.a501_image_file.ID_format'}
			|| $env{'a501_image_file.ID_format'}
			|| undef;
		$p->{'config'}->{'a501_image_file.ID_format.1'}=
			$env{'abstract.a501_image_file.ID_format.1'}
			|| $env{'a501_image_file.ID_format.1'}
			|| undef;
		$p->{'entity'}->{'a501_image'}=
			$XSGN{'abstract.a501_image'}
			|| $XSGN{'a501_image'}
			|| undef;
		$p->{'entity'}->{'a501_image.1'}=
			$XSGN{'abstract.a501_image.1'}
			|| $XSGN{'a501_image.1'}
			|| undef;
		
		# a510_video
		$p->{'entity'}{'a510_video_part'}=
			$XSGN{'abstract.a510_video_part'}
			|| $XSGN{'a510_video_part'}
			|| undef;
		
		$p->parse($db0_line{'abstract'});
		#$p->eof();
		my $abstract_html=$p->{'out'};
		$item=~s|<%abstract%>|$abstract_html|;
		
		# find alternate attributes (for thumbnail image for example)
		$p->parse($db0_line{'body'}) unless $p->{'out_tag'}->{'img.1'};
		
		$item=~s|<%out\.(.*?)%>|$p->{'out_var'}->{$1}|g;
		$item=~s|<#out\.(.*?)#>|$p->{'out_tag'}->{$1}|g;
		
		# Transforming datetime fields
		
		# FUJ!!! TOTO TU BYT NEMOZE, TO MUSI IST CEZ FUNKCIE. NECHUTNE
		foreach (keys %db0_line)
		{
			~/^datetime_/ && do
			{
				if ( ($item=~/<%dt_start/) && ($db0_line{$_} ne '0000-00-00 00:00') )
				{
# 					$db0_line{$_}=~/(....)-(..)-(..) (..):(..)/;
# 					my %tmp =
# 					{
# 						'year'	=> $1,
# 						'month'	=> $2,
# 						'day'		=> $3,
# 						'hour'	=> $4,
# 						'minute'	=> $5
# 					};
# 					$XSGN{NULL}=~s|<%dt_$_\_day%>|$env0{mday}|g;
# 					$XSGN{NULL}=~s|<%dt_$_\_day_name%>|$Utils::datetime::DAYS{$env{lng}}[$env0{wday}]|g;
# 					$XSGN{NULL}=~s|<%dt_$_\_day_name_en%>|$Utils::datetime::DAYS{en}[$env0{wday}]|g;
# 					$XSGN{NULL}=~s|<%dt_$_\_day_name_long%>|$Utils::datetime::DAYS_L{$env{lng}}[$env0{wday}]|g;
# 					
# 					$XSGN{NULL}=~s|<%dt_$_\_month%>|$env0{mom}|g;
# 					$XSGN{NULL}=~s|<%dt_$_\_month_name%>|$Utils::datetime::MONTHS{$env{lng}}[$env0{mom}-1]|g;
# 					$XSGN{NULL}=~s|<%dt_$_\_month_name_en%>|$Utils::datetime::MONTHS{en}[$env0{mom}-1]|g;
# 					$XSGN{NULL}=~s|<%dt_$_\_month_name_long%>|$Utils::datetime::MONTHS_L{$env{lng}}[$env0{mom}-1]|g;
# 					
# 					$XSGN{NULL}=~s|<%dt_$_\_year%>|$env0{year}|g;
# 					$XSGN{NULL}=~s|<%dt_$_\_hour%>|$env0{hour}|g;
# 					$XSGN{NULL}=~s|<%dt_$_\_minute%>|$env0{min}|g;
# 					$XSGN{NULL}=~s|<%dt_$_\_second%>|$env0{sec}|g;
				}
			}
		}
		
		
		# Processing db data
#		foreach (keys %env)
#		{
#			# Shortening to given length
#			~/^dp_(.*?)_cut$/ && do
#			{
#				my $tmp_data=$1;
#				if (length($db0_line{$tmp_data})>$env{$_})
#				{
#					$db0_line{$tmp_data}=substr($db0_line{$tmp_data}, 0, $env{$_});
#					$db0_line{$tmp_data}=~s|(.*) .*?$|$1&hellip;|;
#				}
#			}
#		}
		
		
# 		if ($env{'attachments_allow'})
# 		{
# 			my $attachments=App::160::SQL::get_relations
# 			(
# 				'l_prefix' => 'a400',
# 				'l_table' => '',
# 				'l_ID_entity' => $db_line{'ID'},
# 				#'r_db_name' => 'example_tld',
# 				'r_prefix' => 'a540',
# 				#'r_table' => 'file',
# 			);
# 			if ($attachments)
# 			{
# 				$XSGN{'NULL'}=~s|<%attachments%>|Y|g;
# 			}
# 			else
# 			{
# 				$XSGN{'NULL'}=~s|<%attachments%>|N|g;
# 			}
# 		}
		
		$item=~s|<%item_number%>|$item_counter|;
		
		$item=~s|<%name%>|$db0_line{'name'}|;
		
		if($XSGN{'TMP'}=~/<#item.$item_counter#>/)
		{
			$XSGN{'TMP'}=~s|<#item.$item_counter#>|$item|;
		}
		else
		{
			$XSGN{'TMP'}=~s|<#item#>|$item|;
		}
	}
	
	if(!$item_counter)
	{
		if($XSGN{'TMP_failure_no-data'})
		{
			$XSGN{'TMP'} = $XSGN{'TMP_failure_no-data'};
		}
	}
	
	return 1;
}


our $authors="open\@comsultia.com";

=head1 AUTHORS

Comsultia, Ltd. (open@comsultia.com)

=cut

1;
