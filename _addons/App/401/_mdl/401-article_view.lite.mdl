#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use encoding 'utf8';
use utf8;
use strict;



=head1 NAME

401-article_view.lite.mdl

=head1 DESCRIPTION

Lite view of article

=head1 DEPENDS

=over

=item *

L<App::401::_init|app/"401/_init.pm">

=back

=cut

use App::401::_init;



=head1 INPUTS

=over

=item *

B<db_name> - database name

=item *

B<article.ID> || B<ID> - ID of article

=item *

B<article.ID_entity> || B<ID_entity> - ID of article

=item *

B<article.ID_category> || B<ID_category> - category ID of article

=item *

B<article_attrs.status> - required status (default 'Y')

=item *

B<article_content.lng> - required language (default is current)

=item *

B<ignore.img> - ignore all img's in output (this output tag is not placed into document)

=item *

B<ignore.img.1> - ignores first img in output

=item *

B<body.ignore.img.1> - ignores first img in article_content.body output

=item *

B<a501_image.ID_format> - changes ID_format for all a501_image

=item *

B<a501_image.ID_format.1> - changes ID_format for first a501_image

=item *

B<body.a501_image.ID_format.1> - changes ID_format for first a501_image in article_content.body

=item *

B<gallery.thumbnail.ID_format> - changes ID_format for gallery images

=back

=cut



=head1 XSGN

=over

=item *

B<TMP> - article item

=item *

B<%db_*%> - article database variables

=item *

B<%out.img.1.*%> - first img variables

=item *

B<#out.img.1#> - first img entry

=item *

B<a501_image> - image item to replace

=item *

B<a501_image.1> - first image item to replace

=back

=cut



sub execute
{
	my %env=@_;
	Tomahawk::GetXSGN('-convertvars'=>1) || return undef;
	
	if ($Tomahawk::mdl_C{'-xlng_load'})
	{
		main::_log("using xlng transformation");
		Tomahawk::GetXLNG() || return undef; # retrieve language xml
		Tomahawk::XLNGtoXSGN(); # implement XLNG into XSGN
	}
	
	$env{'db_name'}=$App::401::db_name unless $env{'db_name'};
	
	$env{'article_content.lng'}=$env{'lng'} unless $env{'article_content.lng'};
	$env{'article_attrs.status'}='Y' unless $env{'article_attrs.status'};
		my $sql_status=join "','", split('',$env{'article_attrs.status'});
	
	$env{'article.ID'}=$env{'ID'} unless $env{'article.ID'};
	$env{'article.ID_entity'}=$env{'ID_entity'} unless $env{'article.ID_entity'};
	
	my $sql_where;
	
	# ID_entity
	$sql_where.="AND article.ID_entity=$env{'article.ID_entity'}"
		if $env{'article.ID_entity'};
	
	# ID
	$sql_where.="AND article.ID=$env{'article.ID'}"
		if $env{'article.ID'};
	
	# ID_category
	$sql_where.="AND article_attrs.ID_category IN ($env{'article_attrs.ID_category'})"
		if $env{'article_attrs.ID_category'};
	
	$env{'world_status'}="Y" unless $env{'world_status'};
	
	if ($env{'world_status'} eq 'Y')
	{
		$sql_where.=" AND (ACL_world.perm_R='Y' OR ACL_world.perm_R IS NULL) ";
	}
	else
	{
		$sql_where.=" AND ACL_world.perm_R='N' ";
	}
	
	my $sql=qq{
		SELECT
			article.ID_entity,
			article.ID,
			article.ID_entity AS ID_entity_article,
			article.ID AS ID_article,
			
			article_attrs.ID_category,
			article_cat.name AS ID_category_name,
			article_cat.name_url AS ID_category_name_url,
			
			article_ent.posix_owner,
			article_content.ID_editor AS posix_editor,
			article_ent.ID_author AS posix_author,
			
			article_content.datetime_create,
			DATE_FORMAT(article_attrs.datetime_start, '%Y-%m-%d %H:%i') AS datetime_start,
			DATE_FORMAT(article_attrs.datetime_stop, '%Y-%m-%d %H:%i') AS datetime_stop,
			
			article_attrs.priority_A,
			article_attrs.priority_B,
			article_attrs.priority_C,
			article_attrs.priority_D,
			article_attrs.priority_E,
			article_attrs.priority_F,
			
			article_attrs.name,
			article_attrs.name_url,
			article_content.subtitle,
			article_content.mimetype,
			article_content.abstract,
			article_content.body,
			article_content.keywords,
			article_content.lng,
			
			article_ent.visits,
			article_ent.rating_score,
			article_ent.rating_votes,
			(article_ent.rating_score/article_ent.rating_votes) AS rating,
			
			article_attrs.status
			
		FROM
			`$env{'db_name'}`.a401_article AS article
		LEFT JOIN `$env{'db_name'}`.a401_article_ent AS article_ent ON
		(
			article_ent.ID_entity = article.ID_entity
		)
		LEFT JOIN `$env{'db_name'}`.a401_article_attrs AS article_attrs ON
		(
			article_attrs.ID_entity = article.ID
		)
		LEFT JOIN `$env{'db_name'}`.a401_article_content AS article_content ON
		(
			article_content.ID_entity = article.ID_entity AND
			article_content.lng = article_attrs.lng
		)
		LEFT JOIN `$env{'db_name'}`.a401_article_cat AS article_cat ON
		(
			article_cat.ID = article_attrs.ID_category
		)
		LEFT JOIN `$env{'db_name'}`.a301_ACL_user_group AS ACL_world ON
		(
			ACL_world.ID_entity = 0 AND
			r_prefix = 'a401' AND
			r_table = 'article' AND
			r_ID_entity = article.ID_entity
		)
		WHERE
			article_content.lng='$env{'article_content.lng'}' AND
			article_attrs.status IN ('$sql_status')
			$sql_where
		LIMIT 1
	};
	
	
	my %sth0=TOM::Database::SQL::execute($sql,'quiet'=>1,'-slave'=>1);
	if (my %db0_line=$sth0{'sth'}->fetchhash())
	{
#		$XSGN{'TMP'}.="<!-- changed:$db0_line{'datetime_create'} -->";
		my %datetime=TOM::Utils::datetime::datetime_collapse($db0_line{'datetime_start'});
		$db0_line{'datetime_start.year'}=$datetime{'year'};
		$db0_line{'datetime_start.month'}=$datetime{'month'};
		$db0_line{'datetime_start.mday'}=$datetime{'mday'};
		$db0_line{'datetime_start.hour'}=$datetime{'hour'};
		$db0_line{'datetime_start.min'}=$datetime{'min'};
		$db0_line{'datetime_start.sec'}=$datetime{'sec'};
        
		$XSGN{'TMP'}=~s|<%db_(.*?)%>|$db0_line{$1}|g;
		
		my %author=App::301::authors::get_author($db0_line{'posix_author'});
		$XSGN{'TMP'}=~s|<%author_(.*?)%>|$author{$1}|g;
		my %editor=App::301::authors::get_author($db0_line{'posix_editor'});
		$XSGN{'TMP'}=~s|<%editor_(.*?)%>|$editor{$1}|g;
		# process body
		
		foreach my $part('body','abstract')
		{
			
			my $p=new App::401::mimetypes::html;
			
			# img
			$p->{'ignore'}{'img'}=
				$env{$part.'.ignore.img'}
				|| $env{'ignore.img'}
				|| undef;
			
			$p->{'ignore'}{'img.1'}=
				$env{$part.'.ignore.img.1'}
				|| $env{'ignore.img.1'}
				|| undef;
			
			if ($XSGN{'a030_youtube'})
			{
				main::_log("a030_youtube defined",undef,"debug");
			}
			else
			{
				main::_log("a030_youtube not defined",undef,"debug");
			}
			
			# a030_youtube
			$p->{'entity'}{'a030_youtube'}=
				$XSGN{'body.a030_youtube'}
				|| $XSGN{'a030_youtube'}
				|| undef;
				
			$p->{'entity'}{'a030_youtube.1'}=
				$XSGN{'body.a030_youtube.1'}
				|| $XSGN{'a030_youtube.1'}
				|| undef;
			
			# a501_image
			$p->{'config'}->{'a501_image_file.ID_format'}=
				$env{'body.a501_image_file.ID_format'}
				|| $env{'a501_image_file.ID_format'}
				|| undef;
			$p->{'config'}->{'a501_image_file.ID_format.1'}=
				$env{'body.a501_image_file.ID_format.1'}
				|| $env{'a501_image_file.ID_format.1'}
				|| undef;
			$p->{'entity'}->{'a501_image'}=
				$XSGN{'body.a501_image'}
				|| $XSGN{'a501_image'}
				|| undef;
			$p->{'entity'}->{'a501_image.1'}=
				$XSGN{'body.a501_image.1'}
				|| $XSGN{'a501_image.1'}
				|| undef;
			
			# a510_video
			$p->{'entity'}{'a510_video'}=
				$XSGN{'body.a510_video'}
				|| $XSGN{'a510_video'}
				|| undef;
			$p->{'entity'}{'a510_video.1'}=
				$XSGN{'body.a510_video.1'}
				|| $XSGN{'a510_video.1'}
				|| undef;
			
			# a510_video_part
			$p->{'entity'}{'a510_video_part'}=
				$XSGN{'body.a510_video_part'}
				|| $XSGN{'a510_video_part'}
				|| undef;
			$p->{'entity'}{'a510_video_part.1'}=
				$XSGN{'body.a510_video_part.1'}
				|| $XSGN{'a510_video_part.1'}
				|| undef;
			
			# a010
			foreach (keys %XSGN){if ($_=~/^a010/){$p->{'entity'}{$_}=$XSGN{$_};}}
			
			# PARSE !!!
			$p->parse($db0_line{$part});
			$p->eof();
			my $part_html=$p->{'out'};
			
			if ($env{'ad'} && $part eq "body"){$part_html=~s|^(.{400,}?)<br>|$1<br><!TMP-a401-BANNER!><br>|s;}
			
			$XSGN{'TMP'}=~s|<%$part%>|$part_html|;
			
			$XSGN{'TMP'}=~s|<%out\.(.*?)%>|$p->{'out_var'}->{$1}|g;
			$XSGN{'TMP'}=~s|<#out\.(.*?)#>|$p->{'out_tag'}->{$1}|g;
			
		}
		
		
		# check if here is a related image gallery
		my $i;
		foreach my $relation(App::160::SQL::get_relations(
			'db_name' => $App::401::db_name,
			'l_prefix' => 'a401',
			'l_table' => 'article',
			'l_ID_entity' => $db0_line{'ID_entity_article'},
			#'rel_type' => 'gallery',
			'r_prefix' => "a501",
			'r_table' => "image",
			'status' => "Y"
			))
		{
			$i++;
			
			my $item=$XSGN{'a501.gallery.'.$i} || $XSGN{'a501.gallery'};
			
			my $sql=qq{
				SELECT
					*
				FROM
					`$App::501::db_name`.a501_image_view
				WHERE
					ID_entity_image=$relation->{'r_ID_entity'} AND
					ID_format=$App::501::image_format_fullsize_ID AND
					status IN ('Y','L')
				LIMIT 1
			};
			my %sth1=TOM::Database::SQL::execute($sql,'log'=>1,'-slave'=>1,'-cache'=>60);
			if (my %db1_line=$sth1{'sth'}->fetchhash()){$item=~s|<%image.db_(.*?)%>|$db1_line{$1}|g;}
			my $ID_format=$env{'gallery.thumbnail.ID_format'} || $App::501::image_format_thumbnail_ID;
			my $sql=qq{
				SELECT
					*
				FROM
					`$App::501::db_name`.a501_image_view
				WHERE
					ID_entity_image=$relation->{'r_ID_entity'} AND
					ID_format=$ID_format AND
					status IN ('Y','L')
				LIMIT 1
			};
			my %sth1=TOM::Database::SQL::execute($sql,'log'=>1,'-slave'=>1,'-cache'=>60);
			if (my %db1_line=$sth1{'sth'}->fetchhash()){$item=~s|<%image.thumbnail.db_(.*?)%>|$db1_line{$1}|g;}
			
			if ($XSGN{'TMP'}=~s|<#a501.gallery.$i#>|$item|)
			{
				
			}
			else
			{
				$XSGN{'TMP'}=~s|<#a501.gallery#>|$item|;
			}
			
#			$XSGN{'TMP'}=~s|<#a501.gallery#>|$item|g if $XSGN{'TMP'}=~/<#a501.gallery#>/;
			
#			if ($XSGN{'TMP'}=~/<#a501.gallery.#>/)
#			{
#			}
		}
		
		
		
		$XSGN{'TMP'}=~s|<%article\.db_(.*?)%>|$db0_line{$1}|g;
		
#		$main::H->add_DOC_title($db0_line{'name'});
		
		
	}
	
	return 1;
}


our $authors="open\@comsultia.com";

=head1 AUTHORS

Comsultia, Ltd. (open@comsultia.com)

=cut

1;
