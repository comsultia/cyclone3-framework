#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8;
use strict;



=head1 NAME

401-article_view.lite.mdl

=head1 DESCRIPTION

Lite view of article

=head1 DEPENDS

=over

=item *

L<App::401::_init|app/"401/_init.pm">

=back

=cut

use App::401::_init;
use App::020::_init;
use App::160::_init;
use TOM::Text::format;
use Ext::TextHyphen::_init;

=head1 INPUTS

=over

=item *

B<db_name> - database name

=item *

B<article.ID> || B<ID> - ID of article

=item *

B<article.ID_entity> || B<ID_entity> - ID of article

=item *

B<article.ID_category> || B<ID_category> - category ID of article

=item *

B<article_attrs.status> - required status (default 'Y')

=item *

B<article_content.lng> - required language (default is current)

=item *

B<ignore.img> - ignore all img's in output (this output tag is not placed into document)

=item *

B<ignore.img.1> - ignores first img in output

=item *

B<body.ignore.img.1> - ignores first img in article_content.body output

=item *

B<a501_image.ID_format> - changes ID_format for all a501_image

=item *

B<a501_image.ID_format.1> - changes ID_format for first a501_image

=item *

B<body.a501_image.ID_format.1> - changes ID_format for first a501_image in article_content.body

=item *

B<gallery.thumbnail.ID_format> - changes ID_format for gallery images

=back

=cut



=head1 XSGN

=over

=item *

B<TMP> - article item

=item *

B<%db_*%> - article database variables

=item *

B<%out.img.1.*%> - first img variables

=item *

B<#out.img.1#> - first img entry

=item *

B<a501_image> - image item to replace

=item *

B<a501_image.1> - first image item to replace

=back

=cut



sub execute
{
	my %env=@_;
	my %env_out;
	Tomahawk::GetXSGN('-convertvars'=>1) || return undef;
	
	if ($Tomahawk::mdl_C{'-xlng_load'})
	{
		main::_log("using xlng transformation");
		Tomahawk::GetXLNG() || return undef; # retrieve language xml
		Tomahawk::XLNGtoXSGN(); # implement XLNG into XSGN
	}
	
	$env{'db_name'}=$App::401::db_name unless $env{'db_name'};
	
	$env{'sql_limit'}='1' unless $env{'sql_limit'};
	
	$env{'article_content.lng'}=$env{'lng'} unless $env{'article_content.lng'};
	$env{'article_attrs.status'}='Y' unless $env{'article_attrs.status'};
		my $sql_status=join "','", split('',$env{'article_attrs.status'});
	
	$env{'article.ID'}=$env{'ID'} unless $env{'article.ID'};
	$env{'article.ID_entity'}=$env{'ID_entity'} unless $env{'article.ID_entity'};
	
	my $sql_where;
	
	# ID_entity
	$sql_where.=" AND article.ID_entity=$env{'article.ID_entity'}"
		if $env{'article.ID_entity'};
	
	# ID
	$sql_where.=" AND article.ID=$env{'article.ID'}"
		if $env{'article.ID'};
	
	# ID_category
	$sql_where.=" AND article_attrs.ID_category IN ($env{'article_attrs.ID_category'})"
		if $env{'article_attrs.ID_category'};
	
	# article_content.status
	$env{'article_content.status'}='Y' unless exists $env{'article_content.status'};
	$sql_where.=" AND article_content.status = '$env{'article_content.status'}' "
		if $env{'article_content.status'};
	
	$env{'world_status'}="Y" unless $env{'world_status'};
	
	if ($env{'world_status'} eq 'Y')
	{
		$sql_where.=" AND (ACL_world.perm_R='Y' OR ACL_world.perm_R IS NULL) ";
	}
	elsif ($env{'world_status'} eq 'YN')
	{
		
	}
	else
	{
		$sql_where.=" AND ACL_world.perm_R='N' ";
	}
	
	my $sql_order="article.ID_entity DESC";
		$sql_order=$env{'sql_order'} if $env{'sql_order'};
		$sql_order=$env{'sql_order_by'} if $env{'sql_order_by'};
	
	my %hyphen;
	if ($env{'hyphen'})
	{
		foreach(split('[,;]',$env{'hyphen'}))
		{
			$hyphen{$_}=1;
		}
	}
	
#	$XSGN{'TMP'}="hyphen=$env{'hyphen'}";return 1;
	
	my $sql=qq{
		SELECT
			article.ID_entity,
			article.ID,
			article.ID_entity AS ID_entity_article,
			article.ID AS ID_article,
			
			article_attrs.ID_category,
			article_cat.name AS category_name,
			article_cat.name_url AS category_name_url,
			
			article_ent.posix_owner,
			article_content.ID_editor AS posix_editor,
			article_ent.ID_author AS posix_author,
			
			article_content.datetime_create,
			DATE_FORMAT(article_attrs.datetime_start, '%Y-%m-%d %H:%i') AS datetime_start,
			DATE_FORMAT(article_attrs.datetime_stop, '%Y-%m-%d %H:%i') AS datetime_stop,
			
			article_content.datetime_modified,
			
			article_attrs.priority_A,
			article_attrs.priority_B,
			article_attrs.priority_C,
			article_attrs.priority_D,
			article_attrs.priority_E,
			article_attrs.priority_F,
			
			article_attrs.name,
			article_attrs.name_url,
			article_attrs.name_hyphens,
			article_attrs.alias_url,
			article_content.version,
			article_content.subtitle,
			article_content.subtitle_hyphens,
			article_content.mimetype,
			article_content.abstract,
			article_content.abstract_hyphens,
			article_content.body,
			article_content.body_hyphens,
			article_content.keywords,
			article_content.lng,
			
			article_ent.visits,
			article_ent.rating_score,
			article_ent.rating_votes,
			IF(
				round((`article_ent`.rating_score / `article_ent`.rating_votes),2),
				round((`article_ent`.rating_score / `article_ent`.rating_votes),2), '0.00'
			) as rating,
			article_ent.sources,
			article_ent.metadata,
			article_ent.published_mark,
			
			article_attrs.status
			
		FROM
			`$env{'db_name'}`.a401_article AS article
		LEFT JOIN `$env{'db_name'}`.a401_article_ent AS article_ent ON
		(
			article_ent.ID_entity = article.ID_entity
		)
		LEFT JOIN `$env{'db_name'}`.a401_article_attrs AS article_attrs ON
		(
			article_attrs.ID_entity = article.ID
		)
		LEFT JOIN `$env{'db_name'}`.a401_article_content AS article_content ON
		(
			article_content.ID_entity = article.ID_entity AND
			article_content.lng = article_attrs.lng
		)
		LEFT JOIN `$env{'db_name'}`.a401_article_cat AS article_cat ON
		(
			article_cat.ID = article_attrs.ID_category
		)
		LEFT JOIN `$env{'db_name'}`.a301_ACL_user_group AS ACL_world ON
		(
			ACL_world.ID_entity = 0 AND
			r_prefix = 'a401' AND
			r_table = 'article' AND
			r_ID_entity = article.ID_entity
		)
		WHERE
			article_content.lng='$env{'article_content.lng'}' AND
			article_attrs.status IN ('$sql_status')
			$sql_where
		ORDER BY
			$sql_order
		LIMIT
			$env{'sql_limit'}
	};
	
	
	my %sth0=TOM::Database::SQL::execute($sql,'quiet'=>1,'-slave'=>1);
	if (my %db0_line=$sth0{'sth'}->fetchhash())
	{
		
		# this cache is unique for this used entities
		push @{$env_out{'entity'}},{
			'db_h' => 'main',
			'db_name' => $App::401::db_name,
			'tb_name' => 'a401_article',
			'ID_entity' => $db0_line{'ID_entity'},
		};
		
		my $cache_visits=$Ext::CacheMemcache::cache->get(
			'namespace' => $App::401::db_name.".a401_article_ent.visit",
			'key' => $db0_line{'ID_entity_article'}
		);
		$db0_line{'visits'}+=$cache_visits->{'visits'} if $cache_visits->{'visits'};
		
		if ($db0_line{'version'}) # this content is versioned
		{
			$XSGN{'TMP'}=~s|<#versioned#>|$XSGN{'versioned'}|g;
		}
		else
		{
			$XSGN{'TMP'}=~s|<#unversioned#>|$XSGN{'unversioned'}|g;
		}
		
		if ($db0_line{'datetime_modified'}) # this content was modified
		{
			$XSGN{'TMP'}=~s|<#modified#>|$XSGN{'modified'}|g;
		}
		else
		{
			$XSGN{'TMP'}=~s|<#unmodified#>|$XSGN{'unmodified'}|g;
		}
		
		# size of article body in 
#		my $size_root_square=int(sqrt(length($db0_line{'body'})));
		my $size_root_square=int(length(TOM::Text::format::xml2plain($db0_line{'body'}))/512);
		$XSGN{'TMP'}=~s|<%size_sqrt%>|$size_root_square|g;
		
#		$XSGN{'TMP'}.="<!-- changed:$db0_line{'datetime_create'} -->";
		my %datetime=TOM::Utils::datetime::datetime_collapse($db0_line{'datetime_start'});
		$db0_line{'datetime_start.year'}=$datetime{'year'};
		$db0_line{'datetime_start.month'}=$datetime{'month'};
		$db0_line{'datetime_start.mday'}=$datetime{'mday'};
		$db0_line{'datetime_start.hour'}=$datetime{'hour'};
		$db0_line{'datetime_start.min'}=$datetime{'min'};
		$db0_line{'datetime_start.sec'}=$datetime{'sec'};
		
		
		use DateTime;
		my $dt = DateTime->now();
		my $dt_to = DateTime->new(
			'year' => $datetime{'year'},
			'month' => $datetime{'month'},
			'day' => $datetime{'mday'},
		);
		my $dt_dur=$dt_to-$dt;
		my $dur_string;
		
		if ($dt_dur->years() >= 2)
		{$dur_string.=$Utils::datetime::PUBLISHED{$env{'lng'}}[0]." ".$dt_dur->years()." ".$Utils::datetime::PUBLISHED{$env{'lng'}}[13];}
		elsif ($dt_dur->years() >= 1)
		{$dur_string.=$Utils::datetime::PUBLISHED{$env{'lng'}}[0]." ".$Utils::datetime::PUBLISHED{$env{'lng'}}[12];}
		else
		{
			if ($dt_dur->months() >= 2)
			{$dur_string.=$Utils::datetime::PUBLISHED{$env{'lng'}}[0]." ".$dt_dur->months()." ".$Utils::datetime::PUBLISHED{$env{'lng'}}[11];}
			elsif ($dt_dur->months() >= 1)
			{$dur_string.=$Utils::datetime::PUBLISHED{$env{'lng'}}[0]." ".$Utils::datetime::PUBLISHED{$env{'lng'}}[10];}
			else
			{
				if ($dt_dur->weeks() >= 2)
				{$dur_string.=$Utils::datetime::PUBLISHED{$env{'lng'}}[0]." ".$dt_dur->weeks()." ".$Utils::datetime::PUBLISHED{$env{'lng'}}[9];}
				elsif ($dt_dur->weeks() >= 1)
				{$dur_string.=$Utils::datetime::PUBLISHED{$env{'lng'}}[0]." ".$Utils::datetime::PUBLISHED{$env{'lng'}}[8];}
				else
				{
					if ($dt_dur->days() >= 2)
					{$dur_string.=$Utils::datetime::PUBLISHED{$env{'lng'}}[0]." ".$dt_dur->days()." ".$Utils::datetime::PUBLISHED{$env{'lng'}}[7];}
					elsif ($dt_dur->days() >= 1)
					{$dur_string.=$Utils::datetime::PUBLISHED{$env{'lng'}}[0]." ".$dt_dur->days()." ".$Utils::datetime::PUBLISHED{$env{'lng'}}[6];}
					else
					{
						if ($dt_dur->hours() >= 1)
						{$dur_string.=$Utils::datetime::PUBLISHED{$env{'lng'}}[2];}
						else
						{
							$dur_string.=$Utils::datetime::PUBLISHED{$env{'lng'}}[1];
						}
					}
				}
			}
		}
		
		$XSGN{'TMP'}=~s|<%published%>|$dur_string|g;
		
		my %datetime=TOM::Utils::datetime::datetime_collapse($db0_line{'datetime_create'});
		$db0_line{'datetime_create.year'}=$datetime{'year'};
		$db0_line{'datetime_create.month'}=$datetime{'month'};
		$db0_line{'datetime_create.mday'}=$datetime{'mday'};
		$db0_line{'datetime_create.hour'}=$datetime{'hour'};
		$db0_line{'datetime_create.min'}=$datetime{'min'};
		$db0_line{'datetime_create.sec'}=$datetime{'sec'};
		
		if($db0_line{'datetime_modified'})
		{
			%datetime=TOM::Utils::datetime::datetime_collapse($db0_line{'datetime_modified'});
			$db0_line{'datetime_modified.year'}=$datetime{'year'};
			$db0_line{'datetime_modified.month'}=$datetime{'month'};
			$db0_line{'datetime_modified.mday'}=$datetime{'mday'};
			$db0_line{'datetime_modified.hour'}=$datetime{'hour'};
			$db0_line{'datetime_modified.min'}=$datetime{'min'};
			$db0_line{'datetime_modified.sec'}=$datetime{'sec'};
		}
		
		my $rating5=int($db0_line{'rating'}/20);
			$rating5=3 if $db0_line{'rating_votes'} < 5;
		$XSGN{'TMP'}=~s|<%rating5%>|$rating5|g;
		my $rating55=int($db0_line{'rating'}/20*2)/2;
#			$rating55=2.5 if $db0_line{'rating_votes'} < 5;
			$rating55=0 if $db0_line{'rating_votes'} < 5;
		$XSGN{'TMP'}=~s|<%rating55%>|$rating55|g;
		
		# hyphen
		foreach (keys %hyphen)
		{
			if ($db0_line{$_} && $db0_line{$_.'_hyphens'})
			{
				$db0_line{$_}=Ext::TextHyphen::add_hyphens($db0_line{$_},split(',',$db0_line{$_.'_hyphens'}));
			}
		}
		
		if($db0_line{'subtitle'}){
			$XSGN{'TMP'}=~s|<#subtitle#>|$XSGN{'subtitle'}|g;
		}
		
		$XSGN{'TMP'}=~s|<%db_(.*?)%>|$db0_line{$1}|g;
		
		my $ID_category=$db0_line{'ID_category'};
		my $alias_url;
		my %data=App::020::SQL::functions::get_ID(
			'ID' => $ID_category,
			'db_h' => 'main',
			'db_name' => $env{'db_name'},
			'tb_name' => 'a401_article_cat',
			'columns' => {'*' => 1},
			'-cache' => 3600,
			'-slave' => 1,
		);
		$alias_url=$data{'alias_url'} if $data{'alias_url'};
		while ($ID_category && !$alias_url)
		{
			my %data=App::020::SQL::functions::tree::get_parent_ID(
				'ID' => $ID_category,
				'db_h' => 'main',
				'db_name' => $env{'db_name'},
				'tb_name' => 'a401_article_cat',
				'columns' => {'*' => 1},
				'-cache' => 3600,
				'-slave' => 1,
			);
			$ID_category=$data{'ID'};
			if ($data{'alias_url'}){$alias_url=$data{'alias_url'};last;}
		}
		$XSGN{'TMP'}=~s|<%alias_url%>|$alias_url|g if $alias_url;
		$XSGN{'TMP'}=~s|<%alias_url%>|$tom::H_www|g unless $alias_url;
		$XSGN{'TMP'}=~s|<%alias_url_db%>|$alias_url|g;
		
			# replace metadata
			my %metadata=App::020::functions::metadata::parse($db0_line{'metadata'});
			foreach my $sec(keys %metadata)
			{
				foreach (keys %{$metadata{$sec}})
				{
					$XSGN{'TMP'}=~s/<%$sec\::$_%>/$metadata{$sec}{$_}/g;
				}
			}
			my $keys;
			foreach my $sec(keys %metadata)
			{
#				my $null_section=$XSGN{'metadata_section'};
#				$null_section=~s|<%name%>|$sec|g;
				foreach (keys %{$metadata{$sec}})
				{
					$keys++;
#					my $null=$XSGN{'metadata_variable'};
#					$null=~s|<%variable%>|$_|g;
#					$null=~s|<%value%>|$metadata{$sec}{$_}|g;
#					$null_section=~s|<#metadata_variable#>|$null|;
				}
				
#				$XSGN{'metadata'}=~s|<#metadata_section#>|$null_section|;
			}
#			$XSGN{'TMP'}=~s|<#metadata#>|$XSGN{'metadata'}| if $keys;
		
		# primary author
		my %author=App::301::authors::get_author($db0_line{'posix_author'});
		$XSGN{'TMP'}=~s|<%author_(.*?)%>|$author{$1}|g;
		# secondary authors
		if ($XSGN{'TMP'}=~/<#authorgroup#>/)
		{
			my @ACL=App::301::perm::get_ACL(
				'r_prefix' => 'a401',
				'r_table' => 'article',
				'r_ID_entity' => $db0_line{'ID_entity'},
				'role' => 'author'
			);
			foreach my $acl_item (@ACL)
			{
				if ($acl_item->{'ID'} && !$acl_item->{'folder'})
				{
					my $authorgroup_item=$XSGN{'authorgroup_item'};
					my %author=App::301::authors::get_author($acl_item->{'ID'});
					$authorgroup_item=~s|<%author_(.*?)%>|$author{$1}|g;
					$XSGN{'TMP'}=~s|<#authorgroup#>|$authorgroup_item|;
				}
			}
		}
		
		my %editor=App::301::authors::get_author($db0_line{'posix_editor'});
		$XSGN{'TMP'}=~s|<%editor_(.*?)%>|$editor{$1}|g;
		# process body
		
		my $og_image_set;
		foreach my $part('body','abstract')
		{
			
			my $p=new App::401::mimetypes::html;
			
			$p->config('name'=>$part,'env'=>\%env,'entity'=>\%XSGN);
			
			#removing unwanted paging
			if($part eq 'body')
			{
				$db0_line{$part}=~s|<hr>||g;
			}
			
			# PARSE !!!
			$p->parse($db0_line{$part});
			$p->eof();
			my $part_html=$p->{'out'};
			
			if ($env{'ad'} && $part eq "body"){$part_html=~s|^(.{400,}?)<br>|$1<br><!TMP-a401-BANNER!><br>|s;}
			
			if ($p->{'out_var'}->{'img.1.src'} && !$og_image_set)
			{
				push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:image','content'=>$p->{'out_var'}->{'img.1.src'}};
				
				if ($p->{'out_addon'}->{'a510_video_part'}[1]{'video.ID_entity'} && $XSGN{'og:video'})
				{
					$XSGN{'og:video'}=~s|<%video\.ID_entity%>|$p->{'out_addon'}->{'a510_video_part'}[1]{'video.ID_entity'}|g;
					
					push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:video','content'=>$XSGN{'og:video'}};
					
					push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:video:type','content'=>"application/x-shockwave-flash"};
					
					push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:video:width','content'=>"430"};
					push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:video:height','content'=>"280"};
					
				}
				$og_image_set=1;
			}
			
#			main::_log('---'.$part_html.'---');
			
			if($part_html ne '' && $part_html ne "<p>&nbsp;</p>")
			{
				$XSGN{'TMP'}=~s|<#$part#>|$XSGN{$part}|g if $XSGN{$part};
			}
			
			$XSGN{'TMP'}=~s|<%$part%>|$part_html|;
			$XSGN{'TMP'}=~s|<%$part\_plain%>|TOM::Text::format::xml2plain($part_html)|ge;
			
			#$XSGN{'TMP'}=~s|<%$part\.out\.(.*?)%>|$p->{'out_var'}->{$1}|g;
			$XSGN{'TMP'}=~s|<#$part\.out\.(.*?)#>|$p->{'out_tag'}->{$1}|g;
			
			$XSGN{'TMP'}=~s|<%out\.(.*?)%>|$p->{'out_var'}->{$1}|g;
			$XSGN{'TMP'}=~s|<#out\.(.*?)#>|$p->{'out_tag'}->{$1}|g;
			
		}
		
		
		# check if here is a related image gallery
		my $i;
		foreach my $relation(App::160::SQL::get_relations(
			'db_name' => $App::401::db_name,
			'l_prefix' => 'a401',
			'l_table' => 'article',
			'l_ID_entity' => $db0_line{'ID_entity_article'},
			'rel_type' => 'gallery',
			'r_prefix' => "a501",
			'r_table' => "image",
			'status' => "Y",
			))
		{
			$i++;
			
			if ($i==1 && $XSGN{'a501.gallery.box'})
			{
				$XSGN{'TMP'}=~s|<#a501\.gallery#>|$XSGN{'a501.gallery.box'}|g;
			}
			
			next unless $relation->{'r_ID_entity'};
			
			my $item=$XSGN{'a501.gallery.'.$i} || $XSGN{'a501.gallery'};
			
			if (my %db1_line=App::501::functions::get_image_file
				(
					'image.ID_entity' => $relation->{'r_ID_entity'},
					'image_file.ID_format' => $App::501::image_format_fullsize_ID,
					'image_attrs.lng' => $env{'lng'}
				)
			)
			{
				$item=~s|<%image\.db_(.*?)%>|$db1_line{$1}|g;
			}
			
			my $ID_format=$env{'gallery.thumbnail.ID_format'} || $App::501::image_format_thumbnail_ID;
			if (my %db1_line=App::501::functions::get_image_file
				(
					'image.ID_entity' => $relation->{'r_ID_entity'},
					'image_file.ID_format' => $ID_format,
					'image_attrs.lng' => $env{'lng'}
				)
			)
			{
				$item=~s|<%image\.thumbnail\.db_(.*?)%>|$db1_line{$1}|g;
			}
			
			if ($XSGN{'TMP'}=~s|<#a501\.gallery\.$i#>|$item|)
			{
				
			}
			else
			{
				$XSGN{'TMP'}=~s|<#a501\.gallery#>|$item|;
			}
			
		}
		
		# check author
		if ($author{'ID_user'} && $XSGN{'author'})
		{
			#&& length($author{'about_me'})>20
			# get author text
			my $sql=qq{
				SELECT
					description
				FROM
					`$App::301::db_name`.a301_contact_lng
				WHERE
					ID_entity=? AND
					lng=?
			};
			my %sth_author=TOM::Database::SQL::execute($sql, 'bind' => [$author{'ID_user'},$db0_line{'lng'}]);
			my %dbauthor_line=$sth_author{'sth'}->fetchhash();
			$author{'about_me'}=$dbauthor_line{'description'};
			
			# get author avatar
			if (my $relation=(App::160::SQL::get_relations(
				'db_name' => $App::301::db_name,
				'l_prefix' => 'a301',
				'l_table' => 'user',
				'l_ID_entity' => $author{'ID_user'},
				'rel_type' => 'avatar',
				'r_prefix' => "a501",
				'r_table' => "image",
				'status' => "Y",
				'limit' => 1
			))[0])
			{
				if (my %image=App::501::functions::get_image_file
					(
						'image.ID_entity' => $relation->{'r_ID_entity'},
						'image_file.ID_format' => $App::501::image_format_thumbnail_ID,
						'video_attrs.lng' => $env{'lng'}
					)
				)
				{
					$XSGN{'author'}=~s|<%avatar\.db_(.*?)%>|$image{$1}|g;
				}
			}
			$author{'about_me'}=(split('<hr/?>',$author{'about_me'}))[0];
			$XSGN{'author'}=~s|<%(.*?)%>|$author{$1}|g;
			$XSGN{'TMP'}=~s|<#author#>|$XSGN{'author'}|g;
			
#			return undef;
			
		}
		
		if ($db0_line{'sources'} && $XSGN{'sources'})
		{
			$XSGN{'sources'}=~s|<%sources%>|$db0_line{'sources'}|g;
			$XSGN{'TMP'}=~s|<#sources#>|$XSGN{'sources'}|g;
		}
		
		$XSGN{'TMP'}=~s|<%article\.db_(.*?)%>|$db0_line{$1}|g;
		
		
		
	}
	else
	{
		$XSGN{'TMP.empty'}=$XSGN{'TMP_failure_no-data'} if $XSGN{'TMP_failure_no-data'};
		if(exists $XSGN{'TMP.empty'})
		{
			$XSGN{'TMP'}=$XSGN{'TMP.empty'};
		}
	}
	
	return 1,%env_out;
}


our $authors="open\@comsultia.com";

=head1 AUTHORS

Comsultia, Ltd. (open@comsultia.com)

=cut

1;
