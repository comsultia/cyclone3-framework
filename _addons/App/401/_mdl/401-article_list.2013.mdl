#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8;
use strict;


use App::210::_init;
use App::401::_init;
use Ext::Elastic::_init;
use Ext::Solr::_init;

sub execute
{
	my %env=@_;
	my %env_out;
	
#	$env{'check_video_part_file'} = 1 unless exists $env{'check_video_part_file'};
#	$env{'video_format.ID_entity'} = $App::510::video_format_full_ID unless $env{'video_format.ID_entity'};
	
	$env{'article_attrs.status'}='Y' unless $env{'article_attrs.status'};
		my $sql_article_attrs_status=join "','", split('',$env{'article_attrs.status'});
	
	$env{'datetime_mode'}="present" unless $env{'datetime_mode'};
	
	$env{'default.page_limit'} = 10 unless $env{'default.page_limit'};

	# paging
	$env{'page_limit'} = $env{'default.page_limit'} unless $env{'page_limit'};
	$env{'page'} = 1 unless $env{'page'}=~/^[0-9]*?$/;$env{'page'} = 1 if $env{'page'} < 1;
#	$env{'page'} = 1 unless $env{'page'};
	$env{'page_offset'} = 0 unless $env{'page_offset'};
	$env{'page_plus'} = 1 unless $env{'page_plus'};
	if (!$env{'sql_limit'})
	{
		$env{'sql_limit'}=((($env{'page'}-1)*$env{'page_limit'})+$env{'page_offset'}).",".($env{'page_limit'}+$env{'page_plus'});
	}
	else
	{
#		$env{'sql_limit'}=~/^(\d+),?(\d+)?$/;
	}
	
	
	my @sql_bind;
	my $sql_where;
	my $sql_where_cat;
	my @sql_bind_firsttry;
	my $sql_where_firsttry;
	
	my $sql_changetime;
	my $sql_limit=$env{'sql_limit'} || 10;
	my $sql_order_by=$env{'sql_order_by'} || 'article_attrs.datetime_start DESC';
	my $sql_group_by;
	my $sql_column;
	my $sql_join;
	my $elastic;
	
	if ($sql_order_by=~s|:visits_(.*?):|:VISITS:|)
	{
		my $dur=$1;
		my $sql_visits=qq{(SELECT COUNT(ID_article) FROM `$App::401::db_name`.a401_article_visit AS visit WHERE visit.ID_article=article.ID_entity AND datetime_event >= DATE_SUB(NOW(),INTERVAL $dur))};
		$sql_order_by=~s|:VISITS:|$sql_visits|;
		$sql_column.=",$sql_visits AS order_by_visits ";
	}
	
	if ($env{'unique'})
	{
#		$sql_group_by="article_ent.ID_entity";
	}
	
	if ($env{'datetime_mode'} eq "present")
	{
		$sql_where.=" AND article_attrs.datetime_start <= NOW()";
		$sql_where.=" AND (article_attrs.datetime_stop IS NULL OR article_attrs.datetime_stop >= NOW())";
		if ($env{'datetime_interval'})
		{
			$sql_where_firsttry.=" AND article_attrs.datetime_start >= DATE_SUB(NOW(),INTERVAL $env{'datetime_interval'})";
		}
	}
	
	if ($env{'article_cat.ID_entity'})
	{
		my $sql_cat;
		foreach my $ID_category (split(';',$env{'article_cat.ID_entity'}))
		{
			next unless $ID_category;
			if ($ID_category=~s/\*$//)
			{
				my $cat_sql=qq{SELECT ID_charindex FROM `$App::401::db_name`.a401_article_cat WHERE ID_entity=$ID_category AND lng='$env{'lng'}' AND status IN ('Y','L') LIMIT 1};
#				$sql_cat.=qq{ OR article_cat.ID_charindex LIKE CONCAT(($cat_sql),"%")};
				$sql_cat.=qq{ OR article_attrs.ID_category IN (SELECT ID FROM `$App::401::db_name`.a401_article_cat WHERE ID_charindex LIKE CONCAT(($cat_sql),"%"))};
			}
			else
			{
				my $cat_sql=qq{SELECT ID FROM `$App::401::db_name`.a401_article_cat WHERE ID_entity=$ID_category AND lng='$env{'lng'}'};
#				$sql_cat.=" OR article_cat.ID_entity=$ID_category";
				$sql_cat.=" OR article_attrs.ID_category IN ($cat_sql)";
				push @{$env_out{'entity'}},{
					'db_h' => 'main',
					'db_name' => $App::401::db_name,
					'tb_name' => 'a401_article_cat',
					'ID_entity' => $ID_category,
				};
			}
			$sql_cat=~s/^ OR //;
		}
		if ($sql_cat)
		{
			$sql_where.=" AND (".$sql_cat.") ";
		}
	}
	elsif ($env{'article_cat.ID'})
	{
		my $sql_cat;
		foreach my $ID_category (split(';',$env{'article_cat.ID'}))
		{
			next unless $ID_category;
			if ($ID_category=~s/\*$//)
			{
				my $cat_sql=qq{SELECT ID_charindex FROM `$App::401::db_name`.a401_article_cat WHERE ID=$ID_category AND status IN ('Y','L') LIMIT 1};
#				$sql_cat.=qq{ OR article_cat.ID_charindex LIKE CONCAT(($cat_sql),"%")};
				$sql_cat.=qq{ OR article_attrs.ID_category IN (SELECT ID FROM `$App::401::db_name`.a401_article_cat WHERE ID_charindex LIKE CONCAT(($cat_sql),"%"))};
			}
			else
			{
				$sql_cat.=" OR article_attrs.ID=$ID_category";
			}
			$sql_cat=~s/^ OR //;
		}
		if ($sql_cat)
		{
			$sql_where.=" AND (".$sql_cat.") ";
		}
	}
	
	if ($env{'a430_list.ID'}=~/^\d+$/)
	{
		require App::430::_init;
		$sql_join.=qq{INNER JOIN `$App::430::db_name`.a160_relation AS a430_list_relation ON
		(
			a430_list_relation.l_prefix = 'a430' AND
			a430_list_relation.l_table = 'list' AND
			a430_list_relation.l_ID_entity = $env{'a430_list.ID'} AND
			a430_list_relation.r_prefix = 'a401' AND
			a430_list_relation.r_table = 'article' AND
			a430_list_relation.r_ID_entity = `article`.ID_entity AND
			a430_list_relation.status = 'Y'
		)
		};
		$sql_column.=",a430_list_relation.rel_name";
		$sql_order_by="a430_list_relation.priority DESC";
	}
	
	if ($env{'a460_tag.name_url'})
	{
		require App::460::_init;
		$sql_join.=qq{INNER JOIN `$App::401::db_name`.a160_relation AS tag_relation ON
		(
			tag_relation.l_prefix = 'a460' AND
			tag_relation.l_table = 'tag' AND
			tag_relation.rel_type = 'tag' AND
			tag_relation.r_prefix = 'a401' AND
			tag_relation.r_table = 'article' AND
			tag_relation.r_ID_entity = article.ID_entity
		)
		};
		$sql_where.=" AND tag_relation.l_ID_entity IN (SELECT tag.ID_entity FROM `$App::460::db_name`.a460_tag AS tag WHERE tag.name_url LIKE ?)";
		push @sql_bind, $env{'a460_tag.name_url'};
	}
	
	if ($env{'elastic'})
	{
		main::_log("request to Elastic");
		return undef unless $Elastic;
		
		my @elastic_must;
		my @elastic_should;
		my @elastic_filtered;
		
		push @elastic_must,{"terms" => {"status" => [$env{'article_attrs.status'}]}};
		
		if ($env{'article_cat.ID'})
		{
			my $filter={};
#			my $filter={'or' => [{'term' => {}},{'prefix' => {}}]};
			
			foreach my $ID_category (split(';',$env{'article_cat.ID'}))
			{
				next unless $ID_category;
				if ($ID_category=~s/\*$//)
				{
					my %sth0=TOM::Database::SQL::execute(qq{
						SELECT
							ID_charindex
						FROM `$App::401::db_name`.a401_article_cat
						WHERE
							ID=? AND status IN ('Y','L')
						LIMIT 1
					},'bind'=>[$ID_category],'quiet'=>1);
					my %db0_line=$sth0{'sth'}->fetchhash();
					
					push @{$filter->{'or'}},
						{'prefix' => {'article_attrs.cat_charindex' => $db0_line{'ID_charindex'}}}
							if $db0_line{'ID_charindex'};
				}
				else
				{
					push @{$filter->{'or'}},
						{'term' => {'cat' => $ID_category}}
							if $ID_category;
				}
			}
			push @elastic_must,$filter
				if $filter;
		}
		
		$env{'elastic.page'} = 1 unless $env{'elastic.page'};
		$env{'elastic.size'} = $env{'page_limit'} unless $env{'elastic.size'};
		
		use JSON;
		main::_log("must=".to_json(\@elastic_must));
		
		my $results = $Elastic->search(
			'index' => 'cyclone3.'.$App::401::db_name,
			'type' => 'a401_article',
			'fields' => ["_id","name","abstract","cat.ID","cat.charindex"],
			'from' => (($env{'elastic.page'}-1)*$env{'elastic.size'}),
			'size' => $env{'elastic.size'},
			'body'  => {
				'query' => {
					'filtered' => {
						'query' => {
							'query_string' => {
								"fields" => ["name^10", "*.abstract"],
								'query' => $env{'elastic.query_string'} || "",
#								'analyze_wildcar' => 'true'
								"use_dis_max" => 1
							}
						},
						'filter' => {
							'bool' => {
								'must' => [
									@elastic_must
								]
							}
						}
					}
				},
				"highlight" => {
					"fields" => {
						"name" => {}
					},
					"fragment_size" => 300,
					"pre_tags" => ['<em>'],
					"post_tags" => ['</em>']
				},
			}
		);
		
		main::_log("found ".$results->{'hits'}->{'total'}." documents");
		
		$env{'article.ID_entity'}="0;";
		
		$elastic=$results->{'hits'};
		
		foreach my $doc ( @{$results->{'hits'}->{'hits'}} )
		{
			$env{'article.ID_entity'}.=$doc->{'_id'}.";";
		}
		
	}
	elsif ($env{'solr'})
	{
		$env{'solr.defType'} = 'edismax' unless $env{'solr.defType'};
		$env{'solr.rows'} = 10 unless $env{'solr.rows'};
		$env{'solr.start'} = 0 unless $env{'solr.start'};
		$env{'solr.qf'} = "title name name_partial cat_name_sm^0.2 cat_name_tm^0.2 description^0.8 keywords^2 text^0.5" unless $env{'solr.qf'};
		
		if ($env{'solr.keywords'})
		{
			my $query=$env{'solr.keywords'};
			1 while ($query=~s|  | |g);
			$query=~s|^ ||g;
			$query=~s| $||g;
			my @query_part=split(' ',$query);$query='';
			my $part_last;
			foreach my $part(@query_part){
				$part=~s|\-|\\-|g;
				$query.="$part AND ";
				$part_last=$part;
			}
			$query=~s| AND $part_last AND $| AND ($part_last OR $part_last*)|;
			$query=~s|^$part_last AND $|$part_last OR $part_last*|;
			$query=~s| AND $||;
			$env{'solr.q'}="AND (".$query.")";
		}
		
		if ($env{'solr.related_keywords'})
		{
			my $query=$env{'solr.related_keywords'};
			1 while ($query=~s|  | |g);
			$query=~s|^ ||g;
			$query=~s| $||g;
			my @query_part=split(' ',$query);$query='';
			my $part_last;
			foreach my $part(@query_part){
				$part=~s|\-|\\-|g;
				$query.="$part ";
				$part_last=$part;
			}
			$query=~s| $||;
			$env{'solr.q'}="AND (".$query.")";
		}
		
		use Ext::Solr::_init;
		main::_log("connecting Solr");
		my $solr = Ext::Solr::service();
		
		main::_log('Solr query:'.'+id:'.$App::401::db_name.'.a401_article.'.$env{'lng'}.'.* '.$env{'solr.q'});
		
		my $response = $solr->search('+id:'.($App::401::db_name).'.a401_article.'.$env{'lng'}.'.* '.$env{'solr.q'},
			{
				'-cluster' => 1,
				
				'defType' => $env{'solr.defType'},
				
				'rows' => $env{'solr.rows'},
				'start' => $env{'solr.start'},
				
				'bq' => $env{'solr.bq'},
				'qf' => $env{'solr.qf'},
				'fl' => "id ID_i ID_entity_i score ".$env{'solr.fl'},
			}
		);
		
		$env{'article.ID_entity'}="0;";
		for my $doc ( $response->docs )
		{
			$env{'article.ID_entity'}.=$doc->value_for('ID_entity_i').";"
				if $doc->value_for('ID_entity_i');
		}
		
	}
	
	if ($env{'article.ID_entity'}=~/^[;0-9]+$/)
	{
		$sql_where.=" AND article.ID_entity IN (".join(',',split(';',$env{'article.ID_entity'})).")";
		$sql_limit=scalar split(';',$env{'article.ID_entity'});
		if ($env{'solr'} || $env{'elastic'})
		{
			$sql_group_by="article.ID_entity";
			$sql_order_by="CASE\n";
			my $i;
			foreach (split(';',$env{'article.ID_entity'}))
			{
				$i++;
				$sql_order_by.="\t\t\t\tWHEN article.ID_entity=$_ THEN $i\n";
			}
			$sql_order_by.="\t\t\tEND";
		}
	}
	
	$sql_where.=" AND ".$env{'sql_where'} if $env{'sql_where'};
	
	$sql_where=~s|^ ||;
	
	# get template
	Tomahawk::GetTpl('env' => \%env) || return undef;
	
	$TPL->{'variables'}->{'elastic'}=$elastic
		if $elastic;
	
	use App::020::mimetypes::html;
	my $parser=new App::020::mimetypes::html(
		'tpl_ext' => $TPL # extend
	);
	
	my $i;
	my %sth0=TOM::Database::SQL::execute(qq{
		SELECT
			
			article.ID_entity,
			article.ID,
			article_attrs.ID AS attrs_ID,
			article_content.ID AS content_ID,
			
			article_attrs.ID_category,
			article_cat.ID AS cat_ID,
			article_cat.ID_entity AS cat_ID_entity,
			article_cat.name AS cat_name,
			article_cat.name_url AS cat_name_url,
			
			article_ent.posix_owner,
			article_ent.ID_author AS posix_author,
			article_ent.visits,
			article_ent.sources,
			article_ent.metadata,
			article_ent.social_shares_facebook,
			article_ent.social_shares_twitter,
			article_content.ID_editor AS posix_editor,
			
			article_content.datetime_create AS content_datetime_create,
			article_attrs.datetime_start,
			article_attrs.datetime_stop,
			
			article_attrs.priority_A,
			article_attrs.priority_B,
			article_attrs.priority_C,
			
			article_attrs.name,
			article_attrs.name_url,
			article_attrs.name_hyphens,
			article_attrs.alias_url,
			
			article_content.subtitle,
			article_content.subtitle_hyphens,
			article_content.mimetype,
			article_content.abstract,
			article_content.abstract_hyphens,
			article_content.body,
			article_content.body_hyphens,
			article_content.keywords,
			article_content.lng,
			
			IF(
				round((`article_ent`.rating_score / `article_ent`.rating_votes),2),
				round((`article_ent`.rating_score / `article_ent`.rating_votes),2), '0.00'
			) as rating,
			rating_score,
			rating_votes,
			
			article_ent.visits,
			
			article_attrs.status,
			
			IF
			(
				(
					article.status LIKE 'Y' AND
					article_attrs.status LIKE 'Y'
				),
				'Y', 'U'
			) AS status_all
			$sql_column
			
		FROM `$App::401::db_name`.a401_article_attrs AS article_attrs
		INNER JOIN `$App::401::db_name`.a401_article AS article ON
		(
			article_attrs.ID_entity = article.ID
		)
		INNER JOIN `$App::401::db_name`.a401_article_ent AS article_ent ON
		(
			article_ent.ID_entity = article.ID_entity
		)
		INNER JOIN `$App::401::db_name`.a401_article_content AS article_content ON
		(
			article_content.ID_entity = article.ID_entity AND
			article_content.status = 'Y' AND
			article_content.lng = article_attrs.lng
		)
		LEFT JOIN `$App::401::db_name`.a401_article_cat AS article_cat ON
		(
			article_cat.ID = article_attrs.ID_category
		)
		LEFT JOIN `$App::401::db_name`.a301_ACL_user_group AS ACL_world ON
		(
			ACL_world.ID_entity = 0 AND
			r_prefix = 'a401' AND
			r_table = 'article' AND
			r_ID_entity = article.ID_entity
		)
		$sql_join
		WHERE
			article_attrs.status IN ('$sql_article_attrs_status')
			AND article_attrs.lng = '$env{'lng'}'
			$sql_where
			$sql_where_firsttry}.do{if($sql_group_by){qq{
		GROUP BY
			$sql_group_by}}}.qq{
		ORDER BY
			$sql_order_by
		LIMIT
			$sql_limit
	},'bind'=>[@sql_bind,@sql_bind_firsttry],
		'quiet'=>1,
		'-slave'=>1,
		'-cache' => 600,
		'-timeout' => 20,
		'-changetime'=>App::020::SQL::functions::_get_changetime(
			{
				'db_h'=>"main",
				'db_name' => $App::401::db_name,
				'tb_name' => "a401_article",
				'ID_entity' => do{$env{'article.ID_entity'} if $env{'article.ID_entity'}=~/^\d+$/}
			}),
	);
	
	$TPL->{'variables'}->{'rows'}=$sth0{'rows'};
	
	if ($env{'datetime_interval_retry'}
		&& (!$sth0{'rows'} || 
			(
				$sql_limit=~/^\d+$/
				&& ($sth0{'rows'} < $sql_limit)
			)
		)
	)
	{
		%sth0=TOM::Database::SQL::execute(qq{
			SELECT
				
				article.ID_entity,
				article.ID,
				article_attrs.ID AS attrs_ID,
				article_content.ID AS content_ID,
				
				article_attrs.ID_category,
				article_cat.ID AS cat_ID,
				article_cat.ID_entity AS cat_ID_entity,
				article_cat.name AS cat_name,
				article_cat.name_url AS cat_name_url,
				
				article_ent.posix_owner,
				article_ent.ID_author AS posix_author,
				article_ent.visits,
				article_ent.sources,
				article_ent.metadata,
                article_ent.social_shares_facebook,
			    article_ent.social_shares_twitter,
				article_content.ID_editor AS posix_editor,
				
				article_content.datetime_create AS content_datetime_create,
				article_attrs.datetime_start,
				article_attrs.datetime_stop,
				
				article_attrs.priority_A,
				article_attrs.priority_B,
				article_attrs.priority_C,
				
				article_attrs.name,
				article_attrs.name_url,
				article_attrs.name_hyphens,
				article_attrs.alias_url,
				
				article_content.subtitle,
				article_content.subtitle_hyphens,
				article_content.mimetype,
				article_content.abstract,
				article_content.abstract_hyphens,
				article_content.body,
				article_content.body_hyphens,
				article_content.keywords,
				article_content.lng,
				
				IF(
					round((`article_ent`.rating_score / `article_ent`.rating_votes),2),
					round((`article_ent`.rating_score / `article_ent`.rating_votes),2), '0.00'
				) as rating,
				rating_score,
				rating_votes,
				
				article_ent.visits,
				
				article_attrs.status,
				
				IF
				(
					(
						article.status LIKE 'Y' AND
						article_attrs.status LIKE 'Y'
					),
					'Y', 'U'
				) AS status_all
				$sql_column
				
			FROM `$App::401::db_name`.a401_article_attrs AS article_attrs
			INNER JOIN `$App::401::db_name`.a401_article AS article ON
			(
				article_attrs.ID_entity = article.ID
			)
			INNER JOIN `$App::401::db_name`.a401_article_ent AS article_ent ON
			(
				article_ent.ID_entity = article.ID_entity
			)
			INNER JOIN `$App::401::db_name`.a401_article_content AS article_content ON
			(
				article_content.ID_entity = article.ID_entity AND
				article_content.status = 'Y' AND
				article_content.lng = article_attrs.lng
			)
			LEFT JOIN `$App::401::db_name`.a401_article_cat AS article_cat ON
			(
				article_cat.ID = article_attrs.ID_category
			)
			LEFT JOIN `$App::401::db_name`.a301_ACL_user_group AS ACL_world ON
			(
				ACL_world.ID_entity = 0 AND
				r_prefix = 'a401' AND
				r_table = 'article' AND
				r_ID_entity = article.ID_entity
			)
			$sql_join
			WHERE
				article_attrs.status IN ('$sql_article_attrs_status')
				AND article_attrs.lng = '$env{'lng'}'
				$sql_where}.do{if($sql_group_by){qq{
			GROUP BY
				$sql_group_by}}}.qq{
			ORDER BY
				$sql_order_by
			LIMIT
				$sql_limit
		},'bind'=>[@sql_bind],
			'quiet'=>1,
			'-slave'=>1,
			'-cache' => 600,
			'-timeout' => 20,
			'-changetime'=>App::020::SQL::functions::_get_changetime(
				{
					'db_h'=>"main",
					'db_name' => $App::401::db_name,
					'tb_name' => "a401_article",
					'ID_entity' => do{$env{'article.ID_entity'} if $env{'article.ID_entity'}=~/^\d+$/}
				}),
		);
		
		$TPL->{'variables'}->{'rows'}=$sth0{'rows'};
	}
	
	while (my %article=$sth0{'sth'}->fetchhash())
	{
		$i++;
		last if $i > $env{'page_limit'};
		
		main::_log("[$i/$env{'page_limit'}] found article.ID_entity=$article{'ID_entity'} name='$article{'name'}'");
		
		push @{$env_out{'entity'}},{
			'db_h' => 'main',
			'db_name' => $App::401::db_name,
			'tb_name' => 'a401_article',
			'ID_entity' => $article{'ID_entity'}
		};
		
		$article{'related_thumbnail'}=(App::160::SQL::get_relations(
			'db_name' => $App::401::db_name,
			'l_prefix' => 'a401',
			'l_table' => 'article',
			'l_ID_entity' => $article{'ID_entity'},
			'rel_type' => 'thumbnail',
			'r_db_name' => $App::501::db_name,
			'r_prefix' => 'a501',
			'r_table' => 'image',
			'status' => 'Y',
			'limit' => 1
		))[0];
		
		# get all cats
		my @cats;
		my %sth1=TOM::Database::SQL::execute(qq{
			SELECT
				article_cat.ID AS cat_ID
			FROM `$App::401::db_name`.a401_article_ent AS article_ent
			INNER JOIN `$App::401::db_name`.a401_article AS article ON
			(
				article_ent.ID_entity = article.ID_entity
			)
			LEFT JOIN `$App::401::db_name`.a401_article_attrs AS article_attrs ON
			(
				article_attrs.ID_entity = article.ID AND
				article_attrs.status IN ('$sql_article_attrs_status') AND
				article_attrs.lng = '$env{'lng'}'
			)
			LEFT JOIN `$App::401::db_name`.a401_article_cat AS article_cat ON
			(
				article_cat.ID = article_attrs.ID_category AND
				article_cat.status IN ('Y','L')
			)
			WHERE
				article_ent.status = 'Y'
				AND article.status = 'Y'
				AND article_cat.ID IS NOT NULL
				AND article.ID_entity = ?
		},'bind'=>[$article{'ID_entity'}],'quiet'=>1,'-slave'=>1,
			'-cache' => 600,
			'-timeout' => 20,
			'-changetime'=>App::020::SQL::functions::_get_changetime(
				{
					'db_h'=>"main",
					'db_name' => $App::401::db_name,
					'tb_name' => "a401_article",
					'ID_entity' => $article{'ID_entity'}
				}),
		);
		while (my %cat=$sth1{'sth'}->fetchhash())
		{
			push @cats, $cat{'cat_ID'};
		}
#push @{$TPL->{'variables'}->{'cat'}},@cats;
		
		# link to a210_page
		if (my $category=App::401::functions::_a210_by_cat(
			[$article{'cat_ID_entity'},@cats],
#			[$article{'cat_ID_entity'}],
		'lng'=>$env{'lng'}))
		{

			my %sql_def=('db_h' => "main",'db_name' => $App::210::db_name,'tb_name' => "a210_page");
			foreach my $p(
				App::020::SQL::functions::tree::get_path(
					$category,
					%sql_def,
					'-slave' => 1,
					'-cache' => 86400*7
				)
			)
			{
				push @{$article{'a210'}{'IDs'}}, $p->{'ID'};
				push @{$article{'a210'}{'nodes'}}, $p;
				$article{'a210'}{'path_url'}.="/".$p->{'name_url'};
			}
			$article{'a210'}{'path_url'}=~s|^/||;
		}
		
		%{$article{'metahash'}}=App::020::functions::metadata::parse($article{'metadata'});
		delete $article{'metadata'};
		
		# render
		$parser->parse($article{'abstract'});
		$parser->eof();
		push @{$env_out{'entity'}},@{$parser->{'entity'}} if $parser->{'entity'}; # depend on this too
		$article{'abstract_parser'}={
			'output' => $parser->{'output'},
			'addon' => $parser->{'addon'},
			'entity' => $parser->{'entity'},
			'thumbnail' => $parser->{'thumbnail'},
		};
		
		if ($env{'parser.body'})
		{
			$parser->parse($article{'body'});
			$parser->eof();
			$article{'body_parser'}={
				'output' => $parser->{'output'},
				'addon' => $parser->{'addon'},
				'entity' => $parser->{'entity'},
				'thumbnail' => $parser->{'thumbnail'},
			};
		}
		
		push @{$TPL->{'variables'}{'items'}},\%article;
	}
	
	return 1,%env_out;
}

1;
