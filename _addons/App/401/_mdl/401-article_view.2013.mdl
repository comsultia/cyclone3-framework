#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8;
use strict;


use App::210::_init;
use App::401::_init;
use App::501::_init;

sub execute
{
	my %env=@_;
	my %env_out;
	
	$env{'article_attrs.status'}='Y' unless $env{'article_attrs.status'};
	$env{'datetime_mode'}="present" unless $env{'datetime_mode'};
	
	my @sql_bind;
	my $sql_where;
	my $sql_changetime;
	my $sql_limit=$env{'sql_limit'} || 10;
	my $sql_order_by=$env{'sql_order_by'} || 'article_attrs.datetime_start DESC';
	
	if ($env{'force'})
	{
		$env{'article_attrs.status'}='Y,N,L,W';
	}
	elsif ($env{'datetime_mode'} eq "present")
	{
		$sql_where.=" AND article_attrs.datetime_start <= NOW()";
		$sql_where.=" AND (article_attrs.datetime_stop IS NULL OR article_attrs.datetime_stop >= NOW())";
	}
	
	if ($env{'article.ID'})
	{
		main::_log("search by article.ID");
		push @{$env_out{'entity'}},{
			'db_h' => 'main',
			'db_name' => $App::401::db_name,
			'tb_name' => 'a401_article',
			'ID' => $env{'article.ID'}
		};
		$sql_where.="AND article.ID=? ";
		push @sql_bind,$env{'article.ID'};
	}
	
	if ($env{'article.ID_entity'})
	{
		main::_log("search by article.ID_entity");
		push @{$env_out{'entity'}},{
			'db_h' => 'main',
			'db_name' => $App::401::db_name,
			'tb_name' => 'a401_article',
			'ID_entity' => $env{'article.ID_entity'}
		};
		$sql_where.="AND article.ID_entity=? ";
		push @sql_bind,$env{'article.ID_entity'};
	}

	my $sql_article_attrs_status=join "','", split('',$env{'article_attrs.status'});
	
	if ($env{'article_cat.ID_entity'})
	{
		my $sql_cat;
		foreach my $ID_category (split(';',$env{'article_cat.ID_entity'}))
		{
			next unless $ID_category;
			if ($ID_category=~s/\*$//)
			{
				my $cat_sql=qq{SELECT ID_charindex FROM $App::401::db_name.a401_article_cat WHERE ID_entity=$ID_category AND lng='$env{'lng'}' AND status IN ('Y','L') LIMIT 1};
				$sql_cat.=qq{ OR article_cat.ID_charindex LIKE CONCAT(($cat_sql),"%")};
			}
			else
			{
				$sql_cat.=" OR article_cat.ID_entity=$ID_category";
				push @{$env_out{'entity'}},{
					'db_h' => 'main',
					'db_name' => $App::401::db_name,
					'tb_name' => 'a401_article_cat',
					'ID_entity' => $ID_category,
				};
			}
			$sql_cat=~s/^ OR //;
		}
		if ($sql_cat)
		{
			$sql_where.=" AND (".$sql_cat.") ";
		}
	}
	
	if ($env{'article_cat.ID'})
	{
		my $sql_cat;
		foreach my $ID_category (split(';',$env{'article_cat.ID'}))
		{
			next unless $ID_category;
			if ($ID_category=~s/\*$//)
			{
				my $cat_sql=qq{SELECT ID_charindex FROM $App::401::db_name.a401_article_cat WHERE ID=$ID_category AND status IN ('Y','L') LIMIT 1};
				$sql_cat.=qq{ OR article_cat.ID_charindex LIKE CONCAT(($cat_sql),"%")};
			}
			else
			{
				$sql_cat.=" OR article_cat.ID=$ID_category";
			}
			$sql_cat=~s/^ OR //;
		}
		if ($sql_cat)
		{
			$sql_where.=" AND (".$sql_cat.") ";
		}
	}
	
	
	$sql_where.=" AND ".$env{'sql_where'} if $env{'sql_where'};
	
	$sql_where=~s|^ ||;
	
	# get template
	Tomahawk::GetTpl('env' => \%env) || return undef;
	
	return 1 unless $sql_where;
	
	# create object for abstract
	my $parser_abstract=new App::020::mimetypes::html(
		'tpl_ext' => $TPL # extend
	);
	
	# create object for body:
	use App::020::mimetypes::html;
	my $parser=new App::020::mimetypes::html(
		'tpl_ext' => $TPL # extend
	);
	
	my $i;
	my %sth0=TOM::Database::SQL::execute(qq{
		SELECT
			
			article.ID_entity,
			article.ID,
			article_attrs.ID AS attrs_ID,
			article_content.ID AS content_ID,
			
			article_attrs.ID_category,
			article_cat.ID AS cat_ID,
			article_cat.name AS cat_name,
			article_cat.name_url AS cat_name_url,
			
			article_ent.posix_owner,
			article_ent.ID_author AS posix_author,
			article_ent.visits,
			article_ent.sources,
			article_ent.metadata,
            article_ent.social_shares_facebook,
            article_ent.social_shares_twitter,
			article_content.ID_editor AS posix_editor,
			
			article_content.datetime_create AS content_datetime_create,
			article_attrs.datetime_start,
			article_attrs.datetime_stop,
			article_content.datetime_modified,
			
			article_attrs.priority_A,
			article_attrs.priority_B,
			article_attrs.priority_C,
			
			article_attrs.name,
			article_attrs.name_url,
			article_attrs.name_hyphens,
			article_attrs.alias_url,
			
			article_content.subtitle,
			article_content.subtitle_hyphens,
			article_content.mimetype,
			article_content.abstract,
			article_content.abstract_hyphens,
			article_content.body,
			article_content.body_hyphens,
			article_content.keywords,
			article_content.lng,
			
			IF(
				round((`article_ent`.rating_score / `article_ent`.rating_votes),2),
				round((`article_ent`.rating_score / `article_ent`.rating_votes),2), '0.00'
			) as rating,
			rating_score,
			rating_votes,
			article_ent.published_mark,
			article_ent.visits,
			
			article_attrs.status,
			
			IF
			(
				(
					article.status LIKE 'Y' AND
					article_attrs.status LIKE 'Y'
				),
				'Y', 'U'
			) AS status_all,
			
			`ACL_world`.`perm_R` AS status_world
			
		FROM $App::401::db_name.a401_article_ent AS article_ent
		INNER JOIN $App::401::db_name.a401_article AS article ON
		(
			article_ent.ID_entity = article.ID_entity
		)
		INNER JOIN $App::401::db_name.a401_article_attrs AS article_attrs ON
		(
			article_attrs.ID_entity = article.ID AND
			article_attrs.status IN ('$sql_article_attrs_status') AND
			article_attrs.lng = '$env{'lng'}'
		)
		INNER JOIN $App::401::db_name.a401_article_content AS article_content ON
		(
			article_content.ID_entity = article.ID_entity AND
			article_content.status = 'Y' AND
			article_content.lng = article_attrs.lng
		)
		INNER JOIN $App::401::db_name.a401_article_cat AS article_cat ON
		(
			article_cat.ID = article_attrs.ID_category
		)
		LEFT JOIN $App::401::db_name.a301_ACL_user_group AS ACL_world ON
		(
			ACL_world.ID_entity = 0 AND
			r_prefix = 'a401' AND
			r_table = 'article' AND
			r_ID_entity = article.ID_entity
		)
		WHERE
			article_ent.status = 'Y'
			AND article.status = 'Y'
			$sql_where
		ORDER BY
			$sql_order_by
		LIMIT
			1
	},'bind'=>[@sql_bind],'log_'=>1,'-slave'=>1,'-cache'=>60,
		'-changetime'=>App::020::SQL::functions::_get_changetime(
			{
				'db_h'=>"main",
				'db_name' => $App::401::db_name,
				'tb_name' => "a401_article",
				'ID_entity' => do{$env{'article.ID_entity'} if $env{'article.ID_entity'}=~/^\d+$/}
			}),
	);
	
	my %article=$sth0{'sth'}->fetchhash();
	
	if ($env{'article.ID_entity'} || $article{'ID_entity'})
	{
		push @{$env_out{'entity'}},{
			'db_h' => 'main',
			'db_name' => $App::401::db_name,
			'tb_name' => 'a401_article',
			'ID_entity' => ($article{'ID_entity'} || $env{'article.ID_entity'})
		};
	}
	
	return 1 unless $article{'ID_entity'};
	
	main::_log("found article.ID_entity=$article{'ID_entity'}");
	
	push @{$env_out{'call'}{'H'}{'add_DOC_keywords'}},$article{'keywords'}
		if $env{'header.keywords'};
	
	push @{$env_out{'call'}{'H'}{'add_DOC_title'}},$article{'name'}
		if $env{'header.title'};
	
	if ($article{'cat_ID'})
	{
		# link to a210_page
		if (my $category=App::401::functions::_a210_by_cat([$article{'cat_ID'}],'lng'=>$env{'lng'}))
		{
			my %sql_def=('db_h' => "main",'db_name' => $App::210::db_name,'tb_name' => "a210_page");
			foreach my $p(
				App::020::SQL::functions::tree::get_path(
					$category,
					%sql_def,
					'-slave' => 1,
					'-cache' => 86400*7
				)
			)
			{
				push @{$article{'a210'}{'IDs'}}, $p->{'ID'};
				push @{$article{'a210'}{'nodes'}}, $p;
				$article{'a210'}{'path_url'}.="/".$p->{'name_url'};
			}
			$article{'a210'}{'path_url'}=~s|^/||;
		}
	}
	
	if ($env{'header.og'})
	{
		push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:title','content'=>$article{'name'}};
		push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:site_name','content' => $tom::H};
		push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:type','content'=>'article'};
	}
	
	#push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:image','content'=>$tom::H_a501.'/image/file/'.$image{'file_path'}};

	#this is meta-cache controller
	#push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:image','content'=>'saa6'}; 
	
	%{$article{'metahash'}}=App::020::functions::metadata::parse($article{'metadata'});
	delete $article{'metadata'};
	
	# parser abstract
	$parser_abstract->{'env'}->{'prefix'}='abstract';
	$parser_abstract->parse($article{'abstract'});
	$parser_abstract->eof();
	push @{$env_out{'entity'}},@{$parser_abstract->{'entity'}} if $parser_abstract->{'entity'}; # depend on this too
	$article{'abstract_parser'}={
		'output' => $parser_abstract->{'output'},
		'addon' => $parser_abstract->{'addon'},
		'entity' => $parser_abstract->{'entity'},
		'thumbnail' => $parser_abstract->{'thumbnail'},
	};
	
	my $doc_desc=$article{'abstract'};
		$doc_desc=~s|<.*?>||gms;
	push @{$env_out{'call'}{'H'}{'change_DOC_description'}},$doc_desc
		if $env{'header.description'};
	
	if ($env{'header.og'} && $parser->{'thumbnail'}[0])
	{
		if($parser->{'thumbnail'}[0])
		{
			my %image=App::501::functions::get_image_file(
				'image.ID_entity' => $parser->{'thumbnail'}[0],
				'image_file.ID_format' => 2
			);
			push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:image','content'=> $tom::H_a501.'/image/file/'.$image{'file_path'}};
		}
		elsif($env{'header.og.image.default'})
		{
			push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:image','content'=> $env{'header.og.image.default'}};
		}
	}
	
	# parser body
	$parser->{'env'}->{'prefix'}='body';
	$parser->parse($article{'body'});
	$parser->eof();
	$article{'body_parser'}={
		'output' => $parser->{'output'},
		'addon' => $parser->{'addon'},
		'entity' => $parser->{'entity'},
		'thumbnail' => $parser->{'thumbnail'},
	};
	push @{$env_out{'entity'}},@{$parser->{'entity'}} if $parser->{'entity'}; # depend on this too
	
	my @item_cats;
	my %sth1=TOM::Database::SQL::execute(qq{
		SELECT
			article_cat.ID AS cat_ID,
			article_cat.ID_entity AS cat_ID_entity,
			article_cat.ID_charindex AS cat_ID_charindex,
			article_cat.name AS cat_name,
			article_cat.name_url AS cat_name_url
		FROM `$App::401::db_name`.a401_article_ent AS article_ent
		INNER JOIN `$App::401::db_name`.a401_article AS article ON
		(
			article_ent.ID_entity = article.ID_entity
		)
		LEFT JOIN `$App::401::db_name`.a401_article_attrs AS article_attrs ON
		(
			article_attrs.ID_entity = article.ID AND
			article_attrs.status IN ('$sql_article_attrs_status') AND
			article_attrs.lng = '$env{'lng'}'
		)
		LEFT JOIN `$App::401::db_name`.a401_article_cat AS article_cat ON
		(
			article_cat.ID = article_attrs.ID_category AND
			article_cat.status IN ('Y','L')
		)
		WHERE
			article_ent.status = 'Y'
			AND article.status = 'Y'
			AND article_cat.ID IS NOT NULL
			AND article.ID_entity = ?
	},'bind'=>[$article{'ID_entity'}],'quiet'=>1,'-slave'=>1,
		'-cache' => 600,
		'-changetime'=>App::020::SQL::functions::_get_changetime(
			{
				'db_h'=>"main",
				'db_name' => $App::401::db_name,
				'tb_name' => "a401_article",
				'ID_entity' => $article{'ID_entity'}
			}),
	);
	while (my %cat=$sth1{'sth'}->fetchhash())
	{
		push @item_cats, {
			'ID' => $cat{'cat_ID'},
			'ID_entity' => $cat{'cat_ID_entity'},
			'ID_charindex' => $cat{'cat_ID_charindex'},
			'name' => $cat{'cat_name'},
			'name_url' => $cat{'cat_name_url'}
		};
	}
	
	$article{'categories'}=\@item_cats;
	
	$article{'related_thumbnail'}=(App::160::SQL::get_relations(
		'db_name' => $App::401::db_name,
		'l_prefix' => 'a401',
		'l_table' => 'article',
		'l_ID_entity' => $article{'ID_entity'},
		'rel_type' => 'thumbnail',
		'r_db_name' => $App::501::db_name,
		'r_prefix' => 'a501',
		'r_table' => 'image',
		'status' => 'Y',
		'limit' => 1
	))[0];
	
	if ($env{'header.og'} && $article{'related_thumbnail'})
	{
		my %image=App::501::functions::get_image_file(
			'image.ID_entity' => $article{'related_thumbnail'}->{'r_ID_entity'},
			'image_file.ID_format' => 2
		);
		push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:image','content'=> $tom::H_a501.'/image/file/'.$image{'file_path'}};
	}
	elsif ($env{'header.og.abstract'} && $parser_abstract->{'thumbnail'}[0])
	{
		my %image=App::501::functions::get_image_file(
			'image.ID_entity' => $parser_abstract->{'thumbnail'}[0],
			'image_file.ID_format' => 2
		);
		push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:image','content'=> $tom::H_a501.'/image/file/'.$image{'file_path'}};
	}
	elsif ($env{'header.og'} && $parser->{'thumbnail'}[0])
	{
		my %image=App::501::functions::get_image_file(
			'image.ID_entity' => $parser->{'thumbnail'}[0],
			'image_file.ID_format' => 2
		);
		push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:image','content'=> $tom::H_a501.'/image/file/'.$image{'file_path'}};
	}
	
	# tags
	foreach my $relation (App::160::SQL::get_relations(
		'db_name' => $App::401::db_name,
		'r_prefix' => 'a401',
		'r_table' => 'article',
		'r_ID_entity' => $article{'ID_entity'},
		'rel_type' => 'tag',
		'l_prefix' => "a460",
		'l_table' => "tag",
		'status' => "Y",
	))
	{
		require App::460::_init;
		my %sth1=TOM::Database::SQL::execute(qq{
			SELECT
				*
			FROM `$App::460::db_name`.a460_tag
			WHERE
				ID_entity = ?
				AND status IN ('Y','N','L','W')
			LIMIT 1
		},'quiet'=>1,'bind'=>[$relation->{'l_ID_entity'}],'-slave'=>1,'-cache'=>86400,
			'-changetime'=>App::020::SQL::functions::_get_changetime({
				'db_h'=>"main",
				'db_name' => $App::460::db_name,
				'tb_name' => "a460_tag",
				'ID_entity' => $relation->{'l_ID_entity'}
			})
		);
		my %db1_line=$sth1{'sth'}->fetchhash();
		
		push @{$article{'tags'}},{
			'ID_entity' => $relation->{'l_ID_entity'},
			'name' => $db1_line{'name'},
			'name_url' => $db1_line{'name_url'},
		};
	}
	
	$TPL->{'variables'}{'article'} = \%article;
	
	return 1,%env_out;
}

1;
