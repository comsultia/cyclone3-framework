#!/usr/bin/env c3-job
package Cyclone3::job;
use parent 'TOM::Engine::job::module';
use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8;
use strict;

use Utils::datetime;

use App::900::_init;

sub execute
{
	my $self=shift;
	my $env=$self->env;
	
	my $debug=0;
	my $data={};
	
	$env->{'lng'}||=$tom::lng;
#	main::_log("lng=$env->{'lng'}");
#	return 1;
	
	$env->{'sid'} ||= $main::USRM{'ID_session'};
	$env->{'c3sid'} ||= $main::COOKIES_all{'c3sid'};
	$env->{'c3bid'} ||= $main::COOKIES_all{'c3bid'};
	$env->{'requests'} ||= $main::USRM{'requests'} || 1;
	
	main::_log("session='".$env->{'sid'}."' c3sid='".$env->{'c3sid'}."' c3bid='".$env->{'c3bid'}."' requests=".$env->{'requests'},3,"debug") if $debug;
	
	$env->{'banner.status'}='Y' unless $env->{'banner.status'};
		my $sql_banner_status=join "','", split('',$env->{'banner.status'});
	
	# paging
	$env->{'page_limit'} ||= 10;
	$env->{'page'} ||= 1;
	$env->{'page_offset'} ||= 0;
	
	$env->{'page_plus'} ||= 10 if $env->{'calculate'};
	$env->{'page_plus'} ||= 1;
	
	if (!$env->{'sql_limit'})
	{
		$env->{'sql_limit'}=((($env->{'page'}-1)*$env->{'page_limit'})+$env->{'page_offset'}).",".($env->{'page_limit'}+$env->{'page_plus'});
	}
	else
	{
#		$env->{'sql_limit'}=~/^(\d+),?(\d+)?$/;
	}
	
	if ($env->{'calculate'})
	{
		# get necessary data for calculations at first
		
=head1
		# pages/session
		my %sth0=TOM::Database::SQL::execute(qq{
			SELECT
				AVG(user_session.requests_all)/4 AS pages
			FROM
				TOM.a301_user_session AS user_session
			INNER JOIN TOM.a301_user AS user ON
			(
				user_session.ID_user = user.ID_user
			)
			WHERE
				user.hostname = ? AND
				user_session.datetime_session_begin >= DATE_SUB(NOW(),INTERVAL 7 DAY)
		},'bind'=>[$tom::H_cookie],'-cache' => 86400,'quiet'=>1);
		my %db0_line=$sth0{'sth'}->fetchhash();
		$env->{'session_pages'}=int($db0_line{'pages'}) || 7;
=cut
		$env->{'session_pages'}=7;
		main::_log("pages/session = $env->{'session_pages'}",3,"debug") if $debug;
	}
	
	my @sql_bind;
	my @sql_bind_test;
		push @sql_bind,$env->{'sid'};
		push @sql_bind,$env->{'sid'};
	my $sql_where;
	my $sql_where_plus;
	my $sql_changetime;
	my $sql_limit=$env->{'sql_limit'} || 10;
	my $sql_order_by=$env->{'sql_order_by'} || '`banner`.`rules_weight` DESC';
	my $sql_group_by;
	
	if ($env->{'banner_zonetarget.name'})
	{
		$env->{'banner_zonetarget.name'}=~s|,|;|;
		
		my $sqlin;
		
		foreach my $zone (split(';',$env->{'banner_zonetarget.name'}))
		{
			$sqlin.=", ?";
			push @sql_bind, $zone;push @sql_bind_test, $zone;
		}
		$sqlin=~s|^, ||;
		
		$sql_where.=" AND banner_zonetarget.name IN (" . $sqlin . ")";
		main::_log("search banner_zonetarget.name '$env->{'banner_zonetarget.name'}'",3,"debug") if $debug;
	}
	
	if ($env->{'banner_domain.name'})
	{
		$sql_where.=" AND banner_domain.name LIKE ?";
		push @sql_bind, $env->{'banner_domain.name'};
		push @sql_bind_test, $env->{'banner_domain.name'};
	}
	
	if ($env->{'a210_page.ID'})
	{
		main::_log("a210_page.ID=$env->{'a210_page.ID'}");
		my %sql_def=('db_h' => "main",'db_name' => $App::210::db_name,'tb_name' => "a210_page");
		my %a210=App::020::SQL::functions::get_ID(
			%sql_def,
			'ID'      => $env->{'a210_page.ID'},
			'columns' => { '*' => 1 },
			'-slave'  => 1,
			'-cache'  => 86400,
			'-cache_changetime' => App::020::SQL::functions::_get_changetime(\%sql_def)
		);
		main::_log("a210_page.ID_entity=$a210{'ID_entity'}");
		
		foreach my $p(
			reverse App::020::SQL::functions::tree::get_path(
				$a210{'ID'},
				%sql_def,
				'columns' => { '*' => 1 },
				'-slave' => 1,
				'-cache' => 86400
			)
		)
		{
			main::_log("relation from $p->{'ID_entity'}");
			my $found = 0;
			foreach my $relation (App::160::SQL::get_relations(
				'db_name' => $App::210::db_name,
				'l_prefix' => 'a210',
				'l_table' => 'page',
				'l_ID_entity' => $p->{'ID_entity'},
				'r_prefix' => "a900",
				'r_table' => "banner_cat",
				'rel_type' => "link",
				'status' => "Y"
			))
			{
				main::_log("relation to $relation->{'r_ID_entity'}");
				$env->{'banner_cat.ID_entity'}.=";".$relation->{'r_ID_entity'}.'*';
				$found++;
			}
			last if ($found && $env{'a210.non_recursive'});
		}
		
		main::_log("a210_page -> banner_cat.ID_entity='$env->{'banner_cat.ID_entity'}'");
	}
	
	if (defined $env->{'banner_cat.ID_entity'})
	{
		my $sql_cat;
		foreach my $ID_category (split(';',$env->{'banner_cat.ID_entity'}))
		{
			next if $ID_category eq '';
			next unless $ID_category=~/^[\d\*]+$/;
			if ($ID_category=~s/\*$//)
			{
				my $cat_sql=qq{SELECT `ID_charindex` FROM `$App::900::db_name`.`a900_banner_cat` WHERE `ID_entity`=$ID_category AND `status` IN ('Y','L') LIMIT 1};
				$sql_cat.=qq{ OR `banner_cat`.`ID_charindex` LIKE CONCAT(($cat_sql),"%")};
			}
			else
			{
				$sql_cat.=" OR banner_rel_cat.ID_category IN ($ID_category)";
				push @{$data->{'entity'}},{
					'db_h' => 'main',
					'db_name' => $App::900::db_name,
					'tb_name' => 'a900_banner_cat',
					'ID_entity' => $ID_category,
				};
			}
			$sql_cat=~s/^ OR //;
		}
		if ($sql_cat)
		{
			$sql_where.=" AND (".$sql_cat.") ";
		}
	}
	
	if ($env->{'banner.ID'})
	{
		$sql_where.=" AND banner.ID IN (".
			(join(",",grep {$_=~/^\d+$/} split(';',$env->{'banner.ID'})) || 0)
		.") ";
	}
	
	if ($env->{'banner.ID_entity'})
	{
		$sql_where.=" AND banner.ID_entity IN (".
			(join(",",grep {$_=~/^\d+$/} split(';',$env->{'banner.ID_entity'})) || 0)
		.") ";
	}
	
	if (!$env->{'force'}) # when force => 1, allow display not active banners
	{
		$sql_where_plus.=qq{
			AND (banner.rules_views_max IS NULL OR banner.rules_views_max >= banner.stats_views)
			AND (banner.rules_clicks_max IS NULL OR banner.rules_clicks_max >= banner.stats_clicks)
			AND (banner.rules_views_session_max IS NULL OR (
				SELECT COUNT(a900_banner_view.datetime_event)
				FROM `$App::900::db_name`.a900_banner_view
				WHERE a900_banner_view.ID_banner = banner.ID_entity AND a900_banner_view.ID_session = ?
			) < banner.rules_views_session_max)
			AND (banner.rules_views_browser_session_max IS NULL OR (
				SELECT COUNT(a900_banner_view.datetime_event)
				FROM `$App::900::db_name`.a900_banner_view
				WHERE a900_banner_view.ID_banner = banner.ID_entity AND a900_banner_view.ID_browser_session = ?
			) < banner.rules_views_browser_session_max)
			AND (banner.rules_clicks_browser_max IS NULL OR (
				SELECT COUNT(a900_banner_click.datetime_event)
				FROM `$App::900::db_name`.a900_banner_click
				WHERE a900_banner_click.ID_banner = banner.ID_entity AND a900_banner_click.ID_browser = ?
			) < banner.rules_clicks_browser_max)
			AND (banner.rules_pageviews_session_min IS NULL
				OR rules_pageviews_session_min <= ?
			)
			AND (
				(
					banner.time_publish_start IS NOT NULL
					AND banner.time_publish_stop IS NOT NULL
					AND banner.time_publish_start > banner.time_publish_stop
					AND banner.time_publish_start >= CURTIME()
					AND banner.time_publish_stop <= CURTIME()
				)
				OR
				(
					(banner.time_publish_start IS NULL OR banner.time_publish_start <= CURTIME())
					AND (banner.time_publish_stop IS NULL OR banner.time_publish_stop >= CURTIME())
				)
			)
		};
		push @sql_bind,$env->{'sid'};
		push @sql_bind,$env->{'c3sid'};
		push @sql_bind,$env->{'c3bid'};
		push @sql_bind,$env->{'requests'};
	}
	else
	{
		$sql_banner_status="Y','N','L','T";
	}
	
	$sql_where.=" AND ".$env->{'sql_where'} if $env->{'sql_where'};
	
	$sql_where=~s|^ ||;
	
#	# get template
#	Tomahawk::GetTpl('env' => \%env) || return undef;
	
	if ($env->{'http_cache'} eq "auto" || $env->{'http_cache'} eq "info")
	{
		main::_log("http_cache=".$env->{'http_cache'});
		# check all possible banners
		my %sth0=TOM::Database::SQL::execute(qq{
			SELECT
				
				`banner`.ID,
				`banner`.ID_entity,
				`banner_lng`.ID AS lng_ID,
				`banner_lng`.ID_entity AS lng_ID_entity
				
			FROM `$App::900::db_name`.`a900_banner` AS `banner`
			
			INNER JOIN $App::900::db_name.a900_banner_lng AS banner_lng ON
			(
				banner_lng.ID_entity = banner.ID_entity AND
				banner_lng.lng = '$env->{'lng'}' AND
				banner_lng.status = 'Y'
			)
			LEFT JOIN `$App::900::db_name`.a900_banner_zonetarget AS banner_zonetarget ON
			(
				banner_zonetarget.ID_entity = banner.ID_zonetarget
			)
			LEFT JOIN $App::900::db_name.a900_banner_rel_cat AS banner_rel_cat ON
			(
				banner_rel_cat.ID_banner = banner.ID_entity
			)
			LEFT JOIN $App::900::db_name.a900_banner_cat AS banner_cat ON
			(
				banner_cat.ID_entity = banner_rel_cat.ID_category AND
				banner_cat.status IN ('Y','N','L')
			)
			LEFT JOIN $App::900::db_name.a900_banner_rel_domain AS banner_rel_domain ON
			(
				banner_rel_domain.ID_banner = banner.ID_entity
			)
			LEFT JOIN $App::900::db_name.a900_banner_domain AS banner_domain ON
			(
				banner_domain.ID_entity = banner_rel_domain.ID_domain AND
				banner_domain.status IN ('Y','N','L')
			)
			WHERE
				`banner`.`status` IN ('$sql_banner_status') AND
				(`banner`.`datetime_publish_start` IS NULL OR `banner`.`datetime_publish_start` <= NOW())
				AND (`banner`.`datetime_publish_stop` IS NULL OR `banner`.`datetime_publish_stop` >= NOW())
				AND (
					`banner`.rules_clicks_max IS NOT NULL
					OR `banner`.rules_clicks_browser_max IS NOT NULL
					OR `banner`.rules_views_session_max IS NOT NULL
					OR `banner`.rules_views_browser_session_max IS NOT NULL
				)
				$sql_where
			LIMIT
				1
		},'bind'=>[@sql_bind_test],'quiet'=>1,'-slave'=>1,'-cache' => 60,
			'-changetime'=>App::020::SQL::functions::_get_changetime(
				{
					'db_h'=>"main",
					'db_name' => $App::900::db_name,
					'tb_name' => "a900_banner"
				}),
		);
		if (my %banner=$sth0{'sth'}->fetchhash())
		{
			main::_log("http cache blocking banner $banner{'ID'}");
		}
		elsif ($env->{'http_cache'} eq "auto")
		{
			main::_log("set http cache");
			$main::ENV{'Cache-Control'} = "public";
			use DateTime;
			my $date = DateTime->now('time_zone' => 'GMT');
			$date->add('seconds' => 300);
			$main::ENV{'Expires'} = $date->strftime("%a, %d %b %Y %H:%M:%S GMT"); 
		}
		else
		{
			main::_log("allow http cache");
			$data->{'http_cache'} = 1;
		}
	}
	
	my $i;
	my %sth0=TOM::Database::SQL::execute(qq{
		SELECT
			
			`banner`.*,
			`banner_lng`.*,
			`banner`.ID,
			`banner`.ID_entity,
			`banner_lng`.ID AS lng_ID,
			`banner_lng`.ID_entity AS lng_ID_entity,
			
			`banner_zonetarget`.name AS zonetarget_name,
			
			`banner_cat`.`ID` AS `cat_ID`,
			`banner_cat`.`ID_entity` AS `cat_ID_entity`,
			`banner_cat`.`name` AS `cat_name`,
			
			(
				SELECT COUNT(a900_banner_view.datetime_event)
				FROM `$App::900::db_name`.a900_banner_view
				WHERE a900_banner_view.ID_banner = `banner`.ID_entity AND a900_banner_view.ID_session = ?
			) AS stats_session_views,
			(
				SELECT COUNT(a900_banner_click.datetime_event)
				FROM `$App::900::db_name`.a900_banner_click
				WHERE a900_banner_click.ID_banner = `banner`.ID_entity AND a900_banner_click.ID_session = ?
			) AS stats_session_clicks,
			
			TIMESTAMPDIFF(HOUR,`banner`.datetime_publish_start,NOW()) AS hours_running,
			TIMESTAMPDIFF(HOUR,NOW(),`banner`.datetime_publish_stop) AS hours_remaining
			
		FROM `$App::900::db_name`.`a900_banner` AS `banner`
		
		INNER JOIN $App::900::db_name.a900_banner_lng AS banner_lng ON
		(
			banner_lng.ID_entity = banner.ID_entity AND
			banner_lng.lng = '$env->{'lng'}' AND
			banner_lng.status = 'Y'
		)
		LEFT JOIN `$App::900::db_name`.a900_banner_zonetarget AS banner_zonetarget ON
		(
			banner_zonetarget.ID_entity = banner.ID_zonetarget
		)
		LEFT JOIN $App::900::db_name.a900_banner_rel_cat AS banner_rel_cat ON
		(
			banner_rel_cat.ID_banner = banner.ID_entity
		)
		LEFT JOIN $App::900::db_name.a900_banner_cat AS banner_cat ON
		(
			banner_cat.ID_entity = banner_rel_cat.ID_category AND
			banner_cat.status IN ('Y','N','L')
		)
		LEFT JOIN $App::900::db_name.a900_banner_rel_domain AS banner_rel_domain ON
		(
			banner_rel_domain.ID_banner = banner.ID_entity
		)
		LEFT JOIN $App::900::db_name.a900_banner_domain AS banner_domain ON
		(
			banner_domain.ID_entity = banner_rel_domain.ID_domain AND
			banner_domain.status IN ('Y','N','L')
		)
		WHERE
			`banner`.`status` IN ('$sql_banner_status') AND
			(`banner`.`datetime_publish_start` IS NULL OR `banner`.`datetime_publish_start` <= NOW())
			AND (`banner`.`datetime_publish_stop` IS NULL OR `banner`.`datetime_publish_stop` >= NOW())
			$sql_where$sql_where_plus}.do{if($sql_group_by){qq{
		GROUP BY
			$sql_group_by}}}.qq{
		ORDER BY
			$sql_order_by
		LIMIT
			$sql_limit
	},'bind'=>[@sql_bind],'log'=>0,'quiet'=>1,'-slave'=>1,
		'-changetime'=>App::020::SQL::functions::_get_changetime(
			{
				'db_h'=>"main",
				'db_name' => $App::900::db_name,
				'tb_name' => "a900_banner",
				'ID_entity' => do{$env->{'banner.ID_entity'} if $env->{'banner.ID_entity'}=~/^\d+$/}
			}),
	);
	
	$data->{'rows'}=$sth0{'rows'};
	
	if (!$sth0{'rows'})
	{
		main::_log("can't found banners to use");
#		main::_log("can't find any banner",3,"debug") if $debug;
	}
	
	my @banners;
	while (my %banner=$sth0{'sth'}->fetchhash())
	{
		$i++;
#		last if $i > $env->{'page_limit'};
		
		main::_log("[$i/$env->{'page_limit'}] found banner.ID_entity=$banner{'ID_entity'}");
		
		push @{$data->{'entity'}},{
			'db_h' => 'main',
			'db_name' => $App::900::db_name,
			'tb_name' => 'a900_banner',
			'ID_entity' => $banner{'ID_entity'}
		};
		
		@{$banner{'related_gallery'}}=App::160::SQL::get_relations(
			'db_name' => $App::900::db_name,
			'l_prefix' => 'a900',
			'l_table' => 'banner',
			'l_ID_entity' => $banner{'ID_entity'},
			'r_prefix' => "a501",
			'r_table' => "image",
			'rel_type' => "gallery",
			'status' => "Y"
		);
		
		@{$banner{'related_videogallery'}}=App::160::SQL::get_relations(
			'db_name' => $App::900::db_name,
			'l_prefix' => 'a900',
			'l_table' => 'banner',
			'l_ID_entity' => $banner{'ID_entity'},
			'r_prefix' => "a510",
			'r_table' => "video",
			'rel_type' => "gallery",
			'status' => "Y"
		);
		
		@{$banner{'lng_related_gallery'}}=App::160::SQL::get_relations(
			'db_name' => $App::900::db_name,
			'l_prefix' => 'a900',
			'l_table' => 'banner_lng',
			'l_ID_entity' => $banner{'lng_ID'},
			'r_prefix' => "a501",
			'r_table' => "image",
			'rel_type' => "gallery",
			'status' => "Y"
		);
		
		%{$banner{'metahash'}}=App::020::functions::metadata::parse($banner{'metadata'});
		delete $banner{'metadata'};
		
		my @target_addon=split(':',$banner{'target_addon'},2);
		main::_log("target_addon=@target_addon",3,"debug");
		if ($target_addon[0] && $target_addon[1])
		{
			$banner{'addon_type'}=$target_addon[0];
			$banner{'addon_ID_entity'}=$target_addon[1];
			
			if ($banner{'addon_type'} eq "a210_page")
			{
				require App::210::_init;
				
				my %sth1=TOM::Database::SQL::execute(qq{
					SELECT
						`a210_page`.*
					FROM
						`$App::210::db_name`.`a210_page`
					WHERE
						`a210_page`.ID_entity = ? AND
						`a210_page`.lng = ? AND
						`a210_page`.status IN ('Y','L')
				},
					'bind'=>[$banner{'addon_ID_entity'},$env->{'lng'}],
					'log' => 0,
					'quiet' => 1,
					'-cache' => 86400,
					'-cache_changetime' => App::020::SQL::functions::_get_changetime(
						{
							'db_h'=>"main",
							'db_name' => $App::210::db_name,
							'tb_name' => "a210_page"
						}
					)
				);
				if (my %db1_line=$sth1{'sth'}->fetchhash())
				{
					delete $db1_line{'metadata'};
					delete $db1_line{'t_keys'};
					
					foreach my $node (App::020::SQL::functions::tree::get_path(
						$db1_line{'ID'},
						'db_h'    => 'main',
						'db_name' => $App::210::db_name,
						'tb_name' => 'a210_page',
						'-cache' => 3600,
					))
					{
						$db1_line{'path_url'}.='/'.$node->{'name_url'};
					}
					$db1_line{'path_url'}=~s|^/||;
					
					$db1_line{'ID_charindex'}=~s|^$env->{'ID_charindex'}||;
					
					$banner{'addon'}=\%db1_line;
				}
				
			}
			elsif ($banner{'addon_type'} eq "a910_product")
			{
				require App::910::_init;
				
				my %sth1=TOM::Database::SQL::execute(qq{
					SELECT
						product.ID_entity,
						product.ID,
						product.product_number,
						product.datetime_publish_start,
						product.datetime_publish_stop,
						product.amount,
						product.amount_unit,
						product.amount_availability,
						product.amount_limit,
						product.amount_order_min,
						product.amount_order_max,
						product.amount_order_div,
						product.supplier_org,
						product.supplier_person,
						product.status_new,
						product.status_recommended,
						product.status_sale,
						product.status_special,
						product.status_main,
						product.status,
						
						product_ent.posix_owner,
						product_ent.ID_brand,
						product_ent.ID_family,
						product_ent.VAT AS ent_VAT,
						product_ent.rating_score,
						product_ent.rating_votes,
						(product_ent.rating_score/product_ent.rating_votes) AS rating,
						product_ent.priority_A,
						product_ent.priority_B,
						product_ent.priority_C,
						product_ent.product_type,
						
						product_lng.name,
						product_lng.name_url,
						product_lng.lng,
						
						product_cat.ID AS cat_ID,
						product_cat.ID_entity AS cat_ID_entity,
						
						product_brand.name AS brand_name,
						product_brand.name_url AS brand_name_url,
						
						product_family.name AS family_name,
						product_family.name_url AS family_name_url
						
					FROM $App::910::db_name.a910_product_ent AS product_ent
					LEFT JOIN $App::910::db_name.a910_product AS product ON
					(
						product_ent.ID_entity = product.ID_entity
					)
					LEFT JOIN $App::910::db_name.a910_product_lng AS product_lng ON
					(
						product_lng.ID_entity = product.ID AND
						product_lng.lng = '$env->{'lng'}'
					)
					
					INNER JOIN $App::910::db_name.a910_product_sym AS product_sym ON
					(
						product_sym.ID_entity = product.ID_entity
					)
					INNER JOIN $App::910::db_name.a910_product_cat AS product_cat ON
					(
						product_cat.ID_entity = product_sym.ID AND
						product_cat.lng = product_lng.lng AND
						product_cat.status IN ('Y','L')
					)
					
					LEFT JOIN $App::910::db_name.a910_product_brand AS product_brand ON
					(
						product_brand.ID_entity = product_ent.ID_brand
					)
					LEFT JOIN $App::910::db_name.a910_product_family AS product_family ON
					(
						product_family.ID_entity = product_ent.ID_family
					)
					WHERE
						product_ent.status = 'Y'
						AND product.ID_entity = ?
						AND product_lng.lng = ?
						AND product.status IN ('Y')
					LIMIT
						1
				},
					'bind'=>[$banner{'addon_ID_entity'},$env->{'lng'}],
					'quiet' => 1,
					'-cache' => 86400,
					'-cache_changetime' => App::020::SQL::functions::_get_changetime(
						{
							'db_h'=>"main",
							'db_name' => $App::910::db_name,
							'tb_name' => "a910_product"
						}
					)
				);
				if (my %db1_line=$sth1{'sth'}->fetchhash())
				{
					# link to a210_page
					if (my $category=App::910::functions::_a210_by_cat([$db1_line{'cat_ID_entity'}],'lng'=>$env->{'lng'}))
					{
						my %sql_def=('db_h' => "main",'db_name' => $App::210::db_name,'tb_name' => "a210_page");
						foreach my $p(
							App::020::SQL::functions::tree::get_path(
								$category,
								%sql_def,
								'-slave' => 1,
								'-cache' => 3600
							)
						)
						{
							push @{$db1_line{'a210'}{'IDs'}}, $p->{'ID'};
							push @{$db1_line{'a210'}{'nodes'}}, $p;
							$db1_line{'a210'}{'path_url'}.="/".$p->{'name_url'};
							$db1_line{'a210'}{'name_url'}=$p->{'name_url'};
						}
						$db1_line{'a210'}{'path_url'}=~s|^/||;
					}
					
					$banner{'addon'}=\%db1_line;
					
				}
				
			}
			
			use JSON;
			main::_log("addon=".to_json(\%banner)) if $env->{'debug'};
			
		}
		
		if ($banner{'def_body'})
		{
			use App::020::mimetypes::html;
			my $parser=new App::020::mimetypes::html(
				'tpl_ext' => $env->{'tpl_ext'} # extend
			);
			$parser->parse($banner{'def_body'});
			$parser->eof();
			push @{$data->{'entity'}},@{$parser->{'entity'}} if $parser->{'entity'}; # depend on this too
			$banner{'def_body_parser'}={
				'output' => $parser->{'output'},
				'addon' => $parser->{'addon'},
				'entity' => $parser->{'entity'},
				'thumbnail' => $parser->{'thumbnail'},
			};
		}
		
		if ($env->{'click'} && $main::USRM{'ID_user'})
		{
			TOM::Database::SQL::execute(qq{
				INSERT DELAYED INTO
					`$App::900::db_name`.a900_banner_click
					(
						ID_banner,
						datetime_event,
						ID_user,
						ID_session,
						ID_browser,
						ID_browser_session
					)
					VALUES
					(
						?,
						NOW(),
						?,
						?,
						?,
						?
					)
			},'-quiet'=>1,'bind'=>[
				$banner{'ID_entity'},
				$main::USRM{'ID_user'},
				$env->{'sid'},
				$env->{'c3bid'},
				$env->{'c3sid'}
			]);
			
			my %sth1=TOM::Database::SQL::execute(qq{
				SELECT COUNT(ID_user) AS cnt
				FROM `$App::900::db_name`.a900_banner_click
				WHERE	ID_banner = ? AND datetime_event >= ?
			},'-quiet'=>1,'bind'=>[
				$banner{'ID_entity'},
				$banner{'datetime_publish_start'}
			]);
			my %db1_line=$sth1{'sth'}->fetchhash();
			
			TOM::Database::SQL::execute(qq{
				UPDATE
					`$App::900::db_name`.a900_banner
				SET
					stats_clicks = ?
				WHERE
					ID_entity = ?
			},'-quiet'=>1,'bind'=>[
				$db1_line{'cnt'},
				$banner{'ID_entity'}
			]);
		}
		
		if ($env->{'calculate'})
		{
			$banner{'hours_running'}||=1;
			
			# calculate weight
			my $weight='100';
			
			main::_log("calculate banner $banner{'ID_entity'} already views='$banner{'stats_views'}' session_views='$banner{'stats_session_views'}' clicks='$banner{'stats_clicks'}' session_clicks='$banner{'stats_session_clicks'}'",3,"debug") if $debug;
			
			if ($banner{'rules_views_max'})
			{
				main::_log(" rules_views_max=$banner{'rules_views_max'}",3,"debug") if $debug;
				if ($banner{'datetime_publish_stop'})
				{
					$banner{'hours_remaining'}||=1;
					my $speed=int($banner{'stats_views'}/$banner{'hours_running'})||1;
					my $speed_need=int(($banner{'rules_views_max'}-$banner{'stats_views'})/$banner{'hours_remaining'})||1;
					my $weight_=int($speed_need/$speed);
					main::_log(" running $banner{'hours_running'}hrs remaining $banner{'hours_remaining'}hrs, speed $speed/h, required $speed_need/h multiply $weight_*",3,"debug") if $debug;
					$weight*=$weight_;
				}
			}
			
			if ($banner{'rules_clicks_max'})
			{
				main::_log(" rules_clicks_max=$banner{'rules_clicks_max'}",3,"debug") if $debug;
				if ($banner{'datetime_publish_stop'})
				{
					$banner{'hours_remaining'}||=1;
					my $speed=int($banner{'stats_clicks'}/$banner{'hours_running'})||1;
					my $speed_need=int(($banner{'rules_clicks_max'}-$banner{'stats_clicks'})/$banner{'hours_remaining'})||1;
					my $weight_=int($speed_need/$speed);
					main::_log(" running $banner{'hours_running'}hrs remaining $banner{'hours_remaining'}hrs, speed $speed/h, required $speed_need/h multiply $weight_*",3,"debug") if $debug;
					$weight*=$weight_;
				}
			}
			
			# cim viac videni v mojej session, tym viac zhorsit viditelnost
			if ($banner{'stats_session_views'})
			{
				main::_log(" stats_session_views=$banner{'stats_session_views'}",3,"debug") if $debug;
				my $weight_=1/$banner{'stats_session_views'};
				main::_log(" multiply $weight_*",3,"debug") if $debug;
				$weight*=$weight_;
			}
			
			if ($banner{'stats_session_clicks'})
			{
				main::_log(" stats_session_clicks=$banner{'stats_session_clicks'}",3,"debug") if $debug;
				my $weight_=0.1/$banner{'stats_session_clicks'};
				main::_log(" multiply $weight_*",3,"debug") if $debug;
				$weight*=$weight_;
			}
			
			if ($banner{'rules_views_session_max'})
			{
				main::_log(" rules_views_session_max=$banner{'rules_views_session_max'}",3,"debug") if $debug;
#				my $probability = int(($banner{'rules_views_session_max'} / $env->{'session_pages'}) * 100);
#				main::_log(" probability = $probability%",3,"debug") if $debug;
#				$banner{'probability'} = $probability;
			}
			if ($banner{'rules_views_browser_session_max'})
			{
				main::_log(" rules_views_browser_session_max=$banner{'rules_views_browser_session_max'}",3,"debug") if $debug;
#				my $probability = int(($banner{'rules_views_browser_session_max'} / $env->{'session_pages'}) * 100);
#				main::_log(" probability = $probability%",3,"debug") if $debug;
#				$banner{'probability'} = $probability;
			}
			
			$banner{'weight'}=int($weight*$banner{'rules_weight'})||1;
			
			main::_log(" weight=$banner{'weight'}",3,"debug") if $debug;
			
		}
		
		push @banners,\%banner;
#		push @{$data->{'items'}},\%banner;
	}
	
	if ($env->{'calculate'} && @banners)
	{
		main::_log("calculation") if $debug;
		my $weights;foreach my $banner (@banners){$weights+=$banner->{'weight'};}
		
		for my $i(1 .. $env->{'page_limit'})
		{
			main::_log("[$i/$env->{'page_limit'}] get banner from pool",3,"debug") if $debug;
			for (1..10) # 10 pokusov
			{
				main::_log("try $_:",3,"debug") if $debug;
				my $number=int(rand($weights));
				my $weights_;
				my $found;
				my $banners_valid;
				foreach my $banner (@banners)
				{
					$weights_+=$banner->{'weight'};
					next if $banner->{'used'};
					
					$banners_valid++;
					
					if ($number >= ($weights_-$banner->{'weight'}) && $number < $weights_)
					{
						main::_log(" found banner number $banner->{'ID_entity'} weight=$banner->{'weight'} probability=".($banner->{'probability'}||100)."%",3,"debug") if $debug;
						
						if ($banner->{'probability'})
						{
							if (int(rand(100)) <= $banner->{'probability'})
							{
								$banner->{'used'}=1;
								push @{$data->{'items'}},$banner;
								$found=1;
								last;
							}
							else
							{
								$banner->{'used'}=1;
								$banners_valid--;
								main::_log(" probability with false result, skip",3,"debug") if $debug;
							}
						}
						else
						{
							$banner->{'used'}=1;
							push @{$data->{'items'}},$banner;
							$found=1;
							last;
						}
					}
				}
				last unless $banners_valid;
				last if $found;
			}
		}
		
	}
	else
	{
		my $i;
		foreach my $banner (@banners)
		{
			$i++;
			last if $i > $env->{'page_limit'};
			push @{$data->{'items'}},$banner;
		}
	}
	
return 1,$data}
1;
