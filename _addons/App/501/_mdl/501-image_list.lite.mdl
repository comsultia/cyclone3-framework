#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use encoding 'utf8';
use utf8;
use strict;



=head1 NAME

501-image_list.lite.mdl

=head1 DESCRIPTION

Lite list of images. Optimal to display gallery of thumbnails

=head1 DEPENDS

=over

=item *

L<App::501::_init|app/"501/_init.pm">

=back

=cut

use App::501::_init;



=head1 INPUTS

=over

=item *

B<-xlng_load> - load template internationalization file

=item *

B<db_name> - database name

=item *

B<image.ID_format> - ID of image format to display (image_format.ID)

=item *

B<image_attrs.ID_category> - comma separated list of articles ID_category (can be set with * suffix to select all subcategories - 5;2*;3;7)

=item *

B<image_format.name> - name of image format to display (image_format.name)

=item *

B<sql_limit> - limit to display (default '1')

=item *

B<sql_limit_start> - at start skip defined items

=item *

B<sql_order_by> - sql syntax to order by (default image.order_id DESC)

=back

=cut



=head1 XSGN

=over

=item *

B<TMP> - default

=item *

B<#previous#> B<#next#> - to skip to another offset

=item *

B<previous> B<next> - include into <#previous#> <#next#>

=item *

B<%offset%> - offset value (calculated from sql_limit input param)

=item *

B<#item#> - gateway to image item

=item *

B<item> - image item

=item *

B<%ID%> - image ID

=item *

B<%ID_entity%> - image ID_entity

=item *

B<%name%> - image name

=item *

B<%db_*%> - database variables

=item *

B<%fullsize.db_*%> - database variables of fullsize image

=item *

B<TMP_failure_no-data> - if defined, replaces TMP for empty database output

=back

=cut



sub execute
{
	my %env=@_;
	Tomahawk::GetXSGN('-convertvars'=>1) || return undef;
	
	if ($Tomahawk::mdl_C{'-xlng_load'})
	{
		main::_log("using xlng transformation");
		Tomahawk::GetXLNG() || return undef; # retrieve language xml
		Tomahawk::XLNGtoXSGN(); # implement XLNG into XSGN
	}
	
	$env{'db_name'}=$App::501::db_name unless $env{'db_name'};
	
	if (!$env{'image.ID_format'} && !$env{'image_file.ID_format'} && !$env{'image_format.name'})
	{
		$env{'image_format.name'}='thumbnail';
	}
	
	$env{'image_attrs.lng'}=$env{'lng'} unless $env{'image_attrs.lng'};
	$env{'image_attrs.status'}='Y' unless $env{'image_attrs.status'};
	$env{'sql_limit'}='1' unless $env{'sql_limit'};
	$env{'sql_order_by'}=$env{'sql_order'} || 'image.order_id DESC' unless $env{'sql_order_by'};
	
	if ($env{'sql_limit'}=~/^,/){$env{'sql_limit'}="0".$env{'sql_limit'};}
	if ($env{'sql_limit'}=~/^0,/ && $env{'sql_limit_start'})
	{
		$env{'sql_limit'}=~s/^(\d+),/$1+$env{'sql_limit_start'}.","/e;
	}
	
	my $sql_where;
	
	#$env{'ID_format'}
	if ($env{'image.ID_format'})
	{
		$sql_where.=" AND image.ID_format=$env{'image.ID_format'}";
	}
	elsif ($env{'image_format.name'})
	{
		$sql_where.=" AND image.ID_format_name='$env{'image_format.name'}'";
	}
#	elsif ($env{'format_name'})
#	{
#		$sql_where.=" AND image.ID_format_name='$env{'format.name'}'";
#	}
	elsif ($env{'image_file.ID_format'})
	{
		$sql_where.=" AND image.ID_format='$env{'image_file.ID_format'}'";
	}
	else
	{
		$sql_where.=" AND image.ID_format_name='thumbnail'";
	}
	
	# find ID_category LIKE *
	if ($env{'image_attrs.ID_category'}=~s/\*$//)
	{
		my $cat_sql=qq{
					SELECT
						ID_charindex
					FROM
						`$App::501::db_name`.a501_image_cat
					WHERE
						ID=$env{'image_attrs.ID_category'}
					LIMIT 1
		};
		$env{'image_attrs.ID_category'} = qq{
			SELECT
				ID
			FROM
				`$App::501::db_name`.a501_image_cat
			WHERE
				ID_charindex LIKE CONCAT(($cat_sql),"%") AND
				lng='$env{'image_attrs.lng'}' AND
				status IN ('$env{'image_attrs.status'}')
		};
	}
	elsif ($env{'image_attrs.ID_category'})
	{
		
	}
	
	if ($env{'image.ID_entity'})
	{
		$sql_where.=" AND image.ID_entity_image IN ('".
			(join "','", split(';',$env{'image.ID_entity'})).
			"')";
	}
	
	$sql_where.=" AND image.ID_category IN ($env{'image_attrs.ID_category'})"
		if $env{'image_attrs.ID_category'};
	
	if($env{'keywords'}){
		$env{'keywords'}=~s|,| |g;
		my @arr_keywords = split(/ /, $env{'keywords'});
		
		$sql_where.=" AND (";
		foreach(@arr_keywords){
			$sql_where.="image.keywords LIKE '%".TOM::Security::form::sql_escape($_)."%' ";
		}
		$sql_where.=")"
	}
	
	my $sql=qq{
		SELECT
			*
		FROM
			`$env{'db_name'}`.a501_image_view AS image
		WHERE
			image.status IN ('$env{'image_attrs.status'}') AND
			image.lng='$env{'image_attrs.lng'}'
			$sql_where
		ORDER BY
			$env{'sql_order_by'}
		LIMIT $env{'sql_limit'}
	};
	my %sth0=TOM::Database::SQL::execute($sql,'log'=>1,'-slave'=>1);
	
	if(!$sth0{'sth'})
	{
		main::_log("SQL can't be executed",1);
	}
	
	if(!$sth0{'rows'})
	{
		main::_log("err: could not fetch images");
	}
	
	main::_log("received ".$sth0{'rows'}." rows");
	
	# Line counter
	my $item_counter=0;
	
	while (my %db0_line=$sth0{'sth'}->fetchhash())
	{
		my $item=$XSGN{'item'};
		
      $item_counter++;
		
		$XSGN{'TMP'}=~s|<%name%>|$db0_line{'ID_category_name'}|g;
		$item=~s|<%db_(.*?)%>|$db0_line{$1}|g;
		
		my $sql=qq{
			SELECT
				*
			FROM
				`$env{'db_name'}`.a501_image_view AS image
			WHERE
				image.ID_entity_image = $db0_line{'ID_entity_image'} AND
				image.status IN ('$env{'image_attrs.status'}') AND
				image.lng='$env{'image_attrs.lng'}' AND
				image.ID_format=$App::501::image_format_fullsize_ID
			LIMIT 1
		};
		my %sth1=TOM::Database::SQL::execute($sql,'log'=>1,'-slave'=>1);
		if (my %db1_line=$sth1{'sth'}->fetchhash())
		{
			$item=~s|<%fullsize.db_(.*?)%>|$db1_line{$1}|g;
		}
		
#		foreach(keys %db0_line){
#			$item=~s|<%$_%>|$db0_line{$_}|g;
#		}
		
		if($XSGN{'TMP'}=~/<#item.$item_counter#>/)
		{
			$XSGN{'TMP'}=~s|<#item.$item_counter#>|$item|;
		}
		else
		{
			$XSGN{'TMP'}=~s|<#item#>|$item|;
		}
		
	}
	
	$XSGN{'TMP'}=~s|<%total_count%>|$item_counter|g;
	
	if ($env{'sql_limit'}=~/(\d+),(\d+)/)
	{
		$env{'offset'}=$1;
		$env{'count'}=$2;
	}
	else
	{
		$env{'count'}=$env{'sql_limit'};
	}
	
	
	# offset
	if ($env{'count'} && $item_counter >= $env{'count'}) # count
	{
		$XSGN{'next'}=~s|<%offset%>|$env{'offset'}+$env{'count'}|ge;
		$XSGN{'TMP'}=~s|<#next#>|$XSGN{'next'}|g;
	}
	if ($env{'offset'}-$env{'sql_limit_start'})
	{
		if ($env{'offset'}-$env{'count'}-$env{'sql_limit_start'}>0)
		{
			$XSGN{'previous'}=~s|<%offset%>|$env{'offset'}-$env{'count'}|ge;
		}
		else
		{
			$XSGN{'previous'}=~s|<%offset%>||ge;
		}
		$XSGN{'TMP'}=~s|<#previous#>|$XSGN{'previous'}|g;
	}
	
	
	if(!$item_counter)
	{
		if($XSGN{'TMP_failure_no-data'})
		{
			$XSGN{'TMP'} = $XSGN{'TMP_failure_no-data'};
		}
	}
	
	return 1;
}


our $authors="open\@comsultia.com";

=head1 AUTHORS

Comsultia, Ltd. (open@comsultia.com)

=cut

1;
