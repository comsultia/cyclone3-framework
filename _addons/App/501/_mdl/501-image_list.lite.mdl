#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use encoding 'utf8';
use utf8;
use strict;



=head1 NAME

501-image_list.lite.mdl

=head1 DESCRIPTION

Lite list of images. Optimal to display gallery of thumbnails

=head1 DEPENDS

=over

=item *

L<App::501::_init|app/"501/_init.pm">

=back

=cut

use App::501::_init;



=head1 INPUTS

=over

=item *

B<-xlng_load> - load template internationalization file

=item *

B<db_name> - database name

=item *

B<image.ID_format> - ID of image format to display (image_format.ID)

=item *

B<image_attrs.ID_category> - comma separated list of articles ID_category (can be set with * suffix to select all subcategories - 5;2*;3;7)

=item *

B<image_format.name> - name of image format to display (image_format.name)

=item *

B<sql_limit> - limit to display (default '1')

=item *

B<sql_limit_start> - at start skip defined items

=item *

B<sql_order_by> - sql syntax to order by (default image.order_id DESC)

=back

=cut



=head1 XSGN

=over

=item *

B<TMP> - default

=item *

B<#previous#> B<#next#> - to skip to another offset

=item *

B<previous> B<next> - include into <#previous#> <#next#>

=item *

B<%offset%> - offset value (calculated from sql_limit input param)

=item *

B<#item#> - gateway to image item

=item *

B<item> - image item

=item *

B<%ID%> - image ID

=item *

B<%ID_entity%> - image ID_entity

=item *

B<%name%> - image or image category name

=item *

B<%db_*%> - database variables

=item *

B<%fullsize.db_*%> - database variables of fullsize image

=item *

B<TMP_failure_no-data> - if defined, replaces TMP for empty database output

=back

=cut



sub execute
{
	my %env=@_;
	Tomahawk::GetXSGN('-convertvars'=>1) || return undef;
	
	if ($Tomahawk::mdl_C{'-xlng_load'})
	{
		main::_log("using xlng transformation");
		Tomahawk::GetXLNG() || return undef; # retrieve language xml
		Tomahawk::XLNGtoXSGN(); # implement XLNG into XSGN
	}
	
	$env{'db_name'}=$App::501::db_name unless $env{'db_name'};
	
	$env{'sql_limit'}='1' unless $env{'sql_limit'};
	
	if (not $env{'sql_limit'}=~/,/){$env{'sql_limit'}="0,".$env{'sql_limit'}}
	if ($env{'sql_limit'}=~/^,/){$env{'sql_limit'}="0".$env{'sql_limit'};}
	if ($env{'sql_limit'}=~/^0,/ && $env{'sql_limit_start'})
	{
		$env{'sql_limit'}=~s/^(\d+),/$1+$env{'sql_limit_start'}.","/e;
	}
	
	my $count_max;
	if ($env{'sql_limit'}=~/,(\d+)/)
	{
		$count_max=$1;
		$env{'sql_limit'}=~s/,(\d+)/",".($1+1)/e;
	}
	
	if (not $env{'sql_limit'}=~/^(\d+),(\d+)$/)
	{
		$env{'sql_limit'}='1';
	}
	
	$env{'sql_order_by'}=$env{'sql_order'} || 'image.order_id DESC' unless $env{'sql_order_by'};
	
	$env{'image_attrs.lng'}=$env{'lng'} unless $env{'image_attrs.lng'};
	
	$env{'image_attrs.status'}='Y' unless $env{'image_attrs.status'};
		my $status_sql=join "','", split('',$env{'image_attrs.status'});
	
	my $sql_where;
	
	my $sql_cat;
	foreach my $ID_category(split(';',$env{'image_attrs.ID_category'}))
	{
		next unless $ID_category;
		if ($ID_category=~s/\*$//)
		{
			next unless $ID_category;
			my $cat_sql=qq{
				SELECT
					ID_charindex
				FROM
					`$env{'db_name'}`.a501_image_cat
				WHERE
					ID=$ID_category
				LIMIT 1
			};
			$ID_category=qq{
				SELECT
					ID
				FROM
					`$env{'db_name'}`.a501_image_cat
				WHERE
					ID_charindex LIKE CONCAT(($cat_sql),"%") AND
					lng='$env{'image_attrs.lng'}' AND
					status IN ('$status_sql')
			};
		}
		$sql_cat.=" OR image.ID_category IN ($ID_category)";
		$sql_cat=~s/^ OR //;
	}
	if ($sql_cat)
	{
		$sql_where.=" AND (".$sql_cat.") ";
	}
	
	if ($env{'image.ID_entity'})
	{
		$sql_where.=" AND image.ID_entity_image IN ('".
			(join "','", split(';',$env{'image.ID_entity'})).
			"')";
	}
	
	if($env{'keywords'}){
		$env{'keywords'}=~s|,| |g;
		my @arr_keywords = split(/ /, $env{'keywords'});
		
		$sql_where.=" AND (";
		foreach(@arr_keywords){
			$sql_where.="image.keywords LIKE '%".TOM::Security::form::sql_escape($_)."%' OR ";
		}
		main::_log($sql_where);
		$sql_where=~s| OR $||;
		$sql_where.=")";
	}
	
	if ($env{'sql_where'})
	{
		$sql_where.=" AND ".$env{'sql_where'};
	}
	
	my $sql=qq{
		SELECT
			*
		FROM
			`$env{'db_name'}`.a501_image_view AS image
		WHERE
					image.status IN ('$status_sql')
			AND	image.lng='$env{'image_attrs.lng'}'
			AND	image.ID_format='1'
			$sql_where
		ORDER BY
			$env{'sql_order_by'}
		LIMIT
			$env{'sql_limit'}
	};
	my %sth0=TOM::Database::SQL::execute($sql,'log'=>1,'-slave'=>1);
	
	if(!$sth0{'sth'})
	{
		main::_log("SQL can't be executed",1);
	}
	
	if(!$sth0{'rows'})
	{
		main::_log("err: could not fetch images");
	}
	
	main::_log("received ".$sth0{'rows'}." rows");
	
	# Line counter
	my $item_counter=0;
	
	while (my %db0_line=$sth0{'sth'}->fetchhash())
	{
		$item_counter++;
		
		last if $count_max<$item_counter;
		
		my $item=$XSGN{'item'};
		$item=$XSGN{'item.odd'} if (($item_counter % 2) && (exists $XSGN{'item.odd'}));
		$item=$XSGN{'item.'.$item_counter} if (exists $XSGN{'item.'.$item_counter});
		
		$XSGN{'TMP'}=~s|<%name%>|$db0_line{'ID_category_name'}|g;
		
		if (my %db1_line=App::501::functions::get_image_file
			(
				'image.ID_entity' => $db0_line{'ID_entity_image'},
				'image_file.ID_format' => $App::501::image_format_fullsize_ID,
				'image_attrs.lng' => $env{'lng'}
			)
		)
		{
			$item=~s|<%fullsize.db_(.*?)%>|$db1_line{$1}|g;
		}
		
		if (my %db1_line=App::501::functions::get_image_file
			(
				'image.ID_entity' => $db0_line{'ID_entity_image'},
				'image_file.ID_format' => $env{'image.ID_format'} || $App::501::image_format_thumbnail_ID,
				'image_attrs.lng' => $env{'lng'}
			)
		)
		{
			$item=~s|<%db_(.*?)%>|$db1_line{$1}|g;
		}
		
		#$item=~s|<%db_(.*?)%>|$db0_line{$1}|g;
		
		#my $sql=qq{
		#	SELECT
		#		*
		#	FROM
		#		`$env{'db_name'}`.a501_image_view AS image
		#	WHERE
		#		image.ID_entity_image = $db0_line{'ID_entity_image'} AND
		#		image.status IN ('$env{'image_attrs.status'}') AND
		#		image.lng='$env{'image_attrs.lng'}' AND
		#		image.ID_format=$App::501::image_format_fullsize_ID
		#	LIMIT 1
		#};
		#my %sth1=TOM::Database::SQL::execute($sql,'log'=>1,'-slave'=>1);
		#if (my %db1_line=$sth1{'sth'}->fetchhash())
		#{
		#	$item=~s|<%fullsize.db_(.*?)%>|$db1_line{$1}|g;
		#}
		
#		foreach(keys %db0_line){
#			$item=~s|<%$_%>|$db0_line{$_}|g;
#		}
		
		$item=~s|<%item_number%>|$item_counter|g;
		
		if($XSGN{'TMP'}=~/<#item.$item_counter#>/)
		{
			$XSGN{'TMP'}=~s|<#item.$item_counter#>|$item|;
		}
		else
		{
			$XSGN{'TMP'}=~s|<#item#>|$item|;
		}
		
	}
	
	$XSGN{'TMP'}=~s|<%total_count%>|$item_counter|g;
	
	if ($env{'env.counter'})
	{
		$main::env{'count'}+=$item_counter;
	}
	
	if ($env{'sql_limit'}=~/(\d+),(\d+)/)
	{
		$env{'offset'}=$1;
		#$env{'count'}=$2;
	}
	else
	{
		#$env{'count'}=$env{'sql_limit'};
	}
	
	if($XSGN{'paging'})
	{
		if(
			($count_max && $item_counter >= $count_max && $count_max < $sth0{'rows'})
			||	($env{'offset'}-$env{'sql_limit_start'})
		){
			$XSGN{'TMP'}=~s|<#paging#>|$XSGN{'paging'}|g;
		}
	}
	
	if ($count_max && $item_counter >= $count_max && $count_max < $sth0{'rows'}) # count
	{
		$XSGN{'next'}=~s|<%offset%>|$env{'offset'}+$count_max|ge;
		$XSGN{'TMP'}=~s|<#next#>|$XSGN{'next'}|g;
	}
	if ($env{'offset'}-$env{'sql_limit_start'})
	{
		if ($env{'offset'} - $count_max - $env{'sql_limit_start'}>0)
		{
			$XSGN{'previous'}=~s|<%offset%>|$env{'offset'}-$count_max|ge;
		}
		else
		{
			$XSGN{'previous'}=~s|<%offset%>||ge;
		}
		$XSGN{'TMP'}=~s|<#previous#>|$XSGN{'previous'}|g;
	}
	
	$XSGN{'TMP.empty'}=$XSGN{'TMP_failure_no-data'} if $XSGN{'TMP_failure_no-data'}; #backwards compatibility
	
	if(!$item_counter)
	{
		if($XSGN{'TMP.empty'})
		{
			$XSGN{'TMP'} = $XSGN{'TMP.empty'};
		}
	}
	
	if($env{'image_attrs.ID_category'}=~/^([0-9]+)\*?$/)
	{
		my $ID_category=$1;
		my $sql=qq{
			SELECT
				name, name_url
			FROM
				`$env{'db_name'}`.`a501_image_cat`
			WHERE
						ID_entity=$ID_category
				AND	lng='$env{'image_attrs.lng'}'
				AND	status IN ('$status_sql')
		};
		my %sth0=TOM::Database::SQL::execute($sql,'quiet'=>1,'-slave'=>1,'-cache_auto_'=>60);
		
		if($sth0{'sth'})
		{
			if (my %db0_line=$sth0{'sth'}->fetchhash())
			{
				$XSGN{'TMP'}=~s|<%category_name%>|$db0_line{'name'}|g;
				$XSGN{'TMP'}=~s|<%category_name_url%>|$db0_line{'name_url'}|g;
			}
		}
	}
	
	return 1;
}


our $authors="open\@comsultia.com";

=head1 AUTHORS

Comsultia, Ltd. (open@comsultia.com)

=cut

1;
