#!/usr/bin/perl
package CRON::module;
use open ':utf8', ':std';
use encoding 'utf8';
use utf8;
use strict;

=head1 NAME

501-image_format.check.cron

=cut

=head1 DESCRIPTION

Automatically checks image_format items, its directories and depend image_file items. Converts and generates image_file items how in image_format items are defined

Checks !media image_format directories and its .htaccess rights

Checks all missing image_files (only check database entries)

Checks all image_formats which are updated or created as new

Checks all image_files which parents are changed

=head1 DEPENDS

=over

=item *

L<App::501::_init|app/"501/_init.pm">

=back

=cut

use App::501::_init;



=head1 INPUTS

=over

=item *

B<time_max> - max seconds to process (default 60*5 seconds)

=back

=cut



sub execute
{
	my %env=@_;
	
	# Check
	if (!$tom::addons{'a501'} || ($TOM::DB{'main'}{'name'} ne $App::501::db_name))
	{main::_log("not enabled, or set for another domain service");return 1;}
	
	my $lock=new TOM::lock($App::501::db_name."::a501:image_format.check") || return 1;
	
	alarm(0);
	$env{'time_max'}=60*5 unless $env{'time_max'};
	$env{'sql_limit'}='1000';
	
	# check directory of formats
	
	
	# check list of formats and its directories
	
	
	
	
	
	
	
	my $time_start=time();
	
	# find missing formats
	my $sql=qq{
		SELECT
			*
		FROM
			`$App::501::db_name`.a501_image_format
		WHERE
			status IN ('Y','L') AND
			required LIKE 'Y' AND
			name NOT LIKE 'original'
		ORDER BY
--			RAND()
			ID_charindex ASC
--		LIMIT 1
	};
	my %sth0=TOM::Database::SQL::execute($sql,'quiet'=>1,'-long'=>10);
	while (my %db0_line=$sth0{'sth'}->fetchhash())
	{
		main::_log("check image_files in image_format ID='$db0_line{'ID'}' name='$db0_line{'name'}'");
		
		# find all images without this format
		my $sql=qq{
			SELECT
				image.ID AS image_ID,
				image.ID_entity AS image_ID_entity,
				file.ID AS file_ID
			FROM
				`$App::501::db_name`.a501_image AS image
			LEFT JOIN `$App::501::db_name`.a501_image_file AS file ON
			(
				image.ID_entity = file.ID_entity AND
				file.ID_format = $db0_line{'ID'}
			)
			LEFT JOIN `$App::501::db_name`.a501_image_format AS format ON
			(
				format.ID_entity = $db0_line{'ID'}
			)
			WHERE
				image.status IN ('Y','N') AND
				(
					file.ID IS NULL OR
					(
						format.datetime_create > file.datetime_create
					)
				)
			GROUP BY
				image.ID_entity
			ORDER BY
				image.ID_entity DESC
			LIMIT
				$env{'sql_limit'}
		};
		my %sth1=TOM::Database::SQL::execute($sql,'quiet'=>1,'-long'=>10);
		while (my %db1_line=$sth1{'sth'}->fetchhash())
		{
			main::_log("image ID_entity='$db1_line{'image_ID_entity'}' with missing format '$db0_line{'name'}'");
			
			App::501::functions::image_file_generate(
				'image.ID_entity' => $db1_line{'image_ID_entity'},
				'image_format.ID' => $db0_line{'ID'}
			);
			
			if ($time_start+$env{'time_max'}<time())
			{
				main::_log("this job is running too long, exiting",1);
				return 1;
			}
			
		}
		
		# find parrent format
		my %format_parent=App::020::SQL::functions::tree::get_parent_ID(
			'ID' => $db0_line{'ID'},
			'db_h' => 'main',
			'db_name' => $App::501::db_name,
			'tb_name' => 'a501_image_format'
		);
		
		if ($format_parent{'ID'})
		{
			# find images which parent has been changed
			
			my $sql=qq{
				SELECT
					image.ID AS image_ID,
					image.ID_entity AS image_ID_entity,
					file1.ID AS file1_ID,
					file2.ID AS file2_ID
				FROM
					`$App::501::db_name`.a501_image AS image
				LEFT JOIN `$App::501::db_name`.a501_image_file AS file1 ON
				(
					image.ID_entity = file1.ID_entity AND
					file1.ID_format = $format_parent{'ID'}
				)
				LEFT JOIN `$App::501::db_name`.a501_image_file AS file2 ON
				(
					image.ID_entity = file2.ID_entity AND
					file2.ID_format = $db0_line{'ID'}
				)
				WHERE
					image.status IN ('Y','N') AND
					file1.status='Y' AND
					file2.status='Y' AND
					file1.datetime_create > file2.datetime_create
				ORDER BY
					image.ID_entity DESC
				LIMIT
					$env{'sql_limit'}
			};
			my %sth1=TOM::Database::SQL::execute($sql,'quiet'=>1,'-long'=>10);
			while (my %db1_line=$sth1{'sth'}->fetchhash())
			{
				main::_log("parent of image_file ID='$db1_line{'file2_ID'}' has been changed");
				
				App::501::functions::image_file_generate(
					'image.ID_entity' => $db1_line{'image_ID_entity'},
					'image_format.ID' => $db0_line{'ID'}
				);
				
				if ($time_start+$env{'time_max'}<time())
				{
					main::_log("this job is running too long, exiting",1);
					return 1;
				}
				
			}
			
		}
		
	}
	
	return 1
}



=head1 AUTHORS

Comsultia, Ltd. (open@comsultia.com)

=cut

1;
