#!/usr/bin/perl
package CRON::module;
use open ':utf8', ':std';
use encoding 'utf8';
use utf8;
use strict;

=head1 NAME

501-image_file.check.cron

=cut

=head1 DESCRIPTION

Automatically checks all image_file items, its directories and files. Removes entries with missing file, moves journalized files.

=head1 DEPENDS

=over

=item *

L<App::501::_init|app/"501/_init.pm">

=back

=cut

use App::501::_init;



=head1 INPUTS



=cut



sub execute
{
	my %env=@_;
	
	# Check
	if (!$tom::addons{'a501'} || ($TOM::DB{'main'}{'name'} ne $App::501::db_name))
	{main::_log("not enabled, or set for another domain service");return 1;}
	
	alarm(0);
	
	my $sql=qq{
		SELECT
			COUNT(*) AS cnt
		FROM
			`$App::501::db_name`.a501_image_file
	};
	my %sth0=TOM::Database::SQL::execute($sql,'quiet'=>1,'slave'=>1);
	my %db0_line=$sth0{'sth'}->fetchhash();
	my $rows=$db0_line{'cnt'};
	
	main::_log("total files=$rows");
	my $check_files=int($rows/10);
		$check_files=10000 if $check_files>10000;
	$check_files=$rows*2 if $env{'all'};
	
	$env{'check_days'}=7 unless $env{'check_days'};
	$env{'check_days'}=0 if $env{'all'};
	
	# find missing file
	main::_log("checking image_file items in image_file table");
	my $i;
	my $sql=qq{
		SELECT
			*,
			CONCAT(ID_format,'/',SUBSTR(ID,1,4),'/',name,'.',file_ext) AS file_path
		FROM
			`$App::501::db_name`.a501_image_file
		WHERE
			datetime_check <= DATE_SUB(NOW(),INTERVAL $env{'check_days'} DAY) OR datetime_check IS NULL AND
			status IN ('Y','N','T','L')
		ORDER BY
			datetime_check
		LIMIT
			$check_files
	};
	my %sth0=TOM::Database::SQL::execute($sql,'quiet'=>1,'slave'=>1);
	main::_log("checking $sth0{'rows'} files");
	while (my %db0_line=$sth0{'sth'}->fetchhash())
	{
		$i++;
		main::_log("[$i/$sth0{'rows'}] checked") if ($i/100 == int($i/100));
		
		if (!-e $tom::P_media.'/a501/image/file/'.$db0_line{'file_path'})
		{
			main::_log("file $db0_line{'file_path'} not exists (created at $db0_line{'datetime_create'})",1);
			TOM::Database::SQL::execute(qq{
				DELETE FROM `$App::501::db_name`.`a501_image_file`
				WHERE ID=$db0_line{'ID'} LIMIT 1
			},'quiet'=>1) if $env{'delete'};
		}
		else
		{
			TOM::Database::SQL::execute(qq{
				UPDATE `$App::501::db_name`.`a501_image_file`
				SET datetime_check=NOW()
				WHERE ID=$db0_line{'ID'} LIMIT 1
			},'quiet'=>1);
		}
		
	}
	
	
	# find missing files in file_j
	main::_log("checking image_file items in image_file_j table");
	my $i;
	my $sql=qq{
		SELECT
			*,
			CONCAT(ID_format,'/',SUBSTR(ID,1,4),'/',name,'.',file_ext) AS file_path
		FROM
			`$App::501::db_name`.a501_image_file_j
		WHERE
			(datetime_check <= DATE_SUB(NOW(),INTERVAL $env{'check_days'} DAY) OR datetime_check IS NULL) AND
			datetime_create <= DATE_SUB(NOW(),INTERVAL 3 DAY) -- don't check files moved today in journal 
		ORDER BY
			datetime_check
		LIMIT
			$check_files
	};
	my %sth0=TOM::Database::SQL::execute($sql,'quiet'=>1,'slave'=>1);
	main::_log("checking $sth0{'rows'} files");
	while (my %db0_line=$sth0{'sth'}->fetchhash())
	{
		$i++;
		main::_log("[$i/$sth0{'rows'}] checked") if ($i/100 == int($i/100));
		
		my $pth=$tom::P_media.'/a501/image/file_j/'.$db0_line{'file_path'};
		$pth=~s|/$db0_line{'name'}\.$db0_line{'file_ext'}$||;
		
		TOM::Database::SQL::execute(qq{
			UPDATE `$App::501::db_name`.`a501_image_file_j`
			SET datetime_check=NOW()
			WHERE ID=$db0_line{'ID'} AND datetime_create='$db0_line{'datetime_create'}' LIMIT 1
		},'quiet'=>1);
		
		if (!-d $pth)
		{
			File::Path::mkpath($pth);
			main::_log("creating directory '$pth'");
		}
		
		if (!-e $tom::P_media.'/a501/image/file_j/'.$db0_line{'file_path'})
		{
			# file_j/ not exists
			if (-e $tom::P_media.'/a501/image/file/'.$db0_line{'file_path'})
			{
				# file/ exists
				
				# check if this file is not required in file/
				my $sql=qq{
					SELECT
						ID,
						ID_format
					FROM
						`$App::501::db_name`.a501_image_file
					WHERE
						name='$db0_line{'name'}'
					LIMIT 1;
				};
				my %sth1=TOM::Database::SQL::execute($sql,'quiet'=>1);
				my %db1_line=$sth1{'sth'}->fetchhash();
				if ($db1_line{'ID'})
				{
					# i need this file in file/ directory, and in file_j/ is copy not required
					next;
				}
				elsif ($db0_line{'ID_format'} == $App::501::image_format_original_ID)
				{
					# this file in file/ is not longer required
					#
					# into journal only move original files
					# so, move to journal archive if journal of file is enabled
					main::_log("[$i/$sth0{'rows'}] move file/->file_j/ '$db0_line{'file_path'}'");
					my $out=File::Copy::move($tom::P_media.'/a501/image/file/'.$db0_line{'file_path'},
						$tom::P_media.'/a501/image/file_j/'.$db0_line{'file_path'});
					if (!$out)
					{
						main::_log("can't move: $!",1);
					}
				}
				else
				{
					# this file in file/ is not longer required
					# don't backup this file, remove it
					main::_log("[$i/$sth0{'rows'}] remove file/ '$db0_line{'file_path'}' (not found in image_file)");
					unlink $tom::P_media.'/a501/image/file/'.$db0_line{'file_path'};
				}
				
			}
			elsif ($db0_line{'ID_format'} == $App::501::image_format_original_ID)
			{
				# don't remove backup of original if not required by --delete param
				main::_log("[$i/$sth0{'rows'}] file_j $db0_line{'file_path'} not exists (not mounted partition?)",1);
				TOM::Database::SQL::execute(qq{
					DELETE FROM `$App::501::db_name`.`a501_image_file_j`
					WHERE
						ID=$db0_line{'ID'} AND
						name='$db0_line{'name'}' AND
						datetime_create='$db0_line{'datetime_create'}'
					LIMIT 1
				},'quiet'=>1) if $env{'delete'};
			}
			else
			{
				main::_log("[$i/$sth0{'rows'}] file_j $db0_line{'file_path'} not exists, removing from db");
				TOM::Database::SQL::execute(qq{
					DELETE FROM `$App::501::db_name`.`a501_image_file_j`
					WHERE
						ID=$db0_line{'ID'} AND
						name='$db0_line{'name'}' AND
						datetime_create='$db0_line{'datetime_create'}'
					LIMIT 1
				},'quiet'=>1);
			}
			
		}
		
		
	}
	
	
	main::_log("remove all old generated image_file items in image_file_j table");
	my $sql=qq{
		SELECT
			*,
			CONCAT(ID_format,'/',SUBSTR(ID,1,4),'/',name,'.',file_ext) AS file_path
		FROM
			`$App::501::db_name`.a501_image_file_j
		WHERE
			from_parent = 'Y' AND
			ID_format <> $App::501::image_format_original_ID AND
			datetime_create <= DATE_SUB(CURDATE(),INTERVAL $env{'check_days'} DAY)
		ORDER BY
			datetime_create
		LIMIT
			$check_files
	};
	my %sth0=TOM::Database::SQL::execute($sql,'quiet'=>1);
	while (my %db0_line=$sth0{'sth'}->fetchhash())
	{
		
		my $file=$tom::P_media.'/a501/image/file_j/'.$db0_line{'file_path'};
		
		if (!$db0_line{'name'})
		{
			TOM::Database::SQL::execute(qq{
				DELETE FROM `$App::501::db_name`.`a501_image_file_j`
				WHERE
					ID=$db0_line{'ID'} AND
					name='$db0_line{'name'}' AND
					datetime_create='$db0_line{'datetime_create'}'
				LIMIT 1
			},'quiet'=>1);
		}
		elsif (-e $file)
		{
			main::_log("remove file image_file_j.ID=$db0_line{'ID'} from='$db0_line{'datetime_create'}'");
			# very blind function!!! not controls if file is used by another entry in video_part_file_j table
			my $out=unlink $file;
			if (!$out){main::_log("can't remove: $!",1);}
			else
			{
				TOM::Database::SQL::execute(qq{
					DELETE FROM `$App::501::db_name`.`a501_image_file_j`
					WHERE
						ID=$db0_line{'ID'} AND
						name='$db0_line{'name'}' AND
						datetime_create='$db0_line{'datetime_create'}'
					LIMIT 1
				},'quiet'=>1);
			}
		}
	}
	
	$check_files=100 if $check_files>100; # don't remove more than 100 files
	if ($App::501::autoremove_old)
	{
		main::_log("remove all old generated image_file items in image_file table");
		my $sql=qq{
			SELECT
				a501_image_file.*,
				CONCAT(a501_image_file.ID_format,'/',SUBSTR(a501_image_file.ID,1,4),'/',a501_image_file.name,'.',a501_image_file.file_ext) AS file_path
			FROM
				`$App::501::db_name`.a501_image_file
			INNER JOIN `$App::501::db_name`.a501_image_format ON
			(
				a501_image_file.ID_format = a501_image_format.ID
			)
			WHERE
				a501_image_file.from_parent = 'Y' AND
				a501_image_file.ID_format <> $App::501::image_format_original_ID AND
				a501_image_file.datetime_create <= DATE_SUB(CURDATE(),INTERVAL 1 MONTH) AND
				(a501_image_format.required = "N" OR a501_image_format.status = "N" )
			ORDER BY
				a501_image_file.datetime_create
			LIMIT
				$check_files
		};
		my %sth0=TOM::Database::SQL::execute($sql,'quiet'=>1);
		while (my %db0_line=$sth0{'sth'}->fetchhash())
		{
			
			my $file=$tom::P_media.'/a501/image/file/'.$db0_line{'file_path'};
			
			if (!$db0_line{'name'})
			{
				next
			}
			elsif (-e $file)
			{
				main::_log("remove file image_file.ID=$db0_line{'ID'} from='$db0_line{'datetime_create'}'");
				# remove db entry to this image_file, allow to re-create it
				# file on disk will be removed in one of next executions by removing old files from image_file_j
				App::020::SQL::functions::update(
					'db_h' => $env{'db_h'},
					'db_name' => $App::501::db_name,
					'tb_name' => 'a501_image_file',
					'ID' => $db0_line{'ID'},
					'columns' => {
						'status' => "'D'",
					},
					'-journalize' => 1
				);
				# zmazem z hlavnej tabulky zmazany zaznam
				App::020::SQL::functions::_remove(
					'db_h' => $env{'db_h'},
					'db_name' => $App::501::db_name,
					'tb_name' => 'a501_image_file',
					'ID' => $db0_line{'ID'},
				);
				
				my $out=unlink $file;
				if (!$out){main::_log("can't remove: $!",1);}
				else
				{
					TOM::Database::SQL::execute(qq{
						DELETE FROM `$App::501::db_name`.`a501_image_file`
						WHERE
							ID=$db0_line{'ID'} AND
							name='$db0_line{'name'}' AND
							datetime_create='$db0_line{'datetime_create'}'
						LIMIT 1
					},'quiet'=>1);
				}
				
			}
		}
	}
	
	return 1
}



=head1 AUTHORS

Comsultia, Ltd. (open@comsultia.com)

=cut

1;
