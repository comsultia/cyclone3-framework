#!/usr/bin/perl
# áéíóú - USE UTF-8 !!!
package CRON::module;

=head1 NAME

110-universal_email.0.cron

=cut

=head1 DESCRIPTION

jedna sa o univerzalny cron, kde by boli udaje definovane len v
sql selecte, a bola by zobrazovane podla sablony, no nebolo by
potrebne dalsie prepocitavanie dat

=head1 CLAIMS

hlavicka webcomu

nadesignovanie vystupu zo selectu

ziadne preratavanie (tj. ani precenta ani nic)

okrem loga, ani ziadna grafika

=cut


=head1 DEPENDS

Kniznice:

 TOM::Net::HTTP::UserAgent
 Utils::datetime
 TOM::Utils::datetime
 TOM::Utils::vars
 TOM::Net::email
 TOM::Database::connect
 TOM::Database::SQL
 DateTime

=cut

use TOM::Net::HTTP::UserAgent; # detekcia a praca s UserAgentami
use Utils::datetime;
use TOM::Utils::datetime;
use TOM::Utils::vars;
use TOM::Net::email;
use TOM::Database::connect;
use TOM::Database::SQL;
use DateTime;

use strict;


=head1 SYNOPSIS

Volanie modulu v cron type:

 <MODULE>
    <VAR id="-global" value="1" />
    <VAR id="-category" value="110" />
    <VAR id="-name" value="universal_email" />
       <VAR id="type" value="name-of-stat" />
       <VAR id="to_email" value="<$TOM::contact{'DEV_list_farm'}>" />
 </MODULE>

Definovanie typu statistiky v module:

 %types=
 (
  'name-of-stat' =>
  {
   'db'=>'stats', # db_h name
   'sql'=> "
     SELECT
      *
     FROM TOM.a110_??????
     WHERE
      ??????
     LIMIT 0,50;",
   'title'=>"This is cool stat",
   'description'=>"This statistic description",
   'table-title'=>"Title of Table",
   'table-description'=>"Description of Table",
  },
 )

=cut

sub execute
{
	alarm(0);
	
	# last week
	my $dt = DateTime->new('year' => $main::Fyear,'month' => $main::Fmom,'day' => $main::Fmday);
	$dt->add('days'=>-7);
	my ($week_last_year, $week_last_number) = $dt->week;
	
	my %env=@_;
	
	$env{'type'} = 'empty' unless $env{'type'};
	$env{'to_email'} = $TOM::contact{'TOM'} unless $env{'to_email'};
	$env{'to_email'}=TOM::Utils::vars::unique_split($env{'to_email'});
	
		my $days=10;
		my $from=$main::time_current-(86400*($days+1));
		my %date=Utils::datetime::ctodatetime($from,format=>1);
		$from="$date{year}-$date{mom}-$date{mday}";
	
	my %types=
	(
		'IP-false' =>
		{
			'db'=>'stats',
			'sql'=>
			qq{
SELECT
	IP,
	user_agent AS 'UserAgent',
	COUNT(*) AS 'Requests',
	COUNT(DISTINCT(user_agent_name)) AS 'Browsers',
	COUNT(DISTINCT(IDhash)) AS 'Users',
	COUNT(DISTINCT(IDsession)) AS 'Sessions',
	COUNT(*)/COUNT(DISTINCT(IDhash)) AS 'RequestsPerUser',
	COUNT(*)/COUNT(DISTINCT(IDsession)) AS 'RequestsPerSession',
	COUNT(DISTINCT(IDsession))/COUNT(DISTINCT(IDhash)) AS 'SessionsPerUser'
FROM TOM.a110_weblog_rqs
WHERE
	reqtype IN ('B','m','w') AND
	reqdatetime>'$from'
GROUP BY IP
ORDER BY requests DESC
LIMIT 0,50 },
			'title'=>"Most used REMORE_ADDR IP",
			'description'=>"Most used REMORE_ADDR IP in browsers",
			'table-title'=>"Table of most used REMORE_ADDR IP in browsers",
			'table-description'=>"",
		},
		
		'IP-users' =>
		{
			'db'=>'stats',
			'sql'=>
			"
				SELECT
					IP,
					COUNT(*) AS requests,
					COUNT(DISTINCT(IDhash)) AS users,
					COUNT(DISTINCT(IDsession)) AS sessions,
					COUNT(*)/COUNT(DISTINCT(IDsession)) AS req_per_session,
					COUNT(DISTINCT(user_agent_name)) AS user_agents
				FROM `a110_weblog_rqs`
				WHERE
					reqdatetime>'$from'
				GROUP BY IP
				ORDER BY users DESC
				LIMIT 0,100;
			",
			'title'=>"Most used IP adresses",
			'description'=>"Most used IP adresses",
			'table-title'=>"",
			'table-description'=>"",
		},
		
		'IP-without_referer' =>
		{
			'db'=>'stats',
			'sql'=>
			"
				SELECT
					IP,
					COUNT(*) AS requests,
					COUNT(DISTINCT(IDhash)) AS users,
					COUNT(DISTINCT(IDsession)) AS sessions,
					COUNT(*)/COUNT(DISTINCT(IDsession)) AS req_per_session,
					COUNT(DISTINCT(user_agent_name)) AS user_agents,
					user_agent_name
				FROM `a110_weblog_rqs`
				WHERE
					referer='' AND
					reqdatetime>'$from'
				GROUP BY IP
				ORDER BY requests DESC
				LIMIT 0,100;
			",
			'title'=>"Most used IP adresses without referer",
			'description'=>"Most used IP adresses without referer",
			'table-title'=>"",
			'table-description'=>"",
		},
		
		'USRM-big_sessions' =>
		{
			'db'=>'stats',
			'sql'=>
			"
				SELECT
					IDhash,
					COUNT(*) AS requests,
					COUNT(DISTINCT(IDhash)) AS users,
					COUNT(DISTINCT(IDsession)) AS sessions,
					COUNT(*)/COUNT(DISTINCT(IDsession)) AS req_per_session,
					COUNT(DISTINCT(user_agent_name)) AS user_agents,
					user_agent_name
				FROM `a110_weblog_rqs`
				WHERE
					IDhash<>'' AND
					reqdatetime>'$from'
				GROUP BY IDhash
				HAVING requests>1000
				ORDER BY req_per_session DESC
				LIMIT 0,100;
			",
			'title'=>"Too many requests per session",
			'description'=>"Too many requests per session",
			'table-title'=>"",
			'table-description'=>"Ak ma niekto privela requests na session, urcite nejde o normalneho usera, ale o robot/vandaliser",
		},
		
		'agent_unknown' =>
		{
			'db'=>'stats',
			'sql'=>
			"
				SELECT user_agent,
					COUNT(*) AS requests,
					COUNT(DISTINCT(IDhash)) AS users,
					COUNT(*)/COUNT(DISTINCT(IDhash)) AS reqperuser
				FROM a110_weblog_rqs
				WHERE
					active='Y' AND
					user_agent_name IS NULL
				GROUP BY
					user_agent
				HAVING
					requests>1
				ORDER BY
					requests DESC
				LIMIT
					0,1000
			",
			'title'=>"Unknown user agents",
			'description'=>"",
			'table-title'=>"",
			'table-description'=>"",
		},
		
		'cache_efectivity' =>
		{
			'db'=>'sys',
			'sql'=>
			"
				SELECT
					ID_config,
					domain_sub,
					CONCAT(Capp,'-',Cmodule) AS module,
					Cid AS cache_type,
					CONCAT(COUNT( * ),'-',COUNT( DISTINCT(Cid_md5) )) AS count,
					SUM(loads) AS uses,
					SUM(loads)/COUNT(*) AS effectivity,
					SUM(LENGTH(body)) AS bytes,
					time_duration
				FROM TOM.a150_cache
				GROUP BY
					ID_config,domain_sub
				HAVING effectivity<10
				ORDER BY bytes DESC
			",
			'title'=>"Most ineffective caches",
			'description'=>"",
			'table-title'=>"",
			'table-description'=>"",
		},
		
		
		'TypeID_effectivity' =>
		{
			'db'=>"stats",
			'sql'=>
			"
				SELECT
					domain_sub,
					query_TID,
					COUNT(*) AS requests,
					AVG(load_req) AS load_req,
					AVG(load_proc) AS load_proc
				FROM TOM.a110_weblog_rqs
				WHERE
					reqdatetime>'$from'
				GROUP BY domain_sub, query_TID
				HAVING requests>1000
				ORDER BY load_req DESC
				LIMIT 0,100
			",
			'title'=>"Most ineffective TypeID",
			'description'=>"",
			'table-title'=>"",
			'table-description'=>"",
		},
		
		'domain_effectivity' =>
		{
			'db'=>"stats",
			'sql'=>
			"
				SELECT
					domain_sub,
					COUNT(*) AS requests,
					AVG(load_req) AS load_req,
					AVG(load_proc) AS load_proc
				FROM TOM.a110_weblog_rqs
				WHERE
					reqdatetime>'$from'
				GROUP BY domain_sub
				ORDER BY load_req DESC
			",
			'title'=>"Most ineffective domains",
			'description'=>"",
			'table-title'=>"",
			'table-description'=>"",
		},
		
		'agent_checker' =>
		{
			'db'=>"stats",
			'sql'=>
			"
				SELECT
					domain_sub,
					user_agent_name,
					IP,
					COUNT(*) AS requests
				FROM a110_weblog_rqs
				WHERE
					active='Y' AND
					reqtype='c' AND
					reqdatetime>'$from'
				GROUP BY domain_sub,user_agent_name,IP
				ORDER BY domain_sub,user_agent_name,IP ASC
			",
			'title'=>"List of used checkers (user_agents)",
			'description'=>"",
			'table-title'=>"",
			'table-description'=>"",
		},
		
		
		'robot_31days' =>
		{
			'db'=>"stats",
			'sql'=>
			"
				SELECT
					substring(reqdatetime,1,10) AS date,
					domain_sub,
					user_agent_name as robot,
					COUNT(*) as visits
				FROM
					a110_weblog_rqs
				WHERE
					reqtype='R' AND
					reqdatetime>'$from'
				GROUP BY
					substring(reqdatetime,1,10),domain_sub,user_agent_name
				ORDER BY 
					date DESC, domain_sub, visits DESC
			",
			'title'=>"Sites visited by search engine robots",
			'description'=>"",
			'table-title'=>"",
			'table-description'=>"",
		},
		
		
		'robot_hours' =>
		{
			'db'=>"stats",
			'sql'=>
			"
				SELECT
					user_agent_name as robot,
					substring(reqdatetime,12,2) AS date,
					COUNT(*) as visits
				FROM
					a110_weblog_rqs
				WHERE
					reqtype='R' AND
					reqdatetime>'$from'
				GROUP BY
					user_agent_name,
					substring(reqdatetime,12,2)
				ORDER BY
					robot,
					date,
					visits
			",
			'title'=>"Hours visited by robots",
			'description'=>"",
			'table-title'=>"",
			'table-description'=>"",
		},
		
		
		'domain_errors' =>
		{
			'db'=>"stats",
			'sql'=>
			"
				SELECT
					reqdatetime AS week,
					domain_sub AS domain,
					visits_all AS all_pages,
					visits_failed AS failed_pages,
					CONCAT((visits_failed/visits_all)*100,'%') AS percent
				FROM
					a110_weblog_week
				WHERE
					domain_sub<>'' AND
					visits_failed>1
				GROUP BY
					reqdatetime,
					domain_sub
				HAVING
					week LIKE '$week_last_year/$week_last_number'
				ORDER BY
					reqdatetime DESC,
					((visits_failed/visits_all)*100) DESC
				LIMIT 20
			",
			'title'=>"TOP-20 najbugovejsich portalov",
			'description'=>"Tabulka je zoradena podla percenta chybovosti portalu",
			'table-title'=>"",
			'table-description'=>"percent = kolko percent stranok zo vsetkych vygenerovanych stranok bolo chybnych",
		},
		
		'obsolete' => 
		{
			'db'=>"stats",
			'sql'=>"
				SELECT
					func_filename,
					func,
					call_filename,
					COUNT(*) AS calls
				FROM a110_obsolete_log
				GROUP BY
					func_filename,
					func,
					call_filename
				ORDER BY
					calls DESC
				LIMIT 100
			",
			'title'=>"TOP-100 najpouzivanejsich miest obsolete funkcii",
			'description'=>"Tabulka je zoradena podla poctu volani obsolete funkcie",
			'table-title'=>"",
			'table-description'=>"",
		},
		
		'empty' =>
		{
			'sql'=>
			"
			",
			'title'=>"",
			'description'=>"",
			'table-title'=>"",
			'table-description'=>"",
		},
		
		
		
	);
	
	my $db=$types{$env{'type'}}{'db'};
	$db="main" unless $db;
	
	my $tpl=new TOM::Template(
		'level' => "auto",
		'name' => "email-stats",
		'content-type' => "xhtml"
	);
	
	# STATS SELECT
	my $sql_stats = $types{$env{'type'}}{'sql'};
	
	# Nalejem do designu
	my $date = TOM::Utils::datetime::mail_current();
	
	# statisticky select je definovany na zaciatku
	my %sth0=TOM::Database::SQL::execute($sql_stats,'db_h'=>$db,'log'=>1);
	my $db_stats = $sth0{'sth'};
	
	my $line_count = $sth0{'rows'};
	
	next unless $line_count;
	
	my $col_count = $db_stats->numfields;
	my @col_names = $db_stats->name;
	
	my $counter_line = 0;
	my $counter_col = 0;
	
	
	
	# list of columns
	foreach my $col_name ( @col_names )
	{
		$counter_col++;
		my $col = $tpl->{'entity'}{'email.table.col.name'};
		$col =~ s|<%name%>|$col_name|g;
		$tpl->{'entity'}{'email.table'}=~s|<#email.table.col.name#>|$col|g;
	}
	
	# email header
	$tpl->{'entity'}{'email.xhtml'}=~s|<%main-title%>|$types{$env{'type'}}{'title'}|g;
	$tpl->{'entity'}{'email.table'} =~ s|<%main-term%>||g;
	$tpl->{'entity'}{'email.xhtml'}=~s|<%main-desc%>|$types{$env{'type'}}{'description'}|g;
	
	# table header
	$tpl->{'entity'}{'email.table'} =~ s|<%title%>|$types{$env{'type'}}{'table-title'}|g;
	$tpl->{'entity'}{'email.table'} =~ s|<%colscount%>|$counter_col|g;
	
	while ( my %db0_line = $sth0{'sth'}->fetchhash )
	{
		$counter_line++;
		my $line = $tpl->{'entity'}{'email.table.line'};
		
		# idem naliat hodnoty jednotlivych stlpcov
		$counter_col = 0;
		
		foreach my $col_name(@col_names)
		{
			$counter_col++;
			$db0_line{$col_name} = "&nbsp;" unless $db0_line{$col_name};
			
			my $col = $tpl->{'entity'}{'email.table.col.value'};
			$col =~ s|<%value%>|$db0_line{$col_name}|g;
			$line =~ s|<#email.table.col.value#>|$col|g;
		}
		
		$tpl->{'entity'}{'email.table'} =~ s|<#email.table.line#>|$line|g;
		
	}
	
	# nalejem do HTML
	$tpl->{'entity'}{'email.xhtml'} =~ s|<#email.content#>|$tpl->{'entity'}{'email.table'}|;
	
	# cleaning
	$tpl->{'entity'}{'email.xhtml'} =~ s|<#.*?#>||gs;
	$tpl->{'entity'}{'email.xhtml'} =~ s|<%.*?%>||gs;
	
	#----------------------------------------------------------------
	# Completing mail
	my $date = TOM::Utils::datetime::mail_current();
	
	my $ent = MIME::Entity->build
	(
		'Type'    => 'multipart/related',
		'From'    => '"Cyclone3 ('.$TOM::hostname.')" <'.$TOM::contact{'from'}.'>',
		'To'      => TOM::Net::email::convert_TO($env{'to_email'}),
		'Subject' => "Cyclone3 Stats: Most Important Unsolved Tickets",
		'Date'    => $date,
	);
	
	$ent->attach
	(
		'Data' => $tpl->{'entity'}{'email.xhtml'},
		'Type' => "text/html;charset=\"UTF-8\"",
#		'Encoding' => "8bit",
	);
	
	$ent->attach
	(
		'Path'       => $tpl->{'file'}{'cyclone3-150x44.png'}{'dst'},
		'Type'       => "image/gif",
		'Content-ID' => "<logo\@cyclone3.org>",
		'Encoding'   => "base64"
	);
	
	TOM::Net::email::send
	(
		'to' => $env{'to_email'},
		'body' => $ent->as_string()
	);
	
	return 1;
}


our $authors = "gregor\@webcom.sk;roman.fordinal\@comsultia.com";

=head1 AUTHORS

gregor@webcom.sk; roman.fordinal@comsultia.com;

=cut

1;
