#!/bin/perl
# USE UTF-8 !!!
package CRON::module;

=head1 NAME

110-weblog_collect.hour.cron

=head1 DESCRIPTION

Fills data into table TOM.a110_weblog_hour from TOM.a110_weblog_rqs

=head1 DEPENDS

=over

=item *

L<App::110::_init|app/"110/_init.pm">

=item *

Time::Local

=back

=cut

use Time::Local;
use App::110::_init;
use strict;

sub execute
{
	alarm(0);
	my %env=@_;
	my $lock=new TOM::lock("weblog collect hour") || return 1;
	
	TOM::Database::connect::multi('stats') || die "cannot connect all databases";
	
	my $max_hours=12; # 1200% speed (every one hour collect data from 12 hours)
	
	
	
	# finding last collected hour
	
	my $time_startat;
	my $time_from;
	my %last_collected_hour=App::110::SQL::get_last_collected_hour();
	if ($last_collected_hour{'reqdatetime'})
	{
		$time_startat=$last_collected_hour{'reqdatetime'};
		main::_log("last data collected from hour \"$time_startat\"");
	}
	else
	{
		$time_startat="1970-01-01 00";
		main::_log("none data collected in TOM.a110_weblog_hour",1);
	}
	
	# add one hour
	my ($year,$month,$day,$hour)=($time_startat=~/^(\d\d\d\d)-(\d\d)-(\d\d) (\d\d)/);
	$time_from=Time::Local::timelocal(undef,1,$hour,$day,$month-1,$year-1900,undef,undef,undef)+3600;
	my %date=Utils::datetime::ctodatetime($time_from,format=>1);
	$time_startat="$date{year}-$date{mom}-$date{mday} $date{hour}";
	
	main::_log("data collecting starting in hour \"$time_startat\"='$time_from'");
	
	
	
	# finding last active request in TOM.a110_weblog_rqs
	
	my $time_endat;
	my $time_to;
	my %last_request=App::110::SQL::get_last_active_request();
	if ($last_request{'reqtime'})
	{
		$time_to=$last_request{'reqtime'}-3600;
		main::_log("last active row TOM.a110_weblog_rqs has time ='$time_to'");
	}
	else
	{
		main::_log("none rows in TOM.a110_weblog_rqs - can't create statistics...");
		return 1;
	}
	
	
	
	# finding first active request in TOM.a110_weblog_rqs starting last collected hour
	
	main::_log("finding first active request in TOM.a110_weblog_rqs starting last collected hour");
	my $sql=qq{
		SELECT
			reqdatetime,
			reqtime
		FROM
			TOM.a110_weblog_rqs
		WHERE
			reqdatetime>='$time_startat' AND
			reqtime<'$time_to' AND
			active='Y'
		ORDER BY
			reqdatetime ASC
		LIMIT 1;
	};
	my %sth0=TOM::Database::SQL::execute($sql,'db_h'=>"stats",'quiet'=>1);
	if (my %db0_line=$sth0{'sth'}->fetchhash())
	{
		$time_startat=$db0_line{'reqdatetime'};
		my ($year,$month,$day,$hour)=($time_startat=~/^(\d\d\d\d)-(\d\d)-(\d\d) (\d\d)/);
		$time_from=Time::Local::timelocal(undef,1,$hour,$day,$month-1,$year-1900,undef,undef,undef);
		my %date=Utils::datetime::ctodatetime($time_from,format=>1);
		$time_startat="$date{year}-$date{mom}-$date{mday} $date{hour}";
		main::_log("first active row TOM.a110_weblog_rqs hast time ='$time_startat'='$db0_line{'reqtime'}'");
	}
	else
	{
		main::_log("none available rows in TOM.a110_weblog_rqs - can't collect data",1);
		return 1;
	}
	
	
	
	# don't analyze more than 12x hour at once
	if ($time_to>$time_from+(3600*$max_hours))
	{
		$time_to=$time_from+(3600*$max_hours);
		main::_log("too much hours, chaning time to ='$time_to'");
	}
	
	my %date=Utils::datetime::ctodatetime($time_to,format=>1);
	$time_endat="$date{year}-$date{mom}-$date{mday} $date{hour}:00:00";
	
	main::_log("last datetime available for data mining \"$time_endat\"='$time_to'");
	
	main::_log("collecting from='$time_startat' to='$time_endat'");
	if ($time_endat=~/^$time_startat/)
	{
		main::_log("cannot create statistics...",1);
		return 1;
	}
	
	
	# START COLLECTING DATA
	
	my $sql=qq{
		SELECT
			reqdatetime,
			domain,
			domain_sub,
			COUNT(*),
			COUNT(DISTINCT(IF(IDhash='',NULL,IDhash))),
			COUNT(DISTINCT(IF(IDsession='',NULL,IDsession))),
			COUNT(DISTINCT(IP)),
			AVG(load_proc),
			AVG(load_req)
		FROM
			TOM.a110_weblog_rqs
		WHERE
			reqdatetime >= '$time_startat' AND
			reqdatetime < '$time_endat' AND
			reqtype IN ('B','m','w')
		GROUP BY
			substring(1,13,reqdatetime),domain,domain_sub
		ORDER BY
			reqdatetime
	};
	my %sth0=TOM::Database::SQL::execute($sql,'db_h'=>"stats");
	my $i;
	my $i_=$sth0{'rows'};
	while (my @db0_line=$sth0{'sth'}->fetchrow)
	{
		my $tid0000;
		my $direct;
		my $all;
		my $IDhashs_return;
		my $visits_failed;
		$i++;
		
		my $date=$db0_line[0];$date=~s|:\d\d:\d\d$||;
		my $db1=$main::DB{stats}->Query("
			SELECT
				COUNT(*)
			FROM
				TOM.a110_weblog_rqs
			WHERE
				substring(1,13,reqdatetime) = '$date' AND
				query_TID IN ('l_default','l_0000','m_default','g_default') AND
				reqtype='B' AND
				reqtype IN ('B','m','w') AND
				domain_sub='$db0_line[2]'
		");
		if (my @db1_line=$db1->fetchrow)
		{
			$tid0000=$db1_line[0];
		}
		
		# ALL requests
		my $db1=$main::DB{stats}->Query("
			SELECT COUNT(*)
			FROM TOM.a110_weblog_rqs
			WHERE
				substring(1,13,reqdatetime) = '$date' AND
				domain_sub='$db0_line[2]'");
		if (my @db1_line=$db1->fetchrow)
		{
			$all=$db1_line[0];
		}
		
		my $db1=$main::DB{stats}->Query("
			SELECT
				COUNT(*)
			FROM
				TOM.a110_weblog_rqs
			WHERE
				substring(1,13,reqdatetime) = '$date' AND
				page_code_referer='' AND
				reqtype IN ('B','m','w') AND
				domain_sub='$db0_line[2]'
		");
		if (my @db1_line=$db1->fetchrow)
		{
			$direct=$db1_line[0];
		}
		
		# vracajucich sa uzivatelom musim pocitat tak ze spocitam vsetkych unikatnych
		# uzivatelov a odpocitam od nich novych uzivatelov
		# je tomu tak preto, lebo keby som priamo ratal vracajucich sa uzivatelov, ratal by som
		# i tych ktory sa pocas tohto obdobia "registrovali" a stihli este aj vratit - a to je chyba
		# potrebujem vediet len uzivatelov ktory sa "neregistrovali" pocas tohto obdobia, a teda
		# POCET VRACAJUCICH UZIVATELOV =
		# POCET UZIVATELOV KTORI PRISLI Z PREDCHADZAJUCEHO MERANEHO OBDOBIA
		my $db1=$main::DB{stats}->Query("
			SELECT
				COUNT(DISTINCT(IDhash))
			FROM
				TOM.a110_weblog_rqs
			WHERE
				substring(1,13,reqdatetime) = '$date' AND
				USRM_flag IN ('G','R') AND
				reqtype IN ('B','m','w') AND
				domain_sub='$db0_line[2]'
		");
		if (my @db1_line=$db1->fetchrow)
		{
			$IDhashs_return=$db0_line[4]-$db1_line[0];
		}
		
		my $db1=$main::DB{stats}->Query("
			SELECT
				COUNT(*)
			FROM
				TOM.a110_weblog_rqs
			WHERE
				substring(1,13,reqdatetime) = '$date' AND
				result='failed' AND
				domain_sub='$db0_line[2]'
		");
		if (my @db1_line=$db1->fetchrow)
		{
			$visits_failed=$db1_line[0];
		}
		
		main::_log("[$date:00:00][$i/$i_] domain:$db0_line[1] sub:$db0_line[2] visits:$db0_line[3] users:$db0_line[4] users_return:$IDhashs_return sessions:$db0_line[5] IP:$db0_line[6] load_proc:$db0_line[7] load_req:$db0_line[8] 0000:$tid0000 direct:$direct");
		
		$main::DB{stats}->Query("
		REPLACE INTO TOM.a110_weblog_hour
		(
			reqdatetime,
			domain,
			domain_sub,
			visits,
			visits_all,
			visits_direct,
			visits_firstpage,
			visits_failed,
			IPs,
			IDhashs,
			IDhashs_return,
			IDsessions,
			load_proc,
			load_req)
		VALUES
		(
			'$date:00:00',
			'$db0_line[1]',
			'$db0_line[2]',
			'$db0_line[3]',
			'$all',
			'$direct',
			'$tid0000',
			'$visits_failed',
			'$db0_line[6]',
			'$db0_line[4]',
			'$IDhashs_return',
			'$db0_line[5]',
			'$db0_line[7]',
			'$db0_line[8]'
			)
		") || die "cannot insert!";
	}
	
	# return 1;
	
	my $sql=qq{
		SELECT
			reqdatetime,
			domain,
			COUNT(*),
			COUNT(DISTINCT(IDhash)),
			COUNT(DISTINCT(IDsession)),
			COUNT(DISTINCT(IP)),
			AVG(load_proc),
			AVG(load_req)
		FROM
			TOM.a110_weblog_rqs
		WHERE
			reqdatetime>='$time_startat' AND
			reqdatetime<'$time_endat' AND
			reqtype IN ('B','m','w')
		GROUP BY
			substring(1,13,reqdatetime),domain
		ORDER BY
			reqdatetime
	};
	
	my %sth0=TOM::Database::SQL::execute($sql,'db_h'=>"stats");
	my $i;
	my $i_=$sth0{'rows'};
	while (my @db0_line=$sth0{'sth'}->fetchrow)
	{
		my $tid0000;
		my $direct;
		my $all;
		my $IDhashs_return;
		my $visits_failed;
		$i++;
		
		my $date=$db0_line[0];$date=~s|:\d\d:\d\d$||;
		my $db1=$main::DB{stats}->Query("
			SELECT
				COUNT(*)
			FROM
				TOM.a110_weblog_rqs
			WHERE
				substring(1,13,reqdatetime) = '$date' AND
				query_TID IN ('l_default','l_0000','m_default','g_default') AND
				reqtype IN ('B','m','w') AND
				domain='$db0_line[1]'");
		if (my @db1_line=$db1->fetchrow)
		{
			$tid0000=$db1_line[0];
		}
		
		# idem vyselectovat pocet VSETKYCH requestov
		my $db1=$main::DB{stats}->Query("
			SELECT
				COUNT(*)
			FROM
				TOM.a110_weblog_rqs
			WHERE
				substring(1,13,reqdatetime) = '$date' AND
				domain='$db0_line[1]'
		");
		if (my @db1_line=$db1->fetchrow)
		{
			$all=$db1_line[0];
		}
		
		my $db1=$main::DB{stats}->Query("
		SELECT
			COUNT(*)
		FROM
			TOM.a110_weblog_rqs
		WHERE
			substring(1,13,reqdatetime) = '$date' AND
			page_code_referer='' AND
			reqtype IN ('B','m','w') AND
			domain='$db0_line[1]'
		");
		if (my @db1_line=$db1->fetchrow)
		{
			$direct=$db1_line[0];
		}
		
		my $db1=$main::DB{stats}->Query("
			SELECT
				COUNT(DISTINCT(IDhash))
			FROM
				TOM.a110_weblog_rqs
			WHERE
				substring(1,13,reqdatetime) = '$date' AND
				USRM_flag IN ('G','R') AND
				reqtype IN ('B','m','w') AND
				domain='$db0_line[1]'
		");
		if (my @db1_line=$db1->fetchrow)
		{
			$IDhashs_return=$db0_line[3]-$db1_line[0];
		}
		
		my $db1=$main::DB{stats}->Query("
			SELECT
				COUNT(*)
			FROM
				TOM.a110_weblog_rqs
			WHERE
				substring(1,13,reqdatetime) = '$date' AND
				result='failed' AND
				domain='$db0_line[1]'
		");
		if (my @db1_line=$db1->fetchrow)
		{
			$visits_failed=$db1_line[0];
		}
		
		main::_log("[$date:00:00][$i/$i_] DOMAIN:$db0_line[1] visits:$db0_line[2] users:$db0_line[3] users_return:$IDhashs_return sessions:$db0_line[4] IP:$db0_line[5] load_proc:$db0_line[6] load_req:$db0_line[7] 0000:$tid0000 direct:$direct");
		
		$main::DB{stats}->Query("
			REPLACE INTO TOM.a110_weblog_hour
			(	reqdatetime,
				domain,
				domain_sub,
				visits,
				visits_all,
				visits_direct,
				visits_firstpage,
				visits_failed,
				IPs,
				IDhashs,
				IDhashs_return,
				IDsessions,
				load_proc,
				load_req)
			VALUES
			(	'$date:00:00',
				'$db0_line[1]',
				'',
				'$db0_line[2]',
				'$all',
				'$direct',
				'$tid0000',
				'$visits_failed',
				'$db0_line[5]',
				'$db0_line[3]',
				'$IDhashs_return',
				'$db0_line[4]',
				'$db0_line[6]',
				'$db0_line[7]'
				)
		") || die "cannot insert!";
	}
	
return 1}

=head1 AUTHORS

Roman Fordinal (roman.fordinal@comsultia.com)

=cut

1;
