#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8;
use strict;


use App::520::_init;


sub execute
{
	my %env=@_;
	my %env_out;
	
	$env{'check_audio_part_file'} = 1 unless exists $env{'check_audio_part_file'};
	$env{'audio_format.ID_entity'} = $App::520::audio_format_full_ID unless $env{'audio_format.ID_entity'};
#	$env{'audio_part'} = 1 unless exists $env{'audio_part'};
#	$env{'audio_part_file'} = 1 unless exists $env{'audio_part_file'};
	
	$env{'datetime_mode'}="present" unless $env{'datetime_mode'};
	
	# get template
	Tomahawk::GetTpl(\%env) || return undef;
	
	my @sql_bind;
	my $sql_where;
	my $sql_changetime;
	my $sql_limit=$env{'sql_limit'} || 1;
	my $sql_order_by=$env{'sql_order_by'} || 'audio.datetime_rec_start DESC';
	
	if ($env{'datetime_mode'} eq "present")
	{
		$sql_where.=" AND audio_attrs.datetime_publish_start <= NOW()";
		$sql_where.=" AND (audio_attrs.datetime_publish_stop IS NULL OR audio_attrs.datetime_publish_stop >= NOW())";
	}
	
	if ($env{'audio.ID_entity'})
	{
		main::_log("search by audio.ID_entity");
		push @{$env_out{'entity'}},{
			'db_h' => 'main',
			'db_name' => $App::520::db_name,
			'tb_name' => 'a520_audio',
			'ID_entity' => $env{'audio.ID_entity'}
		};
		$sql_where.="AND audio.ID_entity=? ";
		push @sql_bind,$env{'audio.ID_entity'};
		$sql_changetime=App::020::SQL::functions::_get_changetime(
			{
				'db_h'=>"main",
				'db_name' => $App::520::db_name,
				'tb_name' => "a520_audio",
				'ID_entity' => $env{'audio.ID_entity'}
			}
		);
	}
	else
	{
		if ($env{'audio_cat.ID'})
		{
			my %data=App::020::SQL::functions::get_ID(
				'db_h'    => 'main',
				'db_name' => $App::520::db_name,
				'tb_name' => 'a520_audio_cat',
				'ID'      => $env{'audio_cat.ID'},
				'columns' => {'ID_entity' => 1}
			);
			push @{$env_out{'entity'}},{
				'db_h' => 'main',
				'db_name' => $App::520::db_name,
				'tb_name' => 'a520_audio_cat',
				'ID_entity' => $data{'ID_entity'}
			};
		}
		elsif ($env{'audio_cat.ID_entity'})
		{
			my $sql_cat;
			foreach my $ID_category (split(';',$env{'audio_cat.ID_entity'}))
			{
				next unless $ID_category;
				if ($ID_category=~s/\*$//)
				{
					my $cat_sql=qq{SELECT ID_charindex FROM $App::520::db_name.a520_audio_cat WHERE ID_entity=$ID_category AND lng='$env{'lng'}' AND status IN ('Y','L') LIMIT 1};
					$ID_category=qq{SELECT ID_entity FROM $App::520::db_name.a520_audio_cat WHERE ID_charindex LIKE CONCAT(($cat_sql),"%") AND lng='$env{'lng'}' AND status IN ('Y','L')};
				}
				$sql_cat.=" OR audio_attrs.ID_category IN ($ID_category)";
				$sql_cat=~s/^ OR //;
			}
			if ($sql_cat)
			{
				$sql_where.=" AND (".$sql_cat.") ";
			}
		}
	}
	
	return 1 unless $sql_where;
	
	
	my %sth0=TOM::Database::SQL::execute(qq{
		SELECT
			audio.ID,
			audio.ID_entity,
			audio.datetime_rec_start,
			audio.datetime_rec_stop,
			audio_ent.posix_owner AS ent_posix_owner,
			audio_ent.posix_author AS ent_posix_author,
			audio_ent.keywords AS ent_keywords,
			audio_ent.metadata AS ent_metadata,
			audio_attrs.name AS attrs_name,
			audio_attrs.name_url AS attrs_name_url,
			audio_attrs.description AS attrs_description,
			audio_cat.ID AS cat_ID,
			audio_cat.ID_entity AS cat_ID_entity,
			audio_cat.name AS cat_name,
			audio_cat.name_url AS cat_name_url}.do{if ($env{'check_audio_part_file'}){qq{,
			audio_part.ID AS part_ID,
			audio_part.ID_entity AS part_ID_entity,
			audio_part_smil.name AS smil_name,
			audio_part_file.ID AS file_ID,
			audio_part_file.ID_entity AS file_ID_entity,
			audio_part_file.name AS file_name,
			audio_part_file.audio_codec AS file_audio_codec,
			audio_part_file.audio_bitrate AS file_audio_bitrate,
			audio_part_file.length AS file_length}}}.qq{
		FROM
			`$App::520::db_name`.a520_audio AS audio
		INNER JOIN `$App::520::db_name`.a520_audio_ent AS audio_ent ON
		(
			audio_ent.ID_entity = audio.ID_entity AND
			audio_ent.status IN ('Y','L')
		)
		INNER JOIN `$App::520::db_name`.a520_audio_attrs AS audio_attrs ON
		(
			audio_attrs.ID_entity = audio.ID AND
			audio_attrs.lng = '$env{'lng'}' AND
			audio_attrs.status IN ('Y','L')
		)
		LEFT JOIN `$App::520::db_name`.a520_audio_cat AS audio_cat ON
		(
			audio_cat.ID_entity = audio_attrs.ID_category AND
			audio_cat.lng = audio_attrs.lng AND
			audio_cat.status IN ('Y','L')
		)}.do{if ($env{'check_audio_part_file'}){qq{
		INNER JOIN `$App::520::db_name`.a520_audio_part AS audio_part ON
		(
			audio_part.ID_entity = audio.ID_entity AND
			audio_part.status IN ('Y','L')
		)
		INNER JOIN `$App::520::db_name`.a520_audio_part_file AS audio_part_file ON
		(
			audio_part_file.ID_entity = audio_part.ID AND
			audio_part_file.status IN ('Y','L') AND
			audio_part_file.ID_format = $env{'audio_format.ID_entity'}
		)
		LEFT JOIN `$App::520::db_name`.`a520_audio_part_smil` AS audio_part_smil ON
		(
			audio_part_smil.ID_entity = audio_part.ID
		)
		}}}.qq{
		WHERE
			audio.status IN ('Y','L')
			$sql_where
		ORDER BY
			$sql_order_by
		LIMIT
			$sql_limit
	},'bind'=>[@sql_bind],'log'=>1,'-slave'=>1,'-cache_'=>86400*7,
		'-cache_changetime' => App::020::SQL::functions::_get_changetime({
			'db_h'=>"main",'db_name'=>$App::520::db_name,'tb_name'=>"a520_audio",'ID_entity'=>$env{'audio.ID_entity'}
		})
	);
	my %audio=$sth0{'sth'}->fetchhash();
	
	if (!$audio{'ID_entity'})
	{
		main::_log("audio not found",1);
		return 1,%env_out;
	}
	
	main::_log("found audio.ID_entity=$audio{'ID_entity'}");
	
	
	push @{$env_out{'entity'}},{
		'db_h' => 'main',
		'db_name' => $App::520::db_name,
		'tb_name' => 'a520_audio',
		'ID_entity' => $audio{'ID_entity'}
	};
	
	push @{$env_out{'call'}{'H'}{'add_DOC_keywords'}},$audio{'ent_keywords'}
		if $env{'header.keywords'};
	
	push @{$env_out{'call'}{'H'}{'add_DOC_title'}},$audio{'attrs_name'}
		if $env{'header.title'};
#	push @{$env_out{'call'}{'H'}{'change_DOC_description'}},ucfirst($description);
	
	if ($audio{'cat_ID'})
	{
		# link to a210_page
		if (my $category=App::520::functions::_a210_by_cat([$audio{'cat_ID'}],'lng'=>$env{'lng'}))
		{
			my %sql_def=('db_h' => "main",'db_name' => $App::210::db_name,'tb_name' => "a210_page");
			foreach my $p(
				App::020::SQL::functions::tree::get_path(
					$category,
					%sql_def,
					'-slave' => 1,
					'-cache' => 86400*7
				)
			)
			{
				push @{$audio{'a210'}{'IDs'}}, $p->{'ID'};
				push @{$audio{'a210'}{'nodes'}}, $p;
				$audio{'a210'}{'path_url'}.="/".$p->{'name_url'};
			}
			$audio{'a210'}{'path_url'}=~s|^/||;
		}
	}
	
	if ($audio{'part_ID_entity'})
	{
		$audio{'related_thumbnail'}=(App::160::SQL::get_relations(
			'db_name' => $App::520::db_name,
			'l_prefix' => 'a520',
			'l_table' => 'audio_part',
			'l_ID_entity' => $audio{'part_ID'},
			'r_prefix' => "a501",
			'r_table' => "image",
			'rel_type' => "thumbnail",
			'status' => "Y"
		))[0];
		if ($audio{'related_thumbnail'} && $audio{'related_thumbnail'}->{'r_ID_entity'})
		{
			push @{$env_out{'entity'}},{
				'db_h' => 'main',
				'db_name' => $App::501::db_name,
				'tb_name' => 'a501_image',
				'ID_entity' => $audio{'related_thumbnail'}->{'r_ID_entity'}
			};
		}
	}
	
	if ($env{'header.og'})
	{
		push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:title','content'=>$audio{'attrs_name'}};
		push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:site_name','content' => $tom::H};
		push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:type','content'=>'article'};
		
		if ($audio{'related_thumbnail'}->{'r_ID_entity'})
		{
			my %image=App::501::functions::get_image_file(
				'image.ID_entity' => $audio{'related_thumbnail'}->{'r_ID_entity'},
				'image_file.ID_format' => $env{'header.og.image_format.ID'} || $App::501::image_format_thumbnail_ID,
				'image_attrs.lng' => $env{'lng'}
			);
			push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:image','content'=>$tom::H_a501.'/image/file/'.$image{'file_path'}};
		}
		
	}
	
	
	if ($env{'audio_part'})
	{
		my @sql_bind;
		my $sql_where;
		
		if ($env{'audio_part.ID'})
		{
			$sql_where.="AND audio_part.ID=? ";
			push @sql_bind,$env{'audio_part.ID'};
		}
		
		my %sth0=TOM::Database::SQL::execute(qq{
			SELECT
				audio_part.ID,
				audio_part.ID_entity,
				audio_part.ID_brick,
				audio_part.part_id,
				audio_part.visits,
				audio_part.rating_score,
				audio_part.rating_votes,
				audio_part.rating,
				audio_part.keywords,
				audio_part_smil.name AS smil_name,
				audio_part_attrs.name,
				audio_part_attrs.name_url,
				audio_part_attrs.datetime_create,
				audio_part_attrs.description,
				audio_part_file.length AS file_length
			FROM
				$App::520::db_name.a520_audio_part AS audio_part
			INNER JOIN $App::520::db_name.a520_audio_part_attrs AS audio_part_attrs ON
			(
				audio_part_attrs.ID_entity = audio_part.ID AND
				audio_part_attrs.status IN ('Y','L')
			)}.do{if ($env{'check_audio_part_file'}){qq{
			INNER JOIN $App::520::db_name.a520_audio_part_file AS audio_part_file ON
			(
				audio_part_file.ID_entity = audio_part.ID AND
				audio_part_file.status IN ('Y','L') AND
				audio_part_file.ID_format = $env{'audio_format.ID_entity'}
			)
			LEFT JOIN `$App::520::db_name`.`a520_audio_part_smil` AS audio_part_smil ON
			(
				audio_part_smil.ID_entity = audio_part.ID
			)}}}.qq{
			WHERE
				audio_part.status IN ('Y','L') AND
				audio_part.ID_entity = ?
				$sql_where
			ORDER BY
				part_id ASC
		},'bind'=>[$audio{'ID_entity'},@sql_bind],'quiet'=>1);
		while (my %audio_part=$sth0{'sth'}->fetchhash())
		{
			
			if ($env{'audio_part_file'})
			{
				my %sth0=TOM::Database::SQL::execute(qq{
					SELECT
						audio_part_file.*,
						audio_format.name AS audio_format_name
					FROM
						$App::520::db_name.a520_audio_part_file AS audio_part_file
					INNER JOIN $App::520::db_name.a520_audio_format AS audio_format ON
					(
						audio_format.ID_entity = audio_part_file.ID_format
					)
					WHERE
						audio_part_file.status IN ('Y','L') AND
						audio_part_file.ID_entity = ?
					ORDER BY
						audio_part_file.ID_format ASC
				},'bind'=>[$audio_part{'ID'}],'quiet'=>1);
				while (my %audio_part_file=$sth0{'sth'}->fetchhash())
				{
					push @{$audio_part{'file'}}, \%audio_part_file;
				}
			}
			
			push @{$env_out{'entity'}},{
				'db_h' => 'main',
				'db_name' => $App::520::db_name,
				'tb_name' => 'a520_audio_part',
				'ID_entity' => $audio_part{'ID_entity'}
			};
			
			push @{$audio{'part'}}, \%audio_part;
		}
		
		my %sth1=TOM::Database::SQL::execute(qq{
			SELECT
				SEC_TO_TIME(SUM(file.length)) AS length
			FROM
				`$App::520::db_name`.a520_audio_part AS audio_part
			LEFT JOIN `$App::520::db_name`.a520_audio_part_file AS file ON
			(
				file.ID_entity = audio_part.ID AND
				file.ID_format = $App::520::audio_format_original_ID
			)
			WHERE
				audio_part.ID_entity = ? AND
				audio_part.status IN ('Y','N','L')
		},'quiet'=>1,'bind'=>[$audio{'ID_entity'}],'-slave'=>1,'-cache'=>3600,
			'-cache_changetime' => App::020::SQL::functions::_get_changetime({
				'db_h'=>"main",'db_name'=>$App::520::db_name,'tb_name'=>"a520_audio",'ID_entity'=>$audio{'ID_entity'}
		}));
		my %db1_line=$sth1{'sth'}->fetchhash();
		$audio{'length'} = $db1_line{'length'};
		main::_log("audio length=$audio{'length'}");
		
	}
	
	$TPL->{'variables'}{'audio'} = \%audio;
	
	return 1,%env_out;
}

1;
