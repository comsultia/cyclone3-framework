#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use encoding 'utf8';
use utf8;
use strict;


use App::210::_init;
use App::420::_init;


sub execute
{
	my %env=@_;
	my %env_out;
	
	$env{'static.status'}='Y' unless $env{'static.status'};
		my $sql_static_status=join "','", split('',$env{'static.status'});
	
	$env{'static_cat.ID'} = $env{'static.ID_category'} if $env{'static.ID_category'};
	
	# paging
	$env{'page_limit'} = 10 unless $env{'page_limit'};
	$env{'page'} = 1 unless $env{'page'};
	$env{'page_offset'} = 0 unless $env{'page_offset'};
	$env{'page_plus'} = 1 unless $env{'page_plus'};
	if (!$env{'sql_limit'})
	{
		$env{'sql_limit'}=((($env{'page'}-1)*$env{'page_limit'})+$env{'page_offset'}).",".($env{'page_limit'}+$env{'page_plus'});
	}
	else
	{
#		$env{'sql_limit'}=~/^(\d+),?(\d+)?$/;
	}
	
	
	my @sql_bind;
	my $sql_where;
	my $sql_changetime;
	my $sql_limit=$env{'sql_limit'} || 10;
	my $sql_order_by=$env{'sql_order_by'} || '`static`.`datetime_start` DESC';
	my $sql_group_by;
	
	if ($env{'unique'})
	{
		$sql_group_by="`static`.`ID_entity`";
	}
	
	if ($env{'static_cat.ID_entity'})
	{
		my $sql_cat;
		foreach my $ID_category (split(';',$env{'static_cat.ID_entity'}))
		{
			next unless $ID_category;
			if ($ID_category=~s/\*$//)
			{
				my $cat_sql=qq{SELECT `ID_charindex` FROM `$App::420::db_name`.`a420_static_cat` WHERE `ID_entity`=$ID_category AND `status` IN ('Y','L') LIMIT 1};
				$sql_cat.=qq{ OR `static_cat`.`ID_charindex` LIKE CONCAT(($cat_sql),"%")};
			}
			else
			{
				$sql_cat.=" OR `static_cat`.`ID_entity`=$ID_category";
				push @{$env_out{'entity'}},{
					'db_h' => 'main',
					'db_name' => $App::420::db_name,
					'tb_name' => 'a420_static_cat',
					'ID_entity' => $ID_category,
				};
			}
			$sql_cat=~s/^ OR //;
		}
		if ($sql_cat)
		{
			$sql_where.=" AND (".$sql_cat.") ";
		}
	}
	
	if ($env{'static_cat.ID'})
	{
		my $sql_cat;
		foreach my $ID_category (split(';',$env{'static_cat.ID'}))
		{
			next unless $ID_category;
			if ($ID_category=~s/\*$//)
			{
				my $cat_sql=qq{SELECT `ID_charindex` FROM `$App::420::db_name`.`a420_static_cat` WHERE `ID`=$ID_category AND `status` IN ('Y','L') LIMIT 1};
				$sql_cat.=qq{ OR `static_cat`.`ID_charindex` LIKE CONCAT(($cat_sql),"%")};
			}
			else
			{
				$sql_cat.=" OR `static`.`ID_category`=$ID_category";
			}
			$sql_cat=~s/^ OR //;
		}
		if ($sql_cat)
		{
			$sql_where.=" AND (".$sql_cat.") ";
		}
	}
	
=head1
	if ($env{'solr'})
	{
		$env{'solr.defType'} = 'edismax' unless $env{'solr.defType'};
		$env{'solr.rows'} = 10 unless $env{'solr.rows'};
		$env{'solr.start'} = 0 unless $env{'solr.start'};
		$env{'solr.qf'} = "title name name_partial cat_name_sm^0.2 cat_name_tm^0.2 description^0.8 keywords^2 text^0.5" unless $env{'solr.qf'};
		
		if ($env{'solr.keywords'})
		{
			my $query=$env{'solr.keywords'};
			1 while ($query=~s|  | |g);
			$query=~s|^ ||g;
			$query=~s| $||g;
			my @query_part=split(' ',$query);$query='';
			my $part_last;
			foreach my $part(@query_part){
				$part=~s|\-|\\-|g;
				$query.="$part AND ";
				$part_last=$part;
			}
			$query=~s| AND $part_last AND $| AND ($part_last OR $part_last*)|;
			$query=~s|^$part_last AND $|$part_last OR $part_last*|;
			$query=~s| AND $||;
			$env{'solr.q'}="AND (".$query.")";
		}
		
		if ($env{'solr.related_keywords'})
		{
			my $query=$env{'solr.related_keywords'};
			1 while ($query=~s|  | |g);
			$query=~s|^ ||g;
			$query=~s| $||g;
			my @query_part=split(' ',$query);$query='';
			my $part_last;
			foreach my $part(@query_part){
				$part=~s|\-|\\-|g;
				$query.="$part ";
				$part_last=$part;
			}
			$query=~s| $||;
			$env{'solr.q'}="AND (".$query.")";
		}
		
		use Ext::Solr::_init;
		my $solr = Ext::Solr::service();
		
		my $response = $solr->search('+id:'.($App::510::db_name).'.a510_video.'.$env{'lng'}.'.* '.$env{'solr.q'},
			{
				'-cluster' => 1,
				
				'defType' => $env{'solr.defType'},
				
				'rows' => $env{'solr.rows'},
				'start' => $env{'solr.start'},
				
				'bq' => $env{'solr.bq'},
				'qf' => $env{'solr.qf'},
				'fl' => "id ID_i ID_entity_i score ".$env{'solr.fl'},
			}
		);
		
		$env{'video.ID_entity'}="";
		for my $doc ( $response->docs )
		{
			$env{'video.ID_entity'}.=$doc->value_for('ID_entity_i').";";
		}
		
	}
=cut
	
=head1
	if ($env{'video.ID_entity'}=~/;/)
	{
		$sql_where.=" AND video.ID_entity IN (".join(',',split(';',$env{'video.ID_entity'})).")";
		$sql_limit=scalar split(';',$env{'video.ID_entity'});
		if ($env{'solr'})
		{
			$sql_group_by="video.ID_entity";
			$sql_order_by="CASE\n";
			my $i;
			foreach (split(';',$env{'video.ID_entity'}))
			{
				$i++;
				$sql_order_by.="\t\t\t\tWHEN video.ID_entity=$_ THEN $i\n";
			}
			$sql_order_by.="\t\t\tEND";
		}
	}
=cut
	
	$sql_where.=" AND ".$env{'sql_where'} if $env{'sql_where'};
	
	$sql_where=~s|^ ||;
	
	# get template
	Tomahawk::GetTpl('env' => \%env) || return undef;
	
	use App::020::mimetypes::html;
	my $parser=new App::020::mimetypes::html(
		'tpl_ext' => $TPL # extend
	);
	
	my $i;
	my %sth0=TOM::Database::SQL::execute(qq{
		SELECT
			
			`static`.`ID_entity`,
			`static`.`ID`,
			`static`.`ID_category`,
			
			`static_cat`.`ID` AS `cat_ID`,
			`static_cat`.`ID_entity` AS `cat_ID_entity`,
			`static_cat`.`name` AS `cat_name`,
			`static_cat`.`name_url` AS `cat_name_url`,
			
			`static`.`name`,
			`static`.`name_url`,
			`static`.`alias_url`,
			`static`.`posix_owner`,
			`static`.`posix_modified`,
			`static`.`datetime_start`,
			`static`.`datetime_stop`,
			`static`.`body`,
			`static`.`metadata`,
			`static`.`status`
			
		FROM `$App::420::db_name`.`a420_static` AS `static`
		INNER JOIN `$App::420::db_name`.`a420_static_cat` AS `static_cat` ON
		(
			`static_cat`.`ID` = `static`.`ID_category`
		)
		WHERE
			`static`.`status` = 'Y'
			$sql_where}.do{if($sql_group_by){qq{
		GROUP BY
			$sql_group_by}}}.qq{
		ORDER BY
			$sql_order_by
		LIMIT
			$sql_limit
	},'bind'=>[@sql_bind],'log'=>1,'-slave'=>1,
		'-changetime'=>App::020::SQL::functions::_get_changetime(
			{
				'db_h'=>"main",
				'db_name' => $App::420::db_name,
				'tb_name' => "a420_static",
				'ID_entity' => do{$env{'static.ID_entity'} if $env{'static.ID_entity'}=~/^\d+$/}
			}),
	);
	
	$TPL->{'variables'}->{'rows'}=$sth0{'rows'};
	while (my %static=$sth0{'sth'}->fetchhash())
	{
		$i++;
		last if $i > $env{'page_limit'};
		
		main::_log("[$i/$env{'page_limit'}] found static.ID_entity=$static{'ID_entity'}");
		
		push @{$env_out{'entity'}},{
			'db_h' => 'main',
			'db_name' => $App::420::db_name,
			'tb_name' => 'a420_static',
			'ID_entity' => $static{'ID_entity'}
		};
		
=head1
		# link to a210_page
		if (my $category=App::401::functions::_a210_by_cat([$article{'cat_ID'}],'lng'=>$env{'lng'}))
		{
			my %sql_def=('db_h' => "main",'db_name' => $App::210::db_name,'tb_name' => "a210_page");
			foreach my $p(
				App::020::SQL::functions::tree::get_path(
					$category,
					%sql_def,
					'-slave' => 1,
					'-cache' => 86400*7
				)
			)
			{
				push @{$article{'a210'}{'IDs'}}, $p->{'ID'};
				push @{$article{'a210'}{'nodes'}}, $p;
				$article{'a210'}{'path_url'}.="/".$p->{'name_url'};
			}
			$article{'a210'}{'path_url'}=~s|^/||;
		}
=cut
		
		if ($env{'parser.body'})
		{
			$parser->parse($static{'body'});
			$parser->eof();
			push @{$env_out{'entity'}},@{$parser->{'entity'}} if $parser->{'entity'}; # depend on this too
			$static{'body_parser'}={
				'output' => $parser->{'output'},
				'addon' => $parser->{'addon'},
				'entity' => $parser->{'entity'},
				'thumbnail' => $parser->{'thumbnail'},
			};
		}
		
		push @{$TPL->{'variables'}{'items'}},\%static;
	}
	
	return 1,%env_out;
}

1;
