#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use encoding 'utf8';
use utf8;
use strict;

=head1 NAME

500-mlist_m1.0.mdl

=head1 DESCRIPTION

Image listing.

=head1 DEPENDENCIES

No dependencies.

=head1 INPUTS

B<Design>:

=over

=item

B<xt_xlng> [1/0]: parameter for loading language file for design

=item

B<return_null> [1/0]: If it is 1 and no image is selected, blank or TMP_NO_DATA design is returned

=back

B<Selecting images>:

=over

=item

B<db_select> [varchar]: columns that should be selected from database (sql syntax)

Example:

 <VAR id="db_select" value="a500.ID, a500.hash, a500_attrs.about" />

=item

B<db_ID> [int]: IDs of images

Example 1:

 <VAR id="db_ID" value="12" />

Example 2:

 <VAR id="db_ID" value="12;13;14" />

=item

B<db_ID_exclude> [int,int,...]: IDs of images, that should not be selected (separated by semicolon)

Example 1:

 <VAR id="db_ID_exclude" value="12" />

Example 2:

 <VAR id="db_ID_exclude" value="12;13;14" />

=item

B<db_IDcategory> [varchar]: IDs of categories where image is placed

Example 1:

 <VAR id="db_IDcategory" value="0102" />

Example 2:

 <VAR id="db_IDcategory" value="0102;0103;0104" />

=item

B<db_IDcategory_exclude> [varchar]: IDs of image categories from which not to select images (separated by semicolon)

Example 1:

 <VAR id="db_IDcategory_exclude" value="0102" />

Example 2:

 <VAR id="db_IDcategory_exclude" value="0102;0103;0104" />

=item

B<db_format> [f/o/s/t] [default: t]: Image format

Example:

 <VAR id="db_format" value="o" />

=item

B<db_active> [1/0]: select only active images

=item

B<db_order_by> [varchar]: sql sorting rule

Example:

 <VAR id="db_order_by" value="a500.ID ASC" />

=item

B<db_where> [varchar]: additional SQL where

Example:

 <VAR id="db_where" value="a500_attrs.about like '%image1.jpg%'" />

=back

B<Paging>:

=over

=item

B<db_paging> [1/0]: turn on/off paging

=item

B<db_limit> [int]: maximum number of images per page

=item

B<db_page> [int]: number of the page (usually this is dynamic parameter)

Example:

 <VAR id="db_page" value="<$main::FORM{'page'}>" />

=back

B<Special inputs>:

=over

=item

B<db_format_PAGE_COUNTER> [f/o/s/t]: image format for page and count of image

Example:

 <VAR id="db_format_2_12" value="s" />

This example shows how to set special format "s" for the 2nd page and 12th image

=item

B<db_format_COUNTER> [f/o/s/t]: image format for certain image

Example:

 <VAR id="db_format_12" value="s" />

This example shows how to set special format "s" for the 12th image in order

=item

B<db_format_odd> [f/o/s/t]: image format for odd images

Example:

 <VAR id="db_format_odd" value="s" />

=item

B<datetime_allow> [1/0]: turn on/off extracting time variables from timestamp. More in XSGN section - Date and Time.

=item

B<about_cut> [int]: maximum length of "about" in image. Rest of the "about" text will be cutted off.

Cutting respects words, so it will be cutted from last space. And after will be added 3 dots.

=back

=head1 XSGN

B<Main>:

=over

=item

B<TMP>: main design

=back

B<Lines> [>B<&lt;#LINE#&gt;[TMP]>]:

=over

=item

B<LINE>: standard line design

=item

B<LINE_PAGE_COUNTER>: design of x-th line on y-th page

=item

B<LINE_COUNTER>: design of x-th line

=item

B<LINE_odd>: design of odd line

=item

B<&lt;%COLUMN%&gt;>: column from sql select

Example:

 SELECT a500.ID, a500.about ...

result

 <%ID%>
 <%about%>

=item

B<&lt;%IDcategory%&gt;>

=item

B<&lt;%IDcategory_name%&gt;>

=item

B<&lt;%IDauthor%&gt;>

=item

B<&lt;%IDauthor_fullname%&gt;>

=item

B<&lt;%IDauthor_nickname%&gt;>

=item

B<&lt;%IDeditor%&gt;>

=item

B<&lt;%IDeditor_fullname%&gt;>

=item

B<&lt;%IDeditor_nickname%&gt;>

=item

B<&lt;%alt%&gt;>

=item

B<&lt;%line_no%&gt;>

=item

B<&lt;%counter%&gt;>

=back

B<Date and Time> [>B<[LINE]>]

=over

=item

B<&lt;%day%&gt;>: day of month

=item

B<&lt;%day_name%&gt;>: day of week name in short form - Pon, Ut, St ... or Mon, Tue, Wed ...

=item

B<&lt;%day_name_long%&gt;>: day of week name full - Pondelok, Utorok, ... or Monday, Tuesday ...

=item

B<&lt;%month%&gt;>: month number

=item

B<&lt;%month_name%&gt;>: name of month in short form - Jan, Feb, ...

=item

B<&lt;%month_name_long%&gt;>: name of month full - Január, Február, ... or January, February ...

=item

B<&lt;%year%&gt;>: 4 digits year

=item

B<&lt;%hour%&gt;>: 2 digits hour

=item

B<&lt;%minute%&gt;>: 2 digits minute

=item

B<&lt;%second%&gt;>: 2 digits second

=item

This was variables for nowtime.

But similar usage is for other time information with prefixes - B<inserttime>, B<changetime>, B<lasttime>, B<starttime>, B<endtime>.

Example:

B<&lt;%inserttime_year%&gt;> OR

B<&lt;%endtime_month_name%&gt;>

=back

B<Paging>:

=over

=item

B<PAGING> [>B<&lt;#PAGING#&gt;[TMP]>]

=item

B<PAGING_PREV> [>B<&lt;#PAGING_PREV#&gt;[PAGING]>]

=item

B<PAGING_NEXT> [>B<&lt;#PAGING_NEXT#&gt;[PAGING]>]

=item

B<&lt;%page%&gt;> [>B<[PAGING_PREV,PAGING_NEXT]>]: number of the previous or next page

=item

B<&lt;%page_real%&gt;>: number of this page

=back

=cut

sub execute
{
	my %env=@_;

	$env{db_500}=Tomahawk::Getmdlvar("500","db") unless $env{db_500};
	$env{db_500}=$TOM::DB{main}{name} unless $env{db_500};

	$env{db_format}='t' unless $env{db_format};
	foreach(grep {/db_format.*?/} keys %env)
	{
		$env{$env{$_}.'_hash'}=Tomahawk::Getmdlvar("500",$env{$_}.'_hash',db=>$env{db_500}) unless (exists $env{$env{$_}.'_hash'});
		if($env{$env{$_}.'_hash'})
		{main::_log("$env{$_} is a hashed format");}
		else
		{main::_log("$env{$_} is not a hashed format");}
	}

	$env{db_limit}=10 unless $env{db_limit};

	if($env{db_limit}=~/^(.*?),(.*)$/)
	{
		$env{db_offset}=$1;
		$env{db_count}=$2;
	}
	else
	{
		$env{db_offset}=0;
		$env{db_count}=$env{db_limit};
	}

	if($env{db_paging})
	{
		if(!exists $env{db_page})
		{
			if(exists $main::FORM{a500mlistpage})
			{
				main::_log("you are using a deprecated way of paging! please use the 'db_page' parameter for sending page number, instead of automatic use of main::FORM{a500mlistpage}!");
				$env{db_page}=$main::FORM{a500mlistpage};
			}
			else
			{
				main::_log("missing 'db_page'! probably you are expecting automatic use of main::FORM{a500mlistpage}, which is deprecated. please use 'db_page' parameter, i.e. &lt;VAR id=\"db_page\" value=\"&lt;\$main::FORM{page}&gt;\" />");
			}
		}
		$env{db_page}=0 unless $env{db_page};
		$env{db_offset}=($env{db_page}*$env{db_count})+$env{db_offset};
		$env{db_limit}=$env{db_offset}.",".($env{db_count}+1);
		main::_log("listing with offset $env{db_offset} $env{db_from} requesting $env{db_count} articles plus 1 more for paging");
	}

	#loading only active images by default
	$env{db_active}=1 if (not exists  $env{db_active});
	
	if ($env{db_order_by}=~/ID/)
	{
		$env{db_order_by}=~s/ID/a500.ID/;
	}
	
	# setting default db_order_by
	$env{db_order_by}="a500_attrs.inserttime DESC" unless $env{db_order_by};
	$env{db_order_by}=~s|title|about|g;

	#parsing IDcategory
	if($env{db_where})
	{ $env{db_where}.=" AND " unless ($env{db_where}=~/ AND$/i); }

	if($env{db_ID})
	{
		$env{db_where}.="(";
		foreach my $tmp (split(";",$env{db_ID}))
		{
			$env{db_where}.="(a500.ID='$tmp') OR ";
		}
		$env{db_where}=~s|\) OR $|\)\) AND |;
	}

	if($env{db_ID_exclude})
	{
		$env{db_where}.="(";
		foreach my $tmp (split(";",$env{db_ID_exclude}))
		{
			$env{db_where}.="(a500.ID NOT LIKE '$tmp') OR ";
		}
		$env{db_where}=~s|\) OR $|\)\) AND |;
	}

	if($env{db_IDcategory})
	{
		$env{db_where}.="(";
		foreach my $tmp (split(";",$env{db_IDcategory}))
		{
			$env{db_where}.="(a500.IDcategory LIKE '$tmp%') OR ";
		}
		$env{db_where}=~s|\) OR $|\)\) AND |;
	}

	if($env{db_IDcategory_exclude})
	{
		foreach my $tmp (split(";",$env{db_IDcategory_exclude}))
		{
			$env{db_where}.="(a500.IDcategory NOT LIKE '$tmp') AND ";
		}
	}
	
	if ($env{'db_active'})
	{
		$env{db_where}.="a500.active='Y' AND ";
	}
	
	# setting default db_order_by
	$env{db_order_by}="a500.ID DESC" unless $env{db_order_by};
	
	my $sql=qq{
		SELECT
			a500.hash,
			a500.IDcategory,
			a500_attrs.*,
			a500.ID,
			a500_category.name
		FROM $env{db_500}.a500 AS a500
		LEFT JOIN $env{db_500}.a500_attrs AS a500_attrs ON a500.ID=a500_attrs.ID
		LEFT JOIN  $env{db_500}.a500_category AS a500_category ON a500.IDcategory=a500_category.ID
		WHERE
			$env{db_where}
			a500.format='$env{db_format}'
		ORDER BY
			$env{db_order_by}
		LIMIT
			$env{db_limit}
	};
	
	if ($env{'xuladmin'})
	{
		$sql=qq{
			SELECT
				a500.hash,
				a500.IDcategory,
				a500_attrs.*,
				a500.ID,
				a500_category.name
			FROM $env{db_500}.a500 AS a500
			LEFT JOIN $env{db_500}.a500_attrs AS a500_attrs ON a500.ID=a500_attrs.ID
			LEFT JOIN  $env{db_500}.a500_category AS a500_category ON a500.IDcategory=a500_category.ID
			WHERE
				$env{db_where}
				a500.format = 't' AND
				(a500.active='Y' OR a500.active='N')
			GROUP BY a500.ID
			ORDER BY
				$env{db_order_by}
			LIMIT
				$env{db_limit}
		};
	}
	
	main::_log($sql);

	my $list=$main::DBH->Query($sql);

	my $line_counter;

	if ($list)
	{
		main::_log("received ".$list->NumRows()." db lines");

		Tomahawk::GetXSGN(-convertvars=>1) || return undef; # load design file
		if (($env{xt_xlng}) || ($env{xlng}))
		{
			main::_log("using xlng transformation");
			if ($env{xlng}) { main::_log("WARNING! using deprecated parameter 'xlng'! please, use 'xt_xlng';"); }
			Tomahawk::GetXLNG() || return undef; # retrieve language xml
			Tomahawk::XLNGtoXSGN(); # implement XLNG into XSGN
		}

		if($env{db_IDcategory}=~/^([a-zA-Z0-9]*?)[%]?$/)
		{
			my $tmpID=$1;
			my $db0=$main::DB{main}->Query("
				SELECT
					name
				FROM $env{db_500}.a500_category
				WHERE
					ID='$tmpID'
				LIMIT 1
			");
			if (my %db0_line=$db0->fetchHash)
			{
				$XSGN{TMP}=~s|<%IDcategory_name%>|$db0_line{name}|g;
				#main::_log("a just - $db0_line{name}");
			}
			$XSGN{TMP}=~s|<%IDcategory%>|$tmpID|g;
		}
		else
		{$XSGN{TMP}=~s|<%IDcategory_name%>||g;}

		while (my %db_line=$list->fetchhash())
		{
			$XSGN{NULL}=undef;
			$line_counter++;
			if ($line_counter eq ($env{db_count}+1)) {main::_log("we have an exceeding line - allowing next page");last;}

			if(exists $XSGN{'LINE_'.$env{db_page}.'_'.$line_counter})
			{
				main::_log("adding special xsgn - LINE_".$env{db_page}."_".$line_counter);
				$XSGN{NULL}=$XSGN{'LINE_'.$env{db_page}.'_'.$line_counter};
			}
			elsif(exists $XSGN{'LINE_'.$line_counter})
			{
				main::_log("adding special xsgn - LINE_".$line_counter);
				$XSGN{NULL}=$XSGN{'LINE_'.$line_counter};
			}
			elsif ((not $line_counter % 2) && (exists $XSGN{LINE_odd})) #is this an odd line?
			{
				main::_log("adding special xsgn - LINE_odd");
				$XSGN{NULL}=$XSGN{LINE_odd};
			}
			else
			{
				$XSGN{NULL}=$XSGN{LINE};
			}

			my $tmp_ID=sprintf('%07d',$db_line{ID});

			if (exists $env{'db_format_'.$env{db_page}.'_'.$line_counter})
			{
				main::_log("setting special image format - db_format_".$env{db_page}."_".$line_counter." to ".$env{'db_format_'.$env{db_page}.'_'.$line_counter});
				$env{db_format_tmp}=$env{'db_format_'.$env{db_page}.'_'.$line_counter};
			}
			elsif (exists $env{'db_format_'.$line_counter})
			{
				main::_log("setting special image format - db_format_".$line_counter." to ".$env{'db_format_'.$line_counter});
				$env{db_format_tmp}=$env{'db_format_'.$line_counter};
			}
			elsif ((not $line_counter % 2) && (exists $env{db_format_odd}))
			{
				main::_log("setting special image format - db_format_odd to ".$env{db_format_odd});
				$env{db_format_tmp}=$env{db_format_odd};
			}
			else
			{ $env{db_format_tmp}=$env{db_format}; }

			if(
				(($env{db_select}=~/a500_attrs.IDauthor/) || ($env{db_select}=~/a500_attrs.\*/)) &&
				(($XSGN{NULL}=~/<%IDauthor_fullname%>/) || ($XSGN{NULL}=~/<%IDauthor_nickname%>/))
			)
			{
				$env{db_120}=Tomahawk::Getmdlvar("120","db") unless $env{db_120};
				$env{db_120}=$TOM::DB{main}{name} unless $env{db_120};

				my $db0=$main::DB{main}->Query("
					SELECT
						ID,
						IDcategory,
						fullname,
						nickname
					FROM $env{db_120}.a120
					WHERE
						ID='$db_line{IDauthor}'
						AND IDtype='0'
					LIMIT 1
				");
				if (my %db0_line=$db0->FetchHash())
				{
					$XSGN{NULL}=~s|<%IDauthor%>|$db0_line{ID}|g;
					$XSGN{NULL}=~s|<%IDauthor_fullname%>|$db0_line{fullname}|g;
					$XSGN{NULL}=~s|<%IDauthor_nickname%>|$db0_line{nickname}|g;
				}
				else
				{
					main::_log("SELECT
						ID,
						IDcategory,
						fullname,
						nickname
					FROM $env{db_120}.a120
					WHERE
						ID='$db_line{IDauthor}'
						AND IDtype='0'
					LIMIT 1");
					main::_log($db0->errstr());
				}
			}

			if(
				(($env{db_select}=~/a500.IDeditor/) || ($env{db_select}=~/a500_attrs.\*/)) &&
				(($XSGN{NULL}=~/<%IDeditor_fullname%>/) || ($XSGN{NULL}=~/<%IDeditor_nickname%>/))
			)
			{
				$env{db_120}=Tomahawk::Getmdlvar("120","db") unless $env{db_120};
				$env{db_120}=$TOM::DB{main}{name} unless $env{db_120};

				my $db0=$main::DB{main}->Query("
					SELECT
						ID,
						IDcategory,
						fullname,
						nickname
					FROM $env{db_120}.a120
					WHERE
						ID='$db_line{IDeditor}'
						AND IDtype='1'
					LIMIT 1
				");
				if (my %db0_line=$db0->FetchHash())
				{
					$XSGN{NULL}=~s|<%IDeditor%>|$db0_line{ID}|g;
					$XSGN{NULL}=~s|<%IDeditor_fullname%>|$db0_line{fullname}|g;
					$XSGN{NULL}=~s|<%IDeditor_nickname%>|$db0_line{nickname}|g;
				}
				else
				{
					main::_log($db0->errstr());
				}
			}

			my $db0=$main::DB{main}->Query("
				SELECT
					name
				FROM $env{db_500}.a500_category
				WHERE
					ID='$db_line{IDcategory}'
				LIMIT 1
			");
			if (my %db0_line=$db0->fetchHash)
			{
				$db_line{IDcategory_name}=$db0_line{name};
			}

			$XSGN{NULL}=~s|<%IDcategory_name%>|$db_line{IDcategory_name}|g;
				
			# display date and time
			if ($env{datetime_allow})
			{
				my %env0=Utils::datetime::ctodatetime($db_line{inserttime},format=>1);

				$XSGN{NULL}=~s|<%inserttime_day%>|$env0{mday}|g;
				$XSGN{NULL}=~s|<%inserttime_month%>|$env0{mom}|g;
				$XSGN{NULL}=~s|<%inserttime_year%>|$env0{year}|g;
				$XSGN{NULL}=~s|<%inserttime_hour%>|$env0{hour}|g;
				$XSGN{NULL}=~s|<%inserttime_minute%>|$env0{min}|g;
				$XSGN{NULL}=~s|<%inserttime_second%>|$env0{sec}|g;

				$XSGN{NULL}=~s|<%inserttime_day_name%>|$Utils::datetime::DAYS{$env{lng}}[$env0{wday}]|g;
				$XSGN{NULL}=~s|<%inserttime_day_name_long%>|$Utils::datetime::DAYS_L{$env{lng}}[$env0{wday}]|g;
				$XSGN{NULL}=~s|<%inserttime_month_name%>|$Utils::datetime::MONTHS{$env{lng}}[$env0{mom}-1]|g;
				$XSGN{NULL}=~s|<%inserttime_month_name_long%>|$Utils::datetime::MONTHS_L{$env{lng}}[$env0{mom}-1]|g;

				my %env0=Utils::datetime::ctodatetime($db_line{starttime},format=>1);

				$XSGN{NULL}=~s|<%day%>|$env0{mday}|g;
				$XSGN{NULL}=~s|<%month%>|$env0{mom}|g;
				$XSGN{NULL}=~s|<%year%>|$env0{year}|g;
				$XSGN{NULL}=~s|<%hour%>|$env0{hour}|g;
				$XSGN{NULL}=~s|<%minute%>|$env0{min}|g;
				$XSGN{NULL}=~s|<%second%>|$env0{sec}|g;

				$XSGN{NULL}=~s|<%day_name%>|$Utils::datetime::DAYS{$env{lng}}[$env0{wday}]|g;
				$XSGN{NULL}=~s|<%day_name_long%>|$Utils::datetime::DAYS_L{$env{lng}}[$env0{wday}]|g;
				$XSGN{NULL}=~s|<%month_name%>|$Utils::datetime::MONTHS{$env{lng}}[$env0{mom}-1]|g;
				$XSGN{NULL}=~s|<%month_name_long%>|$Utils::datetime::MONTHS_L{$env{lng}}[$env0{mom}-1]|g;

				$XSGN{NULL}=~s|<%starttime_day%>|$env0{mday}|g;
				$XSGN{NULL}=~s|<%starttime_month%>|$env0{mom}|g;
				$XSGN{NULL}=~s|<%starttime_year%>|$env0{year}|g;
				$XSGN{NULL}=~s|<%starttime_hour%>|$env0{hour}|g;
				$XSGN{NULL}=~s|<%starttime_minute%>|$env0{min}|g;
				$XSGN{NULL}=~s|<%starttime_second%>|$env0{sec}|g;

				$XSGN{NULL}=~s|<%starttime_day_name%>|$Utils::datetime::DAYS{$env{lng}}[$env0{wday}]|g;
				$XSGN{NULL}=~s|<%starttime_day_name_long%>|$Utils::datetime::DAYS_L{$env{lng}}[$env0{wday}]|g;
				$XSGN{NULL}=~s|<%starttime_month_name%>|$Utils::datetime::MONTHS{$env{lng}}[$env0{mom}-1]|g;
				$XSGN{NULL}=~s|<%starttime_month_name_long%>|$Utils::datetime::MONTHS_L{$env{lng}}[$env0{mom}-1]|g;

				%env0=Utils::datetime::ctodatetime($db_line{changetime},format=>1);

				$XSGN{NULL}=~s|<%changetime_day%>|$env0{mday}|g;
				$XSGN{NULL}=~s|<%changetime_month%>|$env0{mom}|g;
				$XSGN{NULL}=~s|<%changetime_year%>|$env0{year}|g;
				$XSGN{NULL}=~s|<%changetime_hour%>|$env0{hour}|g;
				$XSGN{NULL}=~s|<%changetime_minute%>|$env0{min}|g;
				$XSGN{NULL}=~s|<%changetime_second%>|$env0{sec}|g;

				$XSGN{NULL}=~s|<%changetime_day_name%>|$Utils::datetime::DAYS{$env{lng}}[$env0{wday}]|g;
				$XSGN{NULL}=~s|<%changetime_day_name_long%>|$Utils::datetime::DAYS_L{$env{lng}}[$env0{wday}]|g;
				$XSGN{NULL}=~s|<%changetime_month_name%>|$Utils::datetime::MONTHS{$env{lng}}[$env0{mom}-1]|g;
				$XSGN{NULL}=~s|<%changetime_month_name_long%>|$Utils::datetime::MONTHS_L{$env{lng}}[$env0{mom}-1]|g;

				%env0=Utils::datetime::ctodatetime($db_line{lasttime},format=>1);

				$XSGN{NULL}=~s|<%lasttime_day%>|$env0{mday}|g;
				$XSGN{NULL}=~s|<%lasttime_month%>|$env0{mom}|g;
				$XSGN{NULL}=~s|<%lasttime_year%>|$env0{year}|g;
				$XSGN{NULL}=~s|<%lasttime_hour%>|$env0{hour}|g;
				$XSGN{NULL}=~s|<%lasttime_minute%>|$env0{min}|g;
				$XSGN{NULL}=~s|<%lasttime_second%>|$env0{sec}|g;

				$XSGN{NULL}=~s|<%lasttime_day_name%>|$Utils::datetime::DAYS{$env{lng}}[$env0{wday}]|g;
				$XSGN{NULL}=~s|<%lasttime_day_name_long%>|$Utils::datetime::DAYS_L{$env{lng}}[$env0{wday}]|g;
				$XSGN{NULL}=~s|<%lasttime_month_name%>|$Utils::datetime::MONTHS{$env{lng}}[$env0{mom}-1]|g;
				$XSGN{NULL}=~s|<%lasttime_month_name_long%>|$Utils::datetime::MONTHS_L{$env{lng}}[$env0{mom}-1]|g;

				%env0=Utils::datetime::ctodatetime($db_line{endtime},format=>1);

				$XSGN{NULL}=~s|<%endtime_day%>|$env0{mday}|g;
				$XSGN{NULL}=~s|<%endtime_month%>|$env0{mom}|g;
				$XSGN{NULL}=~s|<%endtime_year%>|$env0{year}|g;
				$XSGN{NULL}=~s|<%endtime_hour%>|$env0{hour}|g;
				$XSGN{NULL}=~s|<%endtime_minute%>|$env0{min}|g;
				$XSGN{NULL}=~s|<%endtime_second%>|$env0{sec}|g;

				$XSGN{NULL}=~s|<%endtime_day_name%>|$Utils::datetime::DAYS{$env{lng}}[$env0{wday}]|g;
				$XSGN{NULL}=~s|<%endtime_day_name_long%>|$Utils::datetime::DAYS_L{$env{lng}}[$env0{wday}]|g;
				$XSGN{NULL}=~s|<%endtime_month_name%>|$Utils::datetime::MONTHS{$env{lng}}[$env0{mom}-1]|g;
				$XSGN{NULL}=~s|<%endtime_month_name_long%>|$Utils::datetime::MONTHS_L{$env{lng}}[$env0{mom}-1]|g;
			}

			my $tmp;
			if ($tmp_ID=~/^(....)/i){$tmp=$1};

			$db_line{fullpath}="$tom::H_500/$tmp/$db_line{hash}-$env{db_format_tmp}.jpg";
			$db_line{name}="$db_line{hash}-$env{db_format_tmp}.jpg";

			if (($env{about_cut})&&(length($db_line{about})>$env{about_cut}))
			{$db_line{about}=substr($db_line{title}, 0, $env{about_cut});$db_line{about}=~s|(.*) .*?$|$1&hellip;|;}

			foreach (keys %db_line)
			{
				$XSGN{NULL}=~s|<%$_%>|$db_line{$_}|g;
			}
			$XSGN{NULL}=~s|<%alt%>|$db_line{about}|g;
			$XSGN{NULL}=~s|<%line_no%>|$line_counter|g;

			if($XSGN{TMP}=~/<#LINE_$line_counter#>/)
			{$XSGN{TMP}=~s|<#LINE_$line_counter#>|$XSGN{NULL}|;}
			else
			{$XSGN{TMP}=~s|<#LINE#>|$XSGN{NULL}|;}
		}
		$XSGN{TMP}=~s|<%counter%>|$line_counter|g;
	}
	else
	{
		main::_log($main::DBH->errstr());
		if (!$env{return_null})
		{
			Tomahawk::GetXSGN(-convertvars=>1) || return undef; # load design file
			if (($env{xt_xlng}) || ($env{xlng}))
			{
				main::_log("using xlng transformation");
				if ($env{xlng}) { main::_log("WARNING! using deprecated parameter 'xlng'! please, use 'xt_xlng';"); }
				Tomahawk::GetXLNG() || return undef; # retrieve language xml
				Tomahawk::XLNGtoXSGN(); # implement XLNG into XSGN
			}
		}
	}

	if($line_counter<1)
	{
		if($env{return_null})
		{
			main::_log("no data available. return_null parameter in effect");
			$XSGN{TMP}="";
		}
		else
		{
			if(exists $XSGN{TMP_NO_DATA})
			{
				main::_log("no data available. returning TMP_NO_DATA");
				$XSGN{TMP}=$XSGN{TMP_NO_DATA};
			}
			else
			{
				$tom::ERR="no data available! query description in log.";
				return undef;
			}
		}
	}

	if (($line_counter eq ($env{db_count}+1)) || ($env{db_page}>0))
	{
		main::_log("actual page is: $env{db_page}");
		#$XSGN{TMP}=~s|<#PAGING#>|$XSGN{PAGING}|;

		if ($XSGN{'PAGING_'.$env{db_page}})
		{
			$XSGN{PAGING}=$XSGN{'PAGING_'.$env{db_page}};
			main::_log("got a different design for paging!");
		}

		if($XSGN{TMP}=~/<#PAGING_$env{db_page}#>/)
		{
			#not sure about this
			#$XSGN{TMP}=~s|<#PAGING_$env{db_page}#>|$XSGN{PAGING}|g;
			$XSGN{TMP}=~s|<#PAGING_$env{db_page}#>|$XSGN{PAGING}|g;
		}
		else
		{$XSGN{TMP}=~s|<#PAGING#>|$XSGN{PAGING}|g;}

		# inserting links to all previous pages
		if(($XSGN{TMP}=~/<#PAGES#>/) && ($XSGN{PAGES}) && ($env{db_page}>1))
		{
			my $var=$env{db_page}-1;
			if ($var)
			{
				while ($var)
				{
					$XSGN{PAGES}=~s|<#PAGE#>|$XSGN{PAGE}|;
					$XSGN{PAGES}=~s|<%page%>|$var|g;
					$XSGN{PAGES}=~s|<%page_real%>|$var+1|ge;
					$var--;
				}
				$XSGN{TMP}=~s|<#PAGES#>|$XSGN{PAGES}|g;
			}
		}

		$XSGN{TMP}=~s|<%page%>|$env{db_page}|;
		$XSGN{TMP}=~s|<%page_real%>|$env{db_page}+1|ge;
	}

	if ($line_counter eq ($env{db_count}+1))
	{
		my $nextpage=$env{db_page}+1;
		$XSGN{NULL}=$XSGN{PAGING_NEXT};
		$XSGN{NULL}=~s|<%page%>|$nextpage|g;

		if($XSGN{'PAGING_URL_'.$nextpage})
		{$XSGN{NULL}=~s|<#PAGING_URL#>|$XSGN{'PAGING_URL_'.$nextpage}|;}
		else
		{$XSGN{NULL}=~s|<#PAGING_URL#>|$XSGN{PAGING_URL}|;}

		$XSGN{NULL}=~s|<%page%>|$nextpage|g;
		$XSGN{NULL}=~s|<%page_real%>|$nextpage+1|ge;
		$XSGN{TMP}=~s|<#PAGING_NEXT#>|$XSGN{NULL}|;
	}

	if ($env{db_page}>0)
	{
		my $prevpage=$env{db_page}-1;
		$XSGN{NULL}=$XSGN{PAGING_PREV};
		$XSGN{NULL}=~s|<%page%>|$prevpage|g;

		if($XSGN{'PAGING_URL_'.$prevpage})
		{$XSGN{NULL}=~s|<#PAGING_URL#>|$XSGN{'PAGING_URL_'.$prevpage}|;}
		else
		{$XSGN{NULL}=~s|<#PAGING_URL#>|$XSGN{PAGING_URL}|;}

		$XSGN{NULL}=~s|<%page%>|$prevpage|g;
		$XSGN{NULL}=~s|<%page_real%>|$prevpage+1|ge;
		$XSGN{TMP}=~s|<#PAGING_PREV#>|$XSGN{NULL}|;
	}

	return 1;
}

our $authors = 'nemsak@webcom.sk';

=head1 AUTHOR

Peter Nemšák (nemsak@webcom.sk)

=cut

=head1 DOCUMENTATION AUTHOR

Matej Gregor (matej.gregor@comsultia.com)

=cut

1;