#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use encoding 'utf8';
use utf8;
use strict;

use App::020::_init;
use App::160::_init;
use App::821::_init;
use TOM::Text::format;

=head1 NAME

821-discussion_message_list.0.mdl

=cut

=head1 DESCRIPTION

List messages from discussion

=cut

=head1 INPUTS

=over

=item *

B<discussion.ID> || B<discussion.ID_entity>  - ID of discussion_forum

=item *

B<status> - default 'Y'

=item *

B<sql_order_by> - default 'datetime_create DESC'

=item *

B<sql_limit> - SQL limit

=back

=cut


sub execute
{
	my %env=@_;
	Tomahawk::GetXSGN('-convertvars'=>1) || return undef;
	
	delete $env{'ID_charindex'};
	$env{'sql_limit'}=500 unless $env{'sql_limit'};
	$env{'sql_order_by'}='datetime_post DESC' unless $env{'sql_order_by'};
	
	my $from;
	my $sql_where;
	
	# language
	$sql_where.="lng='$env{'lng'}' ";
	
	my $isAdmin;
	
	if ($main::USRM{'logged'} eq "Y")
	{
		my %groups=App::301::functions::user_groups($main::USRM{'ID_user'});
		if($groups{'admin'})
		{
			$isAdmin=1;
		}
	}
	
	if($isAdmin && $XSGN{'TMP_adminmode'})
	{
		$XSGN{'TMP'}=$XSGN{'TMP_adminmode'};
	}
	
	# status
	if ($env{'status'})
	{
		$XSGN{'TMP'}=~s|<%required_status%>|$env{'status'}|g;
		$sql_where.="AND status IN ('".(join "','", split('',$env{'status'}))."') ";
	}
	else
	{
		$sql_where.="AND status='Y' ";
	}
	
	if ($env{'discussion.ID'})
	{
		my $sql=qq{
			SELECT
				ID,
				ID_entity
			FROM
				`$App::821::db_name`.a821_discussion
			WHERE
				ID=$env{'discussion.ID'} AND
				$sql_where
			LIMIT 1
		};
		my %sth0=TOM::Database::SQL::execute($sql,'slave'=>1,'log'=>1);
		my %db0_line=$sth0{'sth'}->fetchhash();
		$env{'discussion.ID_entity'} = $db0_line{'ID_entity'};
	}
	
	
	#
	# LISTING OF ITEMS
	#
	
	
	# WHERE DISCUSSION
	my $where;
	$where="AND ID_discussion='$env{'discussion.ID_entity'}'" if $env{'discussion.ID_entity'};
	$where="" unless $env{'discussion.ID_entity'};
	if (!$env{'discussion.ID_entity'})
	{
		return 1;
	}
	
	if ($env{'keywords'})
	{
		$where.=" AND (";
		foreach (split(' ',$env{'keywords'}))
		{
			next unless $_;
			$where.="(name LIKE '%$_%' OR body LIKE '%$_%' OR owner_anonymous_name LIKE '%$_%') AND ";
		}
		$where=~s|AND $||;
		$where.=") ";
	}
	
	# get total count, not only limited messages
	my $sql=qq{
		SELECT
			COUNT(*) AS cnt
		FROM
			`$App::821::db_name`.a821_discussion_message
		WHERE
			$sql_where
			$where
	};
	my %sth0=TOM::Database::SQL::execute($sql,'log'=>1,'slave'=>1);
	my %db0_line=$sth0{'sth'}->fetchhash();
	
	$env{'vox_count'}=$db0_line{'cnt'};
	$XSGN{'TMP'}=~s|<%count%>|$env{'vox_count'}|g;
	$XSGN{'TMP'}=~s|<%discussion.ID%>|$env{'discussion.ID'}|g;
	$XSGN{'TMP'}=~s|<%discussion.ID_entity%>|$env{'discussion.ID_entity'}|g;
	
	my $sql=qq{
		SELECT
			*
		FROM
			`$App::821::db_name`.a821_discussion_message
		WHERE
			$sql_where
			$where
		ORDER BY
			$env{'sql_order_by'}, datetime_create DESC
		LIMIT
			$env{'sql_limit'}
	};
	
	my %sth0=TOM::Database::SQL::execute($sql,'log'=>1,'slave'=>1);
	
	my $sql_failure=0;
	
	if ($sth0{'sth'})
	{
		while (my %db0_line=$sth0{'sth'}->fetchhash())
		{
			my $item=$XSGN{'item'};
			
			if ($db0_line{'karma'}<-50)
			{
				$item=$XSGN{'item_lowkarma'} if $XSGN{'item_lowkarma'};
			}
			
			if($isAdmin && $XSGN{'item_adminmode'})
			{
				$item=$XSGN{'item_adminmode'};
			}
			
			$item=~s|<%db_(.*?)%>|$db0_line{$1}|g;
			$item=~s|<%ID%>|$db0_line{'ID'}|g;
			$item=~s|<%ID_entity%>|$db0_line{'ID_entity'}|g;
			
			# display author (owner) of message
			if ($db0_line{'owner_anonymous_name'})
			{
				$item=~s|<%owner%>|$db0_line{'owner_anonymous_name'}|g;
				$item=~s|<%owner_type%>|anonymous|g;
			}
			else
			{
				my %owner=App::301::authors::get_author($db0_line{'posix_owner'});
				$item=~s|<%owner%>|$owner{'firstname'} $owner{'surname'}|g;
				$item=~s|<%owner_type%>|authorized|g;
			}
			
			$XSGN{'TMP'}=~s|<#item#>|$item|;
		}
	}
	else
	{
		$sql_failure=1;
		main::_log("can't select");
	}
	
	if(!$sth0{'rows'})
	{
		if($sql_failure)
		{
			if($XSGN{'TMP_failure_no-data'})
			{
				$XSGN{'TMP'} = $XSGN{'TMP_failure_no-data'};
			}
			else
			{
				return 0;
			}
		}
		else
		{
			if($XSGN{'TMP_no-data'})
			{
				$XSGN{'TMP'} = $XSGN{'TMP_no-data'};
			}
			else
			{
				return 0;
			}
		}
	}
	
	return 1;
}

our $authors="roman.fordinal\@comsultia.com";

=head1 AUTHORS

Roman Fordinal (roman.fordinal@comsultia.com)

=cut

1;
