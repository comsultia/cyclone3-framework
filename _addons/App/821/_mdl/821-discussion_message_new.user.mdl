#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use encoding 'utf8';
use utf8;
use strict;

use App::020::_init;
use App::160::_init;
use App::301::_init;
use App::821::_init;
use TOM::Text::format;

=head1 NAME

821-discussion_message_new.user.mdl

=cut

=head1 DESCRIPTION

Add new messages to discussion by regular user

=cut

=head1 INPUTS

=over

=item *

B<discussion.ID> || B<discussion.ID_entity>  - ID of discussion_forum

=back

=cut


sub execute
{
	my %env=@_;
	Tomahawk::GetXSGN('-convertvars'=>1) || return undef;
	
	
	if ($main::USRM{'logged'} eq "Y")
	{
		$XSGN{'TMP'}=~s|<#user#>|$XSGN{'user-logged'}|;
	}
	elsif ($main::USRM{'ID_user'})
	{
		$XSGN{'TMP'}=~s|<#user#>|$XSGN{'user-anonymous'}|;
	}
	else
	{
		$XSGN{'TMP'}=~s|<#user#>|$XSGN{'user-none'}|;
		return 1;
	}
	
	
	my $sql_where;
	
	# language
	$sql_where.="lng='$env{'lng'}' ";
	
	# status
	if ($env{'status'})
	{
		$XSGN{'TMP'}=~s|<%required_status%>|$env{'status'}|g;
		$sql_where.="AND status IN ('".(join "','", split('',$env{'status'}))."') ";
	}
	else
	{
		$sql_where.="AND status='Y' ";
	}
	
	if ($env{'discussion.ID_entity'})
	{
		my $sql=qq{
			SELECT
				ID,
				ID_entity,
				name
			FROM
				`$App::821::db_name`.a821_discussion
			WHERE
				ID_entity=$env{'discussion.ID_entity'} AND
				$sql_where
			LIMIT 1
		};
		my %sth0=TOM::Database::SQL::execute($sql,'slave'=>1,'log'=>1,'-cache'=>3600);
		my %db0_line=$sth0{'sth'}->fetchhash();
		$env{'discussion.ID'} = $db0_line{'ID'};
		$env{'discussion.name'} = $db0_line{'name'};
	}
	
	if (!$env{'discussion.ID'})
	{
		return 1;
	}
	
	#
	# LISTING OF ITEMS
	#
	
	if ($main::FORM{'name'} && $main::FORM{'user'} && $main::FORM{'message'})
	{
		# check karma of this user
		my $sql=qq{
			SELECT
				SUM(karma) AS karma
			FROM
				`$App::301::db_name`.a301_user_profile_karma
			WHERE
				ID_user='$main::USRM{'ID_user'}'
		};
		my %sth0=TOM::Database::SQL::execute($sql);
		my %db0_line=$sth0{'sth'}->fetchhash();
		if (
				$db0_line{'karma'} < -500 ||
				# and check stopwords
				$main::FORM{'message'}=~/url=http/ ||
				$main::FORM{'message'}=~/VIDE\-[0O]N/i
		)
		{
			$XSGN{'TMP'}=$XSGN{'low_karma'};
			return 1;
		}
		
		# check last comment from this user
		
		
		my %columns;
		
		my $user=TOM::Security::form::sql_escape($main::FORM{'user'});
		
		if ($main::USRM{'ID_user'})
		{
			$columns{'posix_owner'}="'".$main::USRM{'ID_user'}."'";
		}
		
		#
#		if ($main::USRM{'logged'} ne "Y" && !$user)
		if ($user)
		{
			$columns{'owner_anonymous_name'}="'".($user)."'";
		}
		
		my $name=TOM::Security::form::sql_escape($main::FORM{'name'});
		my $body=TOM::Security::form::sql_escape($main::FORM{'message'});
		
		my $sql=qq{
			SELECT
				ID
			FROM
				`$App::821::db_name`.a821_discussion_message
			WHERE
				name LIKE '$name' AND
				body LIKE '$body' AND
				ID_discussion = '$env{'discussion.ID'}'
			LIMIT 1;
		};
		my %sth0=TOM::Database::SQL::execute($sql);
		if ($sth0{'rows'})
		{
			return 1;
		}
		
		if ($main::USRM{'logged'} ne 'Y')
		{
			my $sql=qq{
				SELECT
					ID
				FROM
					`$App::821::db_name`.a821_discussion_message
				WHERE
					owner_anonymous_name='$user' AND
					ID_discussion = '$env{'discussion.ID'}' AND
					datetime_post >= DATE_SUB(NOW(), INTERVAL 3 MINUTE)
				LIMIT 1;
			};
			my %sth0=TOM::Database::SQL::execute($sql);
			if ($sth0{'rows'})
			{
				return 1;
			}
		}
		
		use App::301::karma;
		my $karma=App::301::karma::dictionary::analyze_text($name.' '.$body);
		
		my $ID=App::020::SQL::functions::tree::new(
			'db_h' => "main",
			'db_name' => $App::821::db_name,
			'tb_name' => "a821_discussion_message",
			'-journalize' => 1,
			#'parent_ID'   => $env{'ID_parent'},
			'columns' =>
			{
				'name' => "'".($name)."'",
				'body' => "'".($body)."'",
				'owner_IP' => "'".$main::ENV{'REMOTE_ADDR'}."'",
				'ID_discussion' => $env{'discussion.ID'},
				'datetime_post' => 'NOW()',
				'karma' => $karma,
				'lng'  => "'$env{'lng'}'",
				'status'  => "'Y'",
				%columns
			},
			'where' => "ID_discussion='$env{'discussion.ID'}'",
			#'stop' => 1,
		);
		
		App::020::SQL::functions::update(
			'ID' => $env{'discussion.ID'},
			'db_h' => "main",
			'db_name' => $App::821::db_name,
			'tb_name' => "a821_discussion",
			'columns' =>
			{
				'datetime_lastpost' => 'NOW()',
			},
		);
		
		if ($main::USRM{'ID_user'})
		{
			App::301::karma::increase(
				'ID_user' => $main::USRM{'ID_user'},
				'karma' => $karma
			);
		}
		
		if ($env{'notify_email'})
		{
			
			my $sql=qq{
				SELECT
					ID,
					ID_entity,
					name
				FROM
					`$App::821::db_name`.a821_discussion
				WHERE
					ID=$env{'discussion.ID'}
				LIMIT 1
			};
			my %sth0=TOM::Database::SQL::execute($sql,'slave'=>1,'log'=>1,'-cache'=>3600);
			my %db0_line=$sth0{'sth'}->fetchhash();
			
			use TOM::Utils::datetime;
			use MIME::Entity;
			my $date = TOM::Utils::datetime::mail_current();
			my $tpl=new TOM::Template(
				'level' => "auto",
				'name' => "email-stats",
				'content-type' => "xhtml"
			);
			my $email_body=$tpl->{'entity'}{'email.xhtml'};
			$email_body=~s|<%main-title%>|New post in discussion|g;
			$email_body=~s|<%main-desc%>|New post in discussion #$env{'discussion.ID'} named '$db0_line{'name'}'|g;
			my $email_content=qq{
Post named: $name<br/>
Post body:<br/>
$body<br/>
			};
			$email_body=~s|<#email.content#>|$email_content|g;
			$email_body=~s|<#.*?#>||g;
			$email_body=~s|<%.*?%>||g;
			
			my $msg = MIME::Entity->build
			(
				'Type'    => "multipart/related",
				'List-Id' => "Cyclone3",
				'Date'    => $date,
				'From'    => "$tom::H <info\@$tom::H>",
				'To'      => TOM::Net::email::convert_TO($TOM::contact{'CONT'}),
				'Subject' => "New post in discussion"
			);
			
			$msg->attach
			(
				'Data' => $email_body,
				'Type' => "text/html;charset=\"UTF-8\"",
				'Encoding' => "8bit",
			);
			
			$msg->attach
			(
				'Path'       => $tpl->{'file'}{'cyclone3-150x44.png'}{'dst'},
				'Type'       => "image/gif",
				'Content-ID' => "<logo\@cyclone3.org>",
				'Encoding'   => "base64"
			);
			
			TOM::Net::email::send
			(
				to => $TOM::contact{'CONT'},
				body => $msg->as_string()
			);
		
		}
		
		$XSGN{'TMP'}=$XSGN{'commited'};
	}
	
	return 1;
}

our $authors="open\@comsultia.com";

=head1 AUTHORS

Comsultia, Ltd. (open@comsultia.com)

=cut

1;
