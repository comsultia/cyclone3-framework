#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8;
use strict;

use App::020::_init;
use App::160::_init;
use App::301::_init;
use App::821::_init;
use TOM::Text::format;

=head1 NAME

821-discussion_message_new.user.mdl

=cut

=head1 DESCRIPTION

Add new messages to discussion by regular user

=cut

=head1 INPUTS

=over

=item *

B<discussion.ID> || B<discussion.ID_entity>  - ID of discussion_forum

=back

=cut


sub execute
{
	my %env=@_;
	Tomahawk::GetXSGN('-convertvars'=>1) || return undef;
	
	
	if ($main::USRM{'logged'} eq "Y")
	{
		main::_log("preparing design for registered user");
		$XSGN{'TMP'}=~s|<#user#>|$XSGN{'user-logged'}|;
		my %owner=App::301::authors::get_author($main::USRM{'ID_user'});
		my $username=$owner{'login'};
		$username=$owner{'firstname'}." ".$owner{'surname'} if ($owner{'firstname'} || $owner{'surname'});
		$XSGN{'TMP'}=~s|<%user%>|$username|g;
	}
	elsif ($main::USRM{'ID_user'})
	{
		main::_log("preparing design for anonymous user");
		$XSGN{'TMP'}=~s|<#user#>|$XSGN{'user-anonymous'}|;
	}
	else
	{
		main::_log("preparing design for no user");
		$XSGN{'TMP'}=~s|<#user#>|$XSGN{'user-none'}|;
		return 1;
	}
	
	
	if ($main::FORM{'dontfill'})
	{
		return 1;
	}
	
	
	my $sql_where;
	
	# language
	$sql_where.="lng='$env{'lng'}' ";
	
	# status
	if ($env{'status'})
	{
		$XSGN{'TMP'}=~s|<%required_status%>|$env{'status'}|g;
		$sql_where.="AND status IN ('".(join "','", split('',$env{'status'}))."') ";
	}
	else
	{
		$sql_where.="AND status='Y' ";
	}
	
	if ($env{'discussion.ID'})
	{
		my $sql=qq{
			SELECT
				ID,
				ID_entity,
				name
			FROM
				`$App::821::db_name`.a821_discussion
			WHERE
				ID=$env{'discussion.ID'} AND
				$sql_where
			LIMIT 1
		};
		my %sth0=TOM::Database::SQL::execute($sql,'slave'=>1,'quiet'=>1,'-cache'=>3600);
		my %db0_line=$sth0{'sth'}->fetchhash();
		$env{'discussion.ID_entity'} = $db0_line{'ID_entity'};
		$env{'discussion.name'} = $db0_line{'name'};
	}
	
	if (!$env{'discussion.ID_entity'})
	{
		main::_log("missing param discussion.ID_entity",1);
		return 1;
	}
	
	if (!$env{'discussion.ID'})
	{
		my $sql=qq{
			SELECT
				ID,
				ID_entity,
				name
			FROM
				`$App::821::db_name`.a821_discussion
			WHERE
				ID_entity=$env{'discussion.ID_entity'}
			LIMIT 1
		};
		my %sth0=TOM::Database::SQL::execute($sql,'slave'=>1,'quiet'=>1,'-cache'=>3600);
		my %db0_line=$sth0{'sth'}->fetchhash();
		$env{'discussion.ID'} = $db0_line{'ID'};
	}
	
	$XSGN{'TMP'}=~s|<%discussion.ID_entity%>|$env{'discussion.ID_entity'}|g;
	
	my $avatar_url;
	if ($main::USRM{'logged'} eq "Y")
	{
		main::_log("loading avatar info from db");
		my $avatar=$XSGN{'avatar.registered'};
		if (my $relation=(App::160::SQL::get_relations(
			'db_name' => $App::301::db_name,
			'l_prefix' => 'a301',
			'l_table' => 'user',
			'l_ID_entity' => $main::USRM{'ID_user'},
			'rel_type' => 'avatar',
			'r_prefix' => "a501",
			'r_table' => "image",
			'status' => "Y",
			'limit' => 1
		))[0])
		{
			use App::501::_init;
			my %db2_line=App::501::functions::get_image_file(
				'image.ID_entity' => $relation->{'r_ID_entity'},
				'image_file.ID_format' => $env{'image_format.ID'} || $App::501::image_format_thumbnail_ID,
				'image_attrs.lng' => $env{'lng'}
			);
			my $uri=$tom::H_a501.'/image/file/'.$db2_line{'file_path'};
			$avatar_url=$uri;
			$avatar=~s|<%uri%>|$uri|;
			$XSGN{'TMP'}=~s|<#avatar#>|$avatar|g;
		}
		else
		{
			$XSGN{'TMP'}=~s|<#avatar#>|$XSGN{'avatar.anonymous'}|g;
		}
	}
	else
	{
		$XSGN{'TMP'}=~s|<#avatar#>|$XSGN{'avatar.anonymous'}|g;
	}
	
#	if ($main::FORM{'name'} && $main::FORM{'user'} && $main::FORM{'message'})
	if (($main::USRM{'logged'} eq "Y" && $main::FORM{'message'})
		|| ($main::FORM{'message'} && $main::FORM{'user'}))
	{
		main::_log("loading karma info");
		# check karma of this user
		my $sql=qq{
			SELECT
				SUM(karma) AS karma
			FROM
				`$App::301::db_name`.a301_user_profile_karma
			WHERE
				ID_user='$main::USRM{'ID_user'}'
		};
		my %sth0=TOM::Database::SQL::execute($sql,'quiet'=>1);
		my %db0_line=$sth0{'sth'}->fetchhash();
		if (
				$db0_line{'karma'} < -500 ||
				$main::FORM{'message'} =~/\[url/i ||
				$main::FORM{'message'} =~/a href/i
		)
		{
			main::_log("too low karma, aborted",1);
			$XSGN{'TMP'}=$XSGN{'low_karma'};
			return 1;
		}
		
		# check last comment from this user
		
		
		my %columns;
		
		my $user=TOM::Security::form::sql_escape($main::FORM{'user'});
		
		if ($main::USRM{'ID_user'})
		{
			$columns{'posix_owner'}="'".$main::USRM{'ID_user'}."'";
		}
		
		#
#		if ($main::USRM{'logged'} ne "Y" && !$user)
		if ($user && $main::USRM{'logged'} ne "Y")
		{
			$columns{'owner_anonymous_name'}="'".($user)."'";
		}
		
		my $name=TOM::Security::form::sql_escape($main::FORM{'name'});
			$name='' if $env{'notuse_name'};
		my $body=TOM::Security::form::sql_escape($main::FORM{'message'});
		
		my $sql=qq{
			SELECT
				ID
			FROM
				`$App::821::db_name`.a821_discussion_message
			WHERE
				name LIKE '$name' AND
				body LIKE '$body' AND
				ID_discussion = '$env{'discussion.ID_entity'}'
			LIMIT 1;
		};
		my %sth0=TOM::Database::SQL::execute($sql,'quiet'=>1);
		if ($sth0{'rows'})
		{
			main::_log("same message already entered",1);
			return 1;
		}
		
		if ($main::USRM{'logged'} ne 'Y')
		{
			my $sql=qq{
				SELECT
					ID
				FROM
					`$App::821::db_name`.a821_discussion_message
				WHERE
					owner_anonymous_name='$user' AND
					ID_discussion = '$env{'discussion.ID_entity'}' AND
					datetime_post >= DATE_SUB(NOW(), INTERVAL 30 SECOND)
				LIMIT 1;
			};
			my %sth0=TOM::Database::SQL::execute($sql,'quiet'=>1);
			if ($sth0{'rows'})
			{
				main::_log("too much messages from same user",1);
				return 1;
			}
		}
		
		use App::301::karma;
		my $karma=App::301::karma::dictionary::analyze_text($name.' '.$body);
		
		my $ID=App::020::SQL::functions::tree::new(
			'db_h' => "main",
			'db_name' => $App::821::db_name,
			'tb_name' => "a821_discussion_message",
			'-journalize' => 1,
			'parent_ID'   => $main::FORM{'reply_to'},
			'columns' =>
			{
				'name' => "'".($name)."'",
				'body' => "'".($body)."'",
				'owner_IP' => "'".$main::ENV{'REMOTE_ADDR'}."'",
				'ID_discussion' => $env{'discussion.ID_entity'},
				'datetime_post' => 'NOW()',
				'karma' => $karma,
				'lng'  => "'$env{'lng'}'",
				'status'  => "'Y'",
				%columns
			},
			'where' => "ID_discussion='$env{'discussion.ID'}'",
			#'stop' => 1,
		);
		
		App::020::SQL::functions::update(
			'ID' => $env{'discussion.ID'},
			'db_h' => "main",
			'db_name' => $App::821::db_name,
			'tb_name' => "a821_discussion",
			'columns' =>
			{
				'datetime_lastpost' => 'NOW()',
			},
		);
		
		if ($main::USRM{'ID_user'})
		{
			App::301::karma::increase(
				'ID_user' => $main::USRM{'ID_user'},
				'karma' => $karma
			);
		}
		
		if ($env{'notify_email'})
		{
			my $to_email=$TOM::contact{'a821.message_new'} || $TOM::contact{'CONT'};
			main::_log("notify_email is enabled");
			if ($env{'notify_author_email'})
			{
				main::_log("notify_author_email is enabled");
				# what is related to this discussion?
				my %sth0=TOM::Database::SQL::execute(qq{
					SELECT
						*
					FROM
						`$App::821::db_name`.`a160_relation`
					WHERE
						r_prefix='a821' AND
						r_table='discussion' AND
						r_ID_entity='$env{'discussion.ID_entity'}' AND
						rel_type='discussion' AND
						status='Y'
					LIMIT
						1
				},'quiet'=>1);
				my %db0_line=$sth0{'sth'}->fetchhash();
				my $posix_author;
				if ($db0_line{'l_prefix'} eq "a401" && $db0_line{'l_table'} eq "article")
				{
					main::_log("article related to this discussion");
					require App::401::_init;
					my %sth1=TOM::Database::SQL::execute(qq{
						SELECT
							ID_author
						FROM
							`$App::401::db_name`.`a401_article_ent`
						WHERE
							ID_entity='$db0_line{'l_ID_entity'}'
						LIMIT 1
					});
					my %db1_line=$sth1{'sth'}->fetchhash();
					$posix_author=$db1_line{'ID_author'};
					main::_log("posix_author=$posix_author");
				}
				elsif ($db0_line{'l_prefix'} eq "a510" && $db0_line{'l_table'} eq "video")
				{
					main::_log("video related to this discussion");
					require App::510::_init;
					my %sth1=TOM::Database::SQL::execute(qq{
						SELECT
							posix_author
						FROM
							`$App::510::db_name`.`a510_video_ent`
						WHERE
							ID_entity='$db0_line{'l_ID_entity'}'
						LIMIT 1
					});
					my %db1_line=$sth1{'sth'}->fetchhash();
					$posix_author=$db1_line{'posix_author'};
					main::_log("posix_author=$posix_author");
				}
				#
				if ($posix_author)
				{
					# check author group (if is in editor group)
					my %groups=App::301::functions::user_groups($posix_author);
					if ($groups{'editor'})
					{
						# check author info (if has email address)
						my %user=App::301::functions::user_get($posix_author);
						if ($user{'email'})
						{
							$to_email.=";".$user{'email'};
						}
					}
				}
			}
			
			my $sql=qq{
				SELECT
					ID,
					ID_entity,
					name
				FROM
					`$App::821::db_name`.a821_discussion
				WHERE
					ID_entity=$env{'discussion.ID_entity'}
				LIMIT 1
			};
			my %sth0=TOM::Database::SQL::execute($sql,'slave'=>1,'log'=>1,'-cache'=>3600);
			my %db0_line=$sth0{'sth'}->fetchhash();
			
			use TOM::Utils::datetime;
			use MIME::Entity;
			my $date = TOM::Utils::datetime::mail_current();
			my $tpl=new TOM::Template(
				'addon' => "a821",
				'level' => "auto",
				'name' => "email-post",
				'content-type' => "text"
			);
			my $email_body=$tpl->{'entity'}{'email.plain'};
			$email_body=~s|<%main-title%>|New post in discussion|g;
			$email_body=~s|<%main-desc%>|New post in discussion #$env{'discussion.ID'} "$db0_line{'name'}"|g;
			my $email_content;
			$email_content.="IP: $main::ENV{'REMOTE_ADDR'}\n";
			$email_content.="Referrer: $main::ENV{'HTTP_REFERER'}\n" if $main::ENV{'HTTP_REFERER'};
			$name=~s|<|&lt;|g;$name=~s|>|&gt;|g;
			$email_content.="Post named: $name\n" if $name;
			$body=~s|<|&lt;|g;$body=~s|>|&gt;|g;
			$email_content.="Post body: $body\n" if $body;
			$email_body=~s|<#email.content#>|$email_content|g;
			$email_body=~s|<#.*?#>||g;
			$email_body=~s|<%.*?%>||g;
			
			my $msg = MIME::Entity->build
			(
				'Type'    => "multipart/related",
				'List-Id' => "Cyclone3",
				'Date'    => $date,
				'From'    => "\"Cyclone3 at $tom::H\" <info\@$tom::H>",
				'To'      => TOM::Net::email::convert_TO($to_email),
				'Subject' => "New post in discussion"
			);
			
			$msg->attach
			(
				'Data' => $email_body,
				'Type' => "text/plain;charset=\"UTF-8\"",
				'Encoding' => "8bit",
			);
			
#			$msg->attach
#			(
#				'Path'       => $tpl->{'file'}{'cyclone3-150x44.png'}{'dst'},
#				'Type'       => "image/gif",
#				'Content-ID' => "<logo\@cyclone3.org>",
#				'Encoding'   => "base64"
#			);
			
			TOM::Net::email::send
			(
				to => $to_email,
				body => $msg->as_string()
			);
			
		}
		
		$XSGN{'TMP'}=$XSGN{'commited'};
		
		# display commited message
		
		my $sql=qq{
			SELECT
				*
			FROM
				`$App::821::db_name`.a821_discussion_message
			WHERE
				ID=$ID
			LIMIT 1
		};
		my %sth0=TOM::Database::SQL::execute($sql,'quiet'=>1);
		my %db0_line=$sth0{'sth'}->fetchhash();
		my %datetime=TOM::Utils::datetime::datetime_collapse($db0_line{'datetime_post'});
		$db0_line{'datetime_post.year'}=$datetime{'year'};
		$db0_line{'datetime_post.month'}=$datetime{'month'};
		$db0_line{'datetime_post.mday'}=$datetime{'mday'};
		$db0_line{'datetime_post.hour'}=$datetime{'hour'};
		$db0_line{'datetime_post.min'}=$datetime{'min'};
		$db0_line{'datetime_post.sec'}=$datetime{'sec'};
		$XSGN{'TMP'}=~s|<%db_(.*?)%>|$db0_line{$1}|g;
		
		$XSGN{'TMP'}=~s|<%avatar_url%>|$avatar_url|g;
		
		if ($db0_line{'owner_anonymous_name'})
		{
			$XSGN{'TMP'}=~s|<%author%>|$db0_line{'owner_anonymous_name'}|g;
		}
		else
		{
			my %owner=App::301::authors::get_author($db0_line{'posix_owner'});
			$XSGN{'TMP'}=~s|<%author%>|$owner{'firstname'} $owner{'surname'}|g;
		}
		
	}
	else
	{
		main::_log("none message send to save");
#		main::_log("this message cann't be saved, because not all required params available",1);
	}
	
	return 1;
}

our $authors="open\@comsultia.com";

=head1 AUTHORS

Comsultia, Ltd. (open@comsultia.com)

=cut

1;
