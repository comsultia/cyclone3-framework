#!/usr/bin/perl
# USE UTF-8 !!!
package CRON::module;
use Time::Local;
use Text::Iconv;
use Utils::datetime;
use strict;

=head1 NAME

400-exports.rss.cron

=cut

=head1 DESCRIPTION

Export list of articles (a400) as rss feed ( file in !www directory )

=cut

=head1 INPUTS

=over

=item *

B<db_400> - default $TOM::DB_name

=item *

B<db_120> - default $TOM::DB_name

=item *

B<xml_file> - default 'RSS.xml'

=item *

B<base_url> - default $tom::H_www

=item *

B<rss_url> - default $tom::H_www/RSS.xml

=item *

B<lng> - default $tom::lng

=item *

B<db_encoding> - default 'utf-8'

=item *

B<encoding> - default 'utf-8'

=item *

B<generator>

=item *

B<title> -

=item *

B<copyright> -

=item *

B<description> -

=item *

B<managing_editor> -

=item *

B<admin_mail> -

=item *

B<img_url> -

=item *

B<IDcategory> -

=back

=cut

sub execute
{
	my %env=@_;
	#return 1;
	if ($cron::P eq $CRON::P){$cron::ERR="WARN: this cron is only for local use!!!";return undef}

	$env{db_400}=$TOM::DB_name unless ($env{db_400});
	$env{db_120}=$TOM::DB_name unless ($env{db_120});
	$env{xml_file}="RSS.xml" unless ($env{xml_file});
	$env{base_url}=$tom::H_www unless ($env{base_url});
	$env{rss_url}=$tom::H_www."/RSS.xml" unless ($env{rss_url});
	$env{lng}=$tom::lng unless ($env{lng});
	$env{lng}=$TOM::lng unless ($tom::lng);
	$env{db_encoding}="utf-8" unless ($env{db_encoding});
	$env{encoding}="utf-8" unless ($env{encoding});
	$env{generator}="Tomahawk Publishing System v.3." unless ($env{generator});

	#if (!$env{db_130}){$cron::ERR="WARN: db_130 not defined!!!";return undef}
	#if ($env{db_130} eq $TOM::DB_name_TOM){$env{table}="Ca130_send";}else{$env{table}="a130_send";}
	my $rss=<<"HEADER";
<?xml version=\"1.0\" encoding=\"$env{encoding}\"?>
<rss version=\"2.0\">
<channel>
<title>$env{title}</title>
<link>$env{base_url}</link>
<copyright>$env{copyright}</copyright>
<description>$env{description}</description>
<language>$env{lng}</language>
<%CATEGORY%>
<managingEditor>$env{managing_editor}</managingEditor>
<webMaster>$env{admin_mail}</webMaster>
<pubDate><%DATE%></pubDate>
<lastBuildDate><%BUILD_DATE%></lastBuildDate>
<generator>$env{generator}</generator>
<ttl>20</ttl>
<%IMAGE%>
<%ITEM%>
</channel>
</rss>
HEADER

	my $rss_item=<<"HEADER";
<item>
<title><%TITLE%></title>
<link><%URL%></link>
<author><%AUTHOR%></author>
<source><%SOURCE%></source>
<description><%TINY%></description>
<%CATEGORY%>
<pubDate><%PUB_DATE%></pubDate>
</item>
<%ITEM%>
HEADER

	my $rss_image=<<"HEADER";
<image>
<url>$env{img_url}</url>
<title>$env{title}</title>
<link>$env{base_url}</link>
</image>
HEADER

	my $rss_category=<<"HEADER";
<category domain="<%CAT_URL%>/"><%CAT_NAME%></category>
HEADER

	my $var;

	my %rss_categories;

	foreach (keys %env)
	{
		if ($_=~/^URL_IDcat_(.*?)_(.*)/)
		{
			my $null=$1;
			my $null2=$2;
			$rss_categories{$null}{url}=$env{$_};
			$rss_categories{$null}{name}=$null2;
			$rss=~s|<%CATEGORY%>|$rss_category<%CATEGORY%>|;
			$rss=~s|<%CAT_NAME%>|$rss_categories{$null}{name}|;
			$rss=~s|<%CAT_URL%>|$rss_categories{$null}{url}|;
		}
	}
	$rss=~s|<%CATEGORY%>||;


	main::_log("checking for today's a400 items");

	my %dates = Utils::datetime::ctodatetime($cron::time_current, format=>"1");

	$rss=~s|<%BUILD_DATE%>|$Utils::datetime::DAYS{en}[$dates{wday}], $dates{mday} $Utils::datetime::MONTHS{en}[$dates{mom}-1] $dates{year} $dates{hour}:$dates{min}:$dates{sec} +0100|;

	my $curr_datestamp=timelocal(0,0,0,$dates{mday},$dates{mom}-1,$dates{year}-1900,0,0,0);
	my %dates = Utils::datetime::ctodatetime($curr_datestamp, format=>"1");

	$rss=~s|<%DATE%>|$Utils::datetime::DAYS{en}[$dates{wday}], $dates{mday} $Utils::datetime::MONTHS{en}[$dates{mom}-1] $dates{year} $dates{hour}:$dates{min}:$dates{sec} +0100|;

	if (exists $env{img_url})
	{
		$rss=~s|<%IMAGE%>|$rss_image|;
	}
	#return 1;

	my $where_cat="";
	$where_cat="AND IDcategory LIKE '$env{IDcategory}%'" if (exists $env{IDcategory});

	#######################################################################################################
	my $count;
	my $count0;
	my $db0=$main::DBH->Query("
		SELECT ID,title,tiny,starttime,IDauthor,IDeditor,IDcategory
		FROM $env{db_400}.a400
		WHERE
			starttime>=$curr_datestamp
			AND starttime<($curr_datestamp+86400)
			AND starttime<$cron::time_current
			AND active='Y'
			$where_cat
		ORDER BY starttime DESC");
	while (my %db0_line=$db0->fetchhash())
	{
		$count0++;
		#if ($count0/1000 == int($count0/1000)){main::_log("[$count0] checked");CRON::waitload($CRON::LOADAVG);}

		$db0_line{$_}=~s|&|&amp;|g foreach (keys %db0_line);
		#{
			#$db0_line{$_}=~s|&|&amp;|g;
		#}

		$rss=~s|<%ITEM%>|$rss_item|;
		$rss=~s|<%TITLE%>|$db0_line{title}|;
		$rss=~s|<%TINY%>|$db0_line{tiny}|;

		$var="type=a400_view&ID=$db0_line{ID}";

		$var=TOM::Net::URI::URL::hash_encode( $var );

		$db0_line{IDcategory}=~/^(..)/;
		if (exists $rss_categories{$1})
		{
			my $null=$1;
			$rss=~s|<%CATEGORY%>|$rss_category|;
			$rss=~s|<%CAT_NAME%>|$rss_categories{$null}{name}|;
			$rss=~s|<%CAT_URL%>|$rss_categories{$null}{url}|;
			$var=$rss_categories{$null}{url}."/?||".$var;
		}
		else{$rss=~s|<%CATEGORY%>||;$var=$rss_categories{URL_IDcat_default}."/?||".$var;}
		$var.="-root";

		$rss=~s|<%URL%>|$var|;

		%dates = Utils::datetime::ctodatetime($db0_line{starttime}, format=>"1");

		$rss=~s|<%PUB_DATE%>|$Utils::datetime::DAYS{en}[$dates{wday}], $dates{mday} $Utils::datetime::MONTHS{en}[$dates{mom}-1] $dates{year} $dates{hour}:$dates{min}:$dates{sec} +0100|;

		my $db1=$main::DBH->Query("
			SELECT ID,fullname
			FROM $env{db_120}.a120
			WHERE
				(ID='$db0_line{IDauthor}'
				AND active='Y')
				OR
				(ID='$db0_line{IDeditor}'
				AND active='Y')
			LIMIT 2");
		while (my %db1_line=$db1->fetchhash())
		{
			#$db1_line{fullname}=~s|&|&amp;|g;
			$rss=~s|<%AUTHOR%>|$db1_line{fullname}| if ($db1_line{ID} eq $db0_line{IDeditor});
			$rss=~s|<%SOURCE%>|$db1_line{fullname}| if ($db1_line{ID} eq $db0_line{IDauthor});
		}

		my $db1=$main::DBH->Query("
			SELECT ID,name
			FROM $env{db_400}.a400_category
			WHERE
				ID='$db0_line{IDcategory}'
				AND active='Y'
			LIMIT 1");
		while (my %db1_line=$db1->fetchhash())
		{
			$db1_line{name}=~s|&|&amp;|g;
			$rss=~s|<%CATEGORY%>|$db1_line{name}|;
		}
	}

	$rss=~s|<%.*?%>||g;

	if($env{db_encoding} ne $env{encoding})
	{
		my $converter = Text::Iconv->new("$env{db_encoding}", "$env{encoding}");
		$rss = $converter->convert($rss);
	}

	open (HND0, ">".$cron::P."/!www/".$env{xml_file}) || die "Could not write xml file! $!";
	print HND0 $rss;

	return 1
}

1;