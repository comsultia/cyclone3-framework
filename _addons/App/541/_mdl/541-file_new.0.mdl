#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use encoding 'utf8';
use utf8;
use strict;

use App::541::_init;
use File::Copy;
use File::Path;
use Digest::MD5  qw(md5 md5_hex md5_base64);
use Digest::SHA1  qw(sha1 sha1_hex sha1_base64);

=head1 NAME

541-file_new.0.mdl

=cut

=head1 DESCRIPTION

Create new file item

=cut


sub execute
{
	my %env=@_;
	Tomahawk::GetXSGN('-convertvars'=>1) || return undef;
	delete $env{'ID_charindex'};
	
	my $from;
	
	if (!$main::FORM{'file_data'})
	{
		$XSGN{'TMP'}=$XSGN{'RESULT_failure_no_input'};
		$XSGN{'TMP'}=~s|<%missing_parameter%>|file_data|g;
		return 1;
	}
	
	# get file data and filename
	my $filename=$main::FORM{'file_data_file'};
	main::_log("filename='$filename'");
	my $fileinfo=CGI::uploadInfo($main::FORM{'file_data_file'});
	# check if file exists
	my $tmpfilename = $main::CGI->tmpFileName($main::FORM{'file_data_file'});
	main::_log("tmpfilename='$tmpfilename'");
	my $size=(stat($tmpfilename))[7];
	main::_log("size='$size'");
	main::_log("mimetype='$env{'mimetype'}'");
	
	#$XSGN{'TMP'}=$XSGN{'RESULT_failure_no_input'};return 1;
	
	
	# prepare 'name' for SQL's
	$filename=~s|\'|\\'|;
	
	# I have ID of directory, but I must have ID_entity of directory
	my %parent;
	%parent=App::020::SQL::functions::get_ID(
		'ID' => $env{'ID_dir'},
		'db_h' => "main",
		'db_name' => $TOM::DB{'main'}{'name'},
		'tb_name' => "a541_file_dir",
		'columns' =>
		{
			'ID_entity' => 1,
			'lng' => 1
		}
	) if $env{'ID_dir'};
	
	$parent{'lng'}=$env{'lng'} unless $parent{'lng'};
	
	# parent is in $parent{'ID_entity'}
	
	# check if in this directory is not file with same name!
	my $ID_rewrite;
	my $size_rewrite;
	my $checksum;
	my $checksum_method;
	my $sql=qq{
		SELECT
			ID, ID_entity, file_checksum, file_size
		FROM
			a541_file
		WHERE
			ID_category='$parent{'ID_entity'}'
			AND lng='$parent{'lng'}'
			AND name='$filename'
			AND status IN ('Y','N')
		LIMIT 1
	};
	my %sth0=TOM::Database::SQL::execute($sql);
	if (my %db0_line=$sth0{'sth'}->fetchhash())
	{
		main::_log("same file already exists",1);
		$ID_rewrite=$db0_line{'ID'};
		$size_rewrite=$db0_line{'file_size'};
		if ($db0_line{'file_checksum'}=~/^(.*?):(.*)$/)
		{
			$checksum_method=$1;
			$checksum=$2;
		}
		if (!$env{'rewrite'})
		{
			$XSGN{'TMP'}=$XSGN{'RESULT_failure_same_name'};
			return 1;
		}
	}
	
	
	# calculate checksum
	if ($checksum_method eq "MD5")
	{
		
	}
	else
	{
		open(CHKSUM,'<'.$tmpfilename);
		my $ctx = Digest::SHA1->new;
		$ctx->addfile(*CHKSUM);
		$env{'checksum'} = $ctx->hexdigest;
		$env{'checksum_method'} = 'SHA1';
	}
	
	# define mimetype
	if ($env{'mimetype'} eq "unknown")
	{
		$filename=~/^.*\.(.*?)$/;
		my $ext=$1;
		if ($App::541::mimetypes::ext{$ext})
		{
			$env{'mimetype'}=$App::541::mimetypes::ext{$ext}
		}
	}
	
	
	# find new hash
	my $hash=App::541::functions::file_newhash();
	
	# create name_url
	my $name_url=TOM::Net::URI::rewrite::convert($filename);
	
	# create a new file
	my $ID;
	
	main::_log("ID_rewrite=$ID_rewrite");
	main::_log("checksum $env{'checksum'}=$checksum");
	main::_log("checksum_method $env{'checksum_method'}=$checksum_method");
	main::_log("size $size=$size_rewrite");
	
	if ( # when I want to replace file with same file (same checksum)
			($ID_rewrite) && # same ID
			($env{'checksum'} eq $checksum) && # same checksum
			($env{'checksum_method'} eq $checksum_method) && # same checksum_method
			($size eq $size_rewrite) 
		)
	{
		# we not need to update anything
		$XSGN{'TMP'}=$XSGN{'RESULT_success'};
		return 1;
	}
	elsif ($ID_rewrite)
	{
		# i'm updating existing entry
		$ID=$ID_rewrite;
		my $out=App::020::SQL::functions::update(
			'ID' => $ID_rewrite,
			'db_h' => "main",
			'db_name' => $TOM::DB{'main'}{'name'},
			'tb_name' => "a541_file",
			'-journalize' => 1,
			'columns' =>
			{
				'name_hash'  => "'$hash'",
				'file_size' => $size,
				'mimetype' => "'$env{'mimetype'}'",
				'file_checksum' => "'".$env{'checksum_method'}.':'.$env{'checksum'}."'",
			}
		);
	}
	else
	{
		# creating new entry
		$ID=App::020::SQL::functions::new(
			'db_h' => "main",
			'db_name' => $TOM::DB{'main'}{'name'},
			'tb_name' => "a541_file",
			'-journalize' => 1,
			'columns' =>
			{
				'ID_category' => "'$parent{'ID_entity'}'",
				'name' => "'$filename'",
				'name_url' => "'$name_url'",
				'name_hash'  => "'$hash'",
				'posix_owner' => "'".$main::USRM{'IDhash'}."'",
				'file_size' => $size,
				'file_checksum' => "'".$env{'checksum_method'}.':'.$env{'checksum'}."'",
				'mimetype' => "'$env{'mimetype'}'",
				'lng'  => "'$parent{'lng'}'",
				'status'  => "'N'",
			}
		);
	}
	
	# ID = ID_entity
	
	my $subdir=sprintf('%010d',int($ID/1000));
	
	my $path_to=$tom::P.'/!media/a541/files/'.$subdir;
	File::Path::mkpath $path_to;
	my $file_to=$path_to.'/'.$hash;
	main::_log("copy file to '$file_to'");
	File::Copy::copy($tmpfilename,$file_to);
	
	
	# check output
	if ($ID)
	{
		$XSGN{'TMP'}=$XSGN{'RESULT_success'};
		$XSGN{'TMP'}=~s|<%ID%>|$ID|g;
	}
	else
	{
		return 1;
	}
	
	return 1;
}



our $authors='roman.fordinal@comsultia.com';

=head1 AUTHORS

Roman Fordin√°l (roman.fordinal@comsultia.com)

=cut

1;
