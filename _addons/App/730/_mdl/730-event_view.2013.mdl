#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8;
use strict;


use App::210::_init;
use App::730::_init;


sub execute
{
	my %env=@_;
	my %env_out;
	
	$env{'event.status'}='Y' unless $env{'event.status'};
		my $sql_event_status=join "','", split('',$env{'event.status'});
	
	my @sql_bind;
	my $sql_where;
	my $sql_changetime;
	my $sql_limit=$env{'sql_limit'} || 10;
	my $sql_order_by=$env{'sql_order_by'} || 'event.datetime_publish_start DESC';
	
	if ($env{'event.ID_entity'})
	{
		main::_log("search by event.ID_entity");
		push @{$env_out{'entity'}},{
			'db_h' => 'main',
			'db_name' => $App::730::db_name,
			'tb_name' => 'a730_event',
			'ID_entity' => $env{'event.ID_entity'}
		};
		$sql_where.="AND event.ID_entity=? ";
		push @sql_bind,$env{'event.ID_entity'};
	}
	
	if ($env{'event.ID'})
	{
		main::_log("search by event.ID");
		$sql_where.="AND event.ID=? ";
		push @sql_bind,$env{'event.ID'};
	}
	
	if ($env{'event_cat.ID_entity'})
	{
		my $sql_cat;
		foreach my $ID_category (split(';',$env{'event_cat.ID_entity'}))
		{
			next unless $ID_category;
			if ($ID_category=~s/\*$//)
			{
				my $cat_sql=qq{SELECT ID_charindex FROM $App::730::db_name.a730_event_cat WHERE ID_entity=$ID_category AND lng='$env{'lng'}' AND status IN ('Y','L') LIMIT 1};
				$sql_cat.=qq{ OR event_cat.ID_charindex LIKE CONCAT(($cat_sql),"%")};
			}
			else
			{
				$sql_cat.=" OR event_cat.ID_entity=$ID_category";
				push @{$env_out{'entity'}},{
					'db_h' => 'main',
					'db_name' => $App::730::db_name,
					'tb_name' => 'a730_event_cat',
					'ID_entity' => $ID_category,
				};
			}
			$sql_cat=~s/^ OR //;
		}
		if ($sql_cat)
		{
			$sql_where.=" AND (".$sql_cat.") ";
		}
	}
	
	if ($env{'event_cat.ID'})
	{
		my $sql_cat;
		foreach my $ID_category (split(';',$env{'event_cat.ID'}))
		{
			next unless $ID_category;
			if ($ID_category=~s/\*$//)
			{
				my $cat_sql=qq{SELECT ID_charindex FROM $App::730::db_name.a730_event_cat WHERE ID=$ID_category AND status IN ('Y','L') LIMIT 1};
				$sql_cat.=qq{ OR event_cat.ID_charindex LIKE CONCAT(($cat_sql),"%")};
			}
			else
			{
				$sql_cat.=" OR event_cat.ID=$ID_category";
			}
			$sql_cat=~s/^ OR //;
		}
		if ($sql_cat)
		{
			$sql_where.=" AND (".$sql_cat.") ";
		}
	}
	
	
	$sql_where.=" AND ".$env{'sql_where'} if $env{'sql_where'};
	
	$sql_where=~s|^ ||;
	
	# get template
	Tomahawk::GetTpl('env' => \%env) || return undef;
	
	return 1 unless $sql_where;
	
	use App::020::mimetypes::html;
	my $parser=new App::020::mimetypes::html(
		'tpl_ext' => $TPL # extend
	);
	
	my $i;
	my %sth0=TOM::Database::SQL::execute(qq{
		SELECT
			
			event.ID,
			event.ID_entity,
			event.name,
			event.name_url,
			event.posix_owner,
			event.datetime_start,
			event.datetime_finish,
			event.datetime_publish_start,
			event.datetime_publish_stop,
			event.link,
			event.location,
			
			event.country_code,
			event.state,
			event.county,
			event.district,
			event.city,
			event.ZIP,
			event.street,
			event.street_num,
			
			event.latitude_decimal,
			event.longitude_decimal,
			
			event.priority_A,
			
			event.price,
			event.price_currency,
			event.VAT,
			(event.price*((100+event.VAT)/100)) AS price_incl_VAT,
			
			event.max_attendees,
			event.metadata,
			event.status,
			event.mode,
			
			event_lng.name_long,
			event_lng.description_short,
			event_lng.description,
			event_lng.lng
			
		FROM $App::730::db_name.a730_event AS event
		LEFT JOIN $App::730::db_name.a730_event_lng AS event_lng ON
		(
			event.ID_entity = event_lng.ID_entity AND
			event_lng.lng = '$env{'lng'}'
		)
		INNER JOIN $App::730::db_name.a730_event_rel_cat AS event_rel_cat ON
		(
			event_rel_cat.ID_event = event.ID_entity
		)
		INNER JOIN $App::730::db_name.a730_event_cat AS event_cat ON
		(
			event_cat.ID_entity = event_rel_cat.ID_category AND
			event_cat.lng = '$env{'lng'}'
		)
		WHERE
			event.status IN ('$sql_event_status')
			AND event.datetime_publish_start <= NOW()
			AND (event.datetime_publish_stop IS NULL OR event.datetime_publish_stop >= NOW())
			$sql_where}.qq{
		ORDER BY
			$sql_order_by
		LIMIT
			$sql_limit
	},'bind'=>[@sql_bind],'log_'=>1,'-slave'=>1,
		'-changetime'=>App::020::SQL::functions::_get_changetime(
			{
				'db_h'=>"main",
				'db_name' => $App::730::db_name,
				'tb_name' => "a730_event",
				'ID_entity' => do{$env{'event.ID_entity'} if $env{'event.ID_entity'}=~/^\d+$/}
			}),
	);
	
	my %event=$sth0{'sth'}->fetchhash();
	
	return 1 unless $event{'ID_entity'};
	
	main::_log("found event.ID_entity=$event{'ID_entity'}");
	
	push @{$env_out{'entity'}},{
		'db_h' => 'main',
		'db_name' => $App::730::db_name,
		'tb_name' => 'a730_event',
		'ID_entity' => $event{'ID_entity'}
	};
	
	push @{$env_out{'call'}{'H'}{'add_DOC_keywords'}},$event{'keywords'}
		if $env{'header.keywords'};
	
	push @{$env_out{'call'}{'H'}{'add_DOC_title'}}, ($event{'name_long'} || $event{'name'})
		if $env{'header.title'};
	
	if ($event{'cat_ID'})
	{
		# link to a210_page
		if (my $category=App::730::functions::_a210_by_cat([$event{'cat_ID'}],'lng'=>$env{'lng'}))
		{
			my %sql_def=('db_h' => "main",'db_name' => $App::210::db_name,'tb_name' => "a210_page");
			foreach my $p(
				App::020::SQL::functions::tree::get_path(
					$category,
					%sql_def,
					'-slave' => 1,
					'-cache' => 86400*7
				)
			)
			{
				push @{$event{'a210'}{'IDs'}}, $p->{'ID'};
				push @{$event{'a210'}{'nodes'}}, $p;
				$event{'a210'}{'path_url'}.="/".$p->{'name_url'};
			}
			$event{'a210'}{'path_url'}=~s|^/||;
		}
	}
	
	if ($env{'header.og'})
	{
		push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:title','content'=>$event{'name'}};
		push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:site_name','content' => $tom::H};
		push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:type','content'=>'event'};
	}
	
	# parser abstract
	$parser->parse($event{'description_short'});
	$parser->eof();
	push @{$env_out{'entity'}},@{$parser->{'entity'}} if $parser->{'entity'}; # depend on this too
	$event{'description_short_parser'}={
		'output' => $parser->{'output'},
		'addon' => $parser->{'addon'},
		'entity' => $parser->{'entity'},
		'thumbnail' => $parser->{'thumbnail'},
	};
	
	if ($env{'header.description'})
	{
		my $tmpdesc = $event{'description_short_parser'}{'output'};
		$tmpdesc=~s|<.*?>| |gms;
		push @{$env_out{'call'}{'H'}{'change_DOC_description'}}, $tmpdesc;
	}
	
	# parser body
	$parser->parse($event{'description'});
	$parser->eof();
	$event{'description_parser'}={
		'output' => $parser->{'output'},
		'addon' => $parser->{'addon'},
		'entity' => $parser->{'entity'},
		'thumbnail' => $parser->{'thumbnail'},
	};
	push @{$env_out{'entity'}},@{$parser->{'entity'}} if $parser->{'entity'}; # depend on this too
	
	$event{'related_thumbnail'}=(App::160::SQL::get_relations(
		'db_name' => $App::730::db_name,
		'l_prefix' => 'a730',
		'l_table' => 'event',
		'l_ID_entity' => $event{'ID_entity'},
		'r_prefix' => "a501",
		'r_table' => "image",
		'rel_type' => "thumbnail",
		'status' => "Y"
	))[0];
	
	my @related_gallery;
	
	foreach my $relation(App::160::SQL::get_relations(
		'db_name' => $App::730::db_name,
		'l_prefix' => 'a730',
		'l_table' => 'event',
		'l_ID_entity' => $event{'ID_entity'},
		'rel_type' => 'gallery',
		'r_prefix' => "a501",
		'r_table' => "image",
		'status' => "Y",
	)){
		push @related_gallery, $relation;
	};
	
	$event{'related_gallery'}=\@related_gallery;
	
	%{$event{'metahash'}}=App::020::functions::metadata::parse($event{'metadata'});
	delete $event{'metadata'};
	
	$TPL->{'variables'}{'event'} = \%event;
	
	return 1,%env_out;
}

1;
