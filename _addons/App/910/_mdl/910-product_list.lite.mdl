#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8;
use strict;



=head1 NAME

910-product_list.lite.mdl

=head1 DESCRIPTION

Lite list of products (without modifications)

=head1 DEPENDS

=over

=item *

L<App::910::_init|app/"910/_init.pm">

=item *

L<App::401::_init|app/"401/_init.pm">

=item *

L<App::501::_init|app/"501/_init.pm">

=back

=cut

use App::910::_init;
use App::401::_init;
use App::501::_init;


=head1 INPUTS

=over

=item *

B<-xlng_load> - load template internationalization file

=item *

B<db_name> - database name

=item *

B<product_cat.ID_entity> - comma separated list of product ID_category (can be set with * suffix to select all subcategories - 5;2*;3;7)

=item *

B<product.status> - required status, nonseparated values (default 'Y')

=item *

B<product_lng.lng> - required language (default is current)

=item *

B<image_format.ID> - format of thumbnail image

=item *

B<sql_limit> - limit to display (default '1')

=item *

B<sql_limit_start> - at start skip defined items

=item *

B<sql_order_by> - order by in SQL

=item *

B<sql_where> - where in SQL

=back

=cut



=head1 XSGN

=over

=item *

B<TMP> - default

=item *

B<#previous#> B<#next#> - to skip to another offset

=item *

B<previous> B<next> - include into <#previous#> <#next#>

=item *

B<%offset%> - offset value (calculated from sql_limit input param)

=item *

B<%sql_limit%> - SQL limit

=item *

B<%sql_limit_start%> - start SQL limit from value

=item *

B<#item#> - gateway to product item

=item *

B<item> - product item

=item *

B<item.1> - first product item

=item *

B<%db_*%> - product database items

B<%db_ID_category%>, B<%db_ID_category_name%>, B<%db_name%>, B<%db_name_url%>, B<%db_name_long%>, B<%db_product_number%>

=item *

B<%ID%> - product ID

=item *

B<%ID_entity%> - product ID_entity

=item *

B<%description_short%> - short description, like article abstract

=item *

B<%description_short_plain%> - short description as plaintext

=item *

B<%description%> - description, like article body

=item *

B<%alias_url%> - alias_url

=item *

B<%thumbnail.src%> - url to thumbnail image if available

=item *

B<TMP_failure_no-data> - if defined, replaces TMP for empty database output

=back

=cut



sub execute
{
	my %env=@_;
	Tomahawk::GetXSGN('-convertvars'=>1) || return undef;
	
	if ($Tomahawk::mdl_C{'-xlng_load'})
	{
		main::_log("using xlng transformation");
		Tomahawk::GetXLNG() || return undef; # retrieve language xml
		Tomahawk::XLNGtoXSGN(); # implement XLNG into XSGN
	}
	
	foreach (keys %env)
	{
		main::_log("key $_=$env{$_}");
	}
	
	$env{'db_name'}=$App::910::db_name unless $env{'db_name'};
	
	$env{'product_lng.lng'}=$env{'lng'} unless $env{'product_lng.lng'};
	$env{'image_format.ID'}=$App::501::image_format_thumbnail_ID unless $env{'image_format.ID'};
	$env{'sql_limit'}='1' unless $env{'sql_limit'};
	$env{'product.status'}='Y' unless $env{'product.status'};
		my $status_sql=join "','", split('',$env{'product.status'});
	
	$env{'sql_order_by'}='product_lng.name ASC' unless $env{'sql_order_by'};
	
	if (not $env{'sql_limit'}=~/,/){$env{'sql_limit'}="0,".$env{'sql_limit'}}
	if ($env{'sql_limit'}=~/^,/){$env{'sql_limit'}="0".$env{'sql_limit'};}
	if ($env{'sql_limit'}=~/^0,/ && $env{'sql_limit_start'})
	{
		$env{'sql_limit'}=~s/^(\d+),/$1+$env{'sql_limit_start'}.","/e;
	}
	
	my $count_max;
	if ($env{'sql_limit'}=~/(\d+),(\d+)/)
	{
		$env{'offset'}=$1;
		$count_max=$2;
		$env{'sql_limit'}=~s/,(\d+)/",".($1+1)/e;
	}
	
	my $execution_success=1;
	
	my $sql_where;
	
	if($env{'product_cat.path'})
	{
		if($env{'product_cat.path'}=~s/\*$//)
		{
			$env{'product_cat.ID_entity'}='*';
		}
		my %product_cat=App::020::SQL::functions::tree::find_path_url(
			$env{'product_cat.path'},
			'db_h' => "main",
			'db_name' => $TOM::DB{'main'}{'name'},
			'tb_name' => "a910_product_cat",
			'lng' => $env{'lng'},
			'-cache' => 3600,
			'-slave' => 1
		);
		if ($env{'title'})
		{
			my $title=$product_cat{'name'};
			my $page=$env{'offset'}/$count_max;
			$title.=" (".($page+1).")" if $page;
			$title.='<%price%>';
			$main::H->add_DOC_title($title);
		}
		if (!$product_cat{'ID_entity'})
		{
			$main::page_statuscode="404";
			return 1;
		}
		$env{'product_cat.ID_entity'}=$product_cat{'ID_entity'}.$env{'product_cat.ID_entity'};
	}
	
	my $sql_cat;
	foreach my $ID_category(split(';',$env{'product_cat.ID_entity'}))
	{
		next unless $ID_category;
		main::_log("select by ID_category=$ID_category");
		if ($ID_category=~s/^\*$//)
		{
			main::_log("all categories");
			$ID_category=qq{
				SELECT
					ID_entity
				FROM
					`$App::910::db_name`.a910_product_cat
				WHERE
					lng='$env{'product_lng.lng'}' AND
					status IN ('$status_sql')
			};
		}
		elsif ($ID_category=~s/\*$//)
		{
			main::_log("ID_category=$ID_category");
			my $cat_sql=qq{
						SELECT
							ID_charindex
						FROM
							`$App::910::db_name`.a910_product_cat
						WHERE
							ID_entity=$ID_category
						LIMIT 1
			};
			$ID_category=qq{
				SELECT
					ID_entity
				FROM
					`$App::910::db_name`.a910_product_cat
				WHERE
					ID_charindex LIKE CONCAT(($cat_sql),"%") AND
					lng='$env{'product_lng.lng'}' AND
					status IN ('$status_sql')
			};
		}
		$sql_cat.=" OR product_sym.ID IN ($ID_category)";
		$sql_cat=~s/^ OR //;
	}
	if ($sql_cat)
	{
		$sql_where.=" AND (".$sql_cat.") ";
	}
	
	
	if ($env{'product.ID_entity'})
	{
		$sql_where.=" AND product.ID_entity IN ('".
			(join "','", split(';',$env{'product.ID_entity'})).
			"')";
	}
	
	if ($env{'sql_where'})
	{
		$env{'sql_where'}=~s|\(metadata::(.*?)::(.*?)\)|(SELECT meta_value FROM a910_product_metaindex WHERE ID=product.ID_entity AND meta_section='$1' AND meta_variable='$2' LIMIT 1)|g;
		$sql_where.=" AND ".$env{'sql_where'};
	}
	
	if ($env{'keywords'})
	{
		
		$sql_where.=" AND (";
		foreach (split(' ',$env{'keywords'}))
		{
			next unless $_;
			$sql_where.="(product_lng.name LIKE '%$_%' OR product_lng.description LIKE '%$_%') AND ";
		}
		$sql_where=~s|AND $||;
		$sql_where.=") ";
		
	}
	
	
	my $sql=qq{
		SELECT
			DISTINCT(product.ID_entity) AS ID_entity_product,
			product.ID AS ID_product,
			product_cat.ID AS ID_category,
			product_sym.ID AS ID_entity_category,
			product_lng.ID AS ID_lng,
			product_lng.lng,
			
			product.price,
			(product.price*((100+product_ent.VAT)/100)) AS price_incl_VAT,
			product.price_currency,
			product.price/(SELECT rate FROM TOM.a910_currency_rate WHERE currency2=product.price_currency LIMIT 1) AS price_EUR,
			
			product.amount,
			product.amount_availability,
			product.product_number,
			product.metadata,
			
			product_cat.name AS ID_category_name,
			product_cat.name_url AS ID_category_name_url,
			
			product_brand.name as brand_name,
			product_brand.name_url as brand_name_url,
			
			product_family.name as family_name,
			product_family.name_url as family_name_url,
			
			product_lng.name,
			product_lng.name_url,
			product_lng.name_long,
			product_lng.description_short,
			
			product_ent.rating_score,
			product_ent.rating_votes,
			(product_ent.rating_score/product_ent.rating_votes) AS rating,
			
			IF (
				supplier_org.name IS NOT NULL,
				supplier_org.name,
				IF (
						supplier_person.firstname IS NOT NULL,
						CONCAT(supplier_person.surname,', ',supplier_person.firstname),
						NULL
					)
			) AS supplier_name,
			
			supplier_org.ID_entity AS supplier_org_ID_entity,
			supplier_org.name AS supplier_org_name,
			supplier_org.name_url AS supplier_org_name_url,
			supplier_person.firstname AS supplier_person_firstname,
			supplier_person.surname AS supplier_person_surname,
			
			product.status
			
		FROM
			`$App::910::db_name`.`a910_product` AS product
		LEFT JOIN `$App::910::db_name`.`a910_product_ent` AS product_ent ON
		(
			product_ent.ID_entity = product.ID_entity
		)
		LEFT JOIN `$App::910::db_name`.`a910_product_lng` AS product_lng ON
		(
			product_lng.ID_entity = product.ID
		)
		LEFT JOIN `$App::910::db_name`.`a910_product_sym` AS product_sym ON
		(
			product_sym.ID_entity = product.ID_entity
		)
		LEFT JOIN `$App::910::db_name`.`a910_product_brand` AS product_brand ON
		(
			product_brand.ID_entity = product_ent.ID_brand
		)
		LEFT JOIN `$App::910::db_name`.`a910_product_family` AS product_family ON
		(
			product_family.ID_entity = product_ent.ID_family
		)
		LEFT JOIN `$App::710::db_name`.`a710_org` AS supplier_org ON
		(
			supplier_org.ID_entity = product.supplier_org
		)
--		LEFT JOIN `$App::301::db_name`.`a301_user` AS user ON
--		(
--			user.ID_user = product.supplier_person
--		)
		LEFT JOIN `$App::301::db_name`.`a301_user_profile` AS supplier_person ON
		(
			supplier_person.ID_entity = product.supplier_person
		)
		LEFT JOIN `$App::910::db_name`.`a910_product_cat` AS product_cat ON
		(
			product_cat.ID_entity = product_sym.ID AND
			product_cat.lng = product_lng.lng AND
			product_cat.status IN ('$status_sql')
		)
		WHERE
			product.status IN ('$status_sql') AND
			product.price IS NOT NULL AND
			product.price > 0 AND
			product.product_number IS NOT NULL AND
			product_sym.ID AND
			product_lng.lng='$env{'product_lng.lng'}'
			$sql_where
		ORDER BY
			$env{'sql_order_by'}
		LIMIT
			$env{'sql_limit'}
	};
	
	my %sth0=TOM::Database::SQL::execute($sql,'log'=>1,'-slave'=>1,'-cache_auto_'=>60);
	
	if(!$sth0{'sth'})
	{
		main::_log("SQL can't be executed",1);
	}
	
	if(!$sth0{'rows'})
	{
		main::_log("err: could not fetch articles");
	}
	
	main::_log("received ".$sth0{'rows'}." rows");
	
	
	# Line counter
	my $item_counter=0;
	my $description;
	my $description_full;
	my $price_lowest;
	my $name_last;
   my %IDs_entity;
	while (my %db0_line=$sth0{'sth'}->fetchhash())
	{
		if (!$item_counter)
		{
			# first product
		}
		
		$item_counter++;
		
		last if $count_max<$item_counter;
		
		main::_log("product[$item_counter] product_lng.name='$db0_line{'name'}' $db0_line{'supplier_name'}");
		
		if ($name_last ne $db0_line{'name'})
		{
			$description.=$db0_line{'name'}.", ";
		}
		$description_full.=$db0_line{'name'}.", ";
		$description_full.=$db0_line{'description_short'}.", ";
		
		my $item=
			$XSGN{'item.'.$item_counter}
			|| $XSGN{'item'};
		
		if($db0_line{'amount_availability'}){
			$item=$XSGN{'item.unavailable'} if $XSGN{'item.unavailable'};
		}
		
		if (!$price_lowest || $db0_line{'price_incl_VAT'}<$price_lowest)
		{
			$price_lowest=$db0_line{'price_incl_VAT'};
		}
		
		my $price=TOM::Utils::currency::format($db0_line{'price'});
		$item=~s|<%price%>|$price|g;
		
		$price=TOM::Utils::currency::format($db0_line{'price_incl_VAT'});
		$item=~s|<%price_incl_VAT%>|$price|g;
		
		# fill raw data into $XSGN{'item'}
		$db0_line{'supplier_name_url'}=TOM::Net::URI::rewrite::convert($db0_line{'supplier_name'});
		$item=~s|<%db_(.*?)%>|$db0_line{$1}|g;
		
		# process description_short
		my $p=new App::401::mimetypes::html;
		
		# img
		$p->{'ignore'}{'img'}=
			$env{'body.ignore.img'}
			|| $env{'ignore.img'}
			|| undef;
		
		$p->{'ignore'}{'img.1'}=
			$env{'abstract.ignore.img.1'}
			|| $env{'ignore.img.1'}
			|| undef;
		
		# a501_image
		$p->{'config'}->{'a501_image_file.ID_format'}=
			$env{'article.'.$item_counter.'.abstract.a501_image_file.ID_format'}
			|| $env{'article.'.$item_counter.'.a501_image_file.ID_format'}
			|| $env{'abstract.a501_image_file.ID_format'}
			|| $env{'a501_image_file.ID_format'}
			|| undef;
		$p->{'config'}->{'a501_image_file.ID_format.1'}=
			$env{'article.'.$item_counter.'.abstract.a501_image_file.ID_format.1'}
			|| $env{'article.'.$item_counter.'.a501_image_file.ID_format.1'}
			|| $env{'abstract.a501_image_file.ID_format.1'}
			|| $env{'a501_image_file.ID_format.1'}
			|| undef;
		$p->{'entity'}->{'a501_image'}=
			$XSGN{'abstract.a501_image'}
			|| $XSGN{'a501_image'}
			|| undef;
		$p->{'entity'}->{'a501_image.1'}=
			$XSGN{'abstract.a501_image.1'}
			|| $XSGN{'a501_image.1'}
			|| undef;
		
		# a510_video
		$p->{'entity'}{'a510_video_part'}=
			$XSGN{'abstract.a510_video_part'}
			|| $XSGN{'a510_video_part'}
			|| undef;
		
		$p->parse($db0_line{'description_short'});
		#$p->eof();
		my $description_short_html=$p->{'out'};
		$item=~s|<%description_short%>|$description_short_html|;
		
		my $description_short_plain=TOM::Text::format::xml2plain($db0_line{'description_short'});
		$item=~s|<%description_short_plain%>|$description_short_plain|;
		
		$item=~s|<%out\.(.*?)%>|$p->{'out_var'}->{$1}|g;
		$item=~s|<#out\.(.*?)#>|$p->{'out_tag'}->{$1}|g;
		
		foreach my $relation (App::160::SQL::get_relations(
			'db_name' => $App::910::db_name,
			'l_prefix' => 'a910',
			'l_table' => 'product',
			'l_ID_entity' => $db0_line{'ID_product'},
			'status' => "Y"
		))
		{
			if (
					$relation->{'r_prefix'} eq "a501" &&
					$relation->{'r_table'} eq "image" &&
					$relation->{'rel_type'} eq "thumbnail"
			)
			{
				my %db1_line=App::501::functions::get_image_file(
					'image.ID_entity' => $relation->{'r_ID_entity'},
					'image_file.ID_format' => $env{'image_format.ID'},
					'image_attrs.lng' => $env{'lng'}
				);
				if ($db1_line{'ID_entity_image'})
				{
					my $uri=$tom::H_a501.'/image/file/'.$db1_line{'file_path'};
					$item=~s|<%thumbnail.src%>|$uri|;
					
					# fatal: added option to load fullsize image path
					my %db1_line=App::501::functions::get_image_file(
						'image.ID_entity' => $relation->{'r_ID_entity'},
						'image_file.ID_format' => 2,
						'image_attrs.lng' => $env{'lng'}
					);
					
					if ($db1_line{'ID_entity_image'})
					{
						my $uri=$tom::H_a501.'/image/file/'.$db1_line{'file_path'};
						$item=~s|<%fullsize.src%>|$uri|;
					}
					# /fatal
				}
			}
		}
		
		
		# check alternate url
		my $ID_category=$db0_line{'ID_category'};
		main::_log("finding alias_url from ID_category='$ID_category'");
		my $alias_url;
		my %data=App::020::SQL::functions::get_ID(
			'ID' => $ID_category,
			'db_h' => 'main',
			'db_name' => $App::910::db_name,
			'tb_name' => 'a910_product_cat',
			'columns' => {'*' => 1},
			'-cache' => 3600,
			'-slave' => 1,
		);
		$alias_url=$data{'alias_url'} if $data{'alias_url'};
		main::_log("setup alias_url='$alias_url' in ID_category='$ID_category'") if $alias_url;
		while ($ID_category && !$alias_url)
		{
			my %data=App::020::SQL::functions::tree::get_parent_ID(
				'ID' => $ID_category,
				'db_h' => 'main',
				'db_name' => $App::910::db_name,
				'tb_name' => 'a910_product_cat',
				'columns' => {'*' => 1},
				'-cache' => 3600,
				'-slave' => 1,
			);
			$ID_category=$data{'ID'};
			if ($data{'alias_url'})
			{
				$alias_url=$data{'alias_url'};
				main::_log("setup alias_url='$alias_url' in ID_category='$ID_category'");
				last;
			}
		}
		main::_log("can't find alias_url") unless $alias_url;
		
		$item=~s|<%alias_url%>|$alias_url|g if $alias_url;
		$item=~s|<%alias_url%>|$tom::H_www|g unless $alias_url;
		
		$item=~s|<%item_number%>|$item_counter|g;
		
		$item=~s|<%name%>|$db0_line{'name'}|;
		
		if ($item=~/<%path/)
		{
			my $path_url_;
			my $path_;
			foreach my $node (App::020::SQL::functions::tree::get_path(
				$db0_line{'ID_category'},
				'db_h'    => 'main',
				'db_name' => $App::910::db_name,
				'tb_name' => 'a910_product_cat',
			))
			{
				$path_.='/'.$node->{'name'};
				$path_url_.='/'.$node->{'name_url'};
			}
			$path_=~s|^/||;$path_url_=~s|^/||;
			$item=~s|<%path%>|$path_|g;
			$item=~s|<%path_url%>|$path_url_|g;
		}
		
		my %metadata=App::020::functions::metadata::parse($db0_line{'metadata'});
		foreach my $sec(keys %metadata){foreach (keys %{$metadata{$sec}}){$item=~s/<%$sec\::$_%>/$metadata{$sec}{$_}/g;}}
		
		if($XSGN{'TMP'}=~/<#item.$item_counter#>/)
		{
			$XSGN{'TMP'}=~s|<#item.$item_counter#>|$item|;
		}
		else
		{
			$XSGN{'TMP'}=~s|<#item#>|$item|;
		}
		
		$name_last=$db0_line{'name'};
	}
	
	$main::H->add_DOC_description($description) if $env{'description'};
	if ($env{'set_keywords'})
	{
		my %keywords;
		$description_full=~s|<.*?>||g;
		$description_full=~s|[\.\-]||g;
		$description_full=~s|&nbsp;||g;
		$description_full=lc($description_full);
		foreach my $word(split('[ ,]',$description_full))
		{
			$word=~s|^\s+||g;
			$word=~s|\s+$||g;
			next if length($word)<4;
			$keywords{$word}++;
		}
		$description_full = join (",",reverse sort keys %keywords);
		$main::H->add_DOC_keywords($description_full);
	}
	if ($env{'title'})
	{
		my $price=TOM::Utils::currency::format($price_lowest);
		$main::H->{'env'}{'DOC_title'}=~s|<%price%>| od $price €|;
	}
	
	$XSGN{'TMP'}=~s|<%total_count%>|$item_counter|g;
	
	
	# offset
	if ($count_max && $item_counter >= $count_max && $count_max < $sth0{'rows'}) # count
	{
		$XSGN{'next'}=~s|<%offset%>|$env{'offset'}+$count_max|ge;
		$XSGN{'TMP'}=~s|<#next#>|$XSGN{'next'}|g;
	}
	if ($env{'offset'}-$env{'sql_limit_start'})
	{
		if ($env{'offset'} - $count_max - $env{'sql_limit_start'}>0)
		{
			$XSGN{'previous'}=~s|<%offset%>|$env{'offset'}-$count_max|ge;
		}
		else
		{
			$XSGN{'previous'}=~s|<%offset%>||ge;
		}
		$XSGN{'TMP'}=~s|<#previous#>|$XSGN{'previous'}|g;
	}
	
	
	if(!$item_counter)
	{
		if($XSGN{'TMP_failure_no-data'})
		{
			$XSGN{'TMP'} = $XSGN{'TMP_failure_no-data'};
		}
	}
	
	return 1;
}


our $authors="open\@comsultia.com";

=head1 AUTHORS

Comsultia, Ltd. (open@comsultia.com)

=cut

1;
