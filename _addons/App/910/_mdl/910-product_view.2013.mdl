#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8;
use strict;


use App::210::_init;
use App::710::_init;
use App::910::_init;


sub execute
{
	my %env=@_;
	my %env_out;
	
	$env{'product.status'}='Y' unless $env{'product.status'};
		my $sql_product_status=join "','", split('',$env{'product.status'});
	
	$env{'product.status_main'}='Y' unless $env{'product.status_main'};
		my $sql_product_status_main=join "','", split('',$env{'product.status_main'});
		
	$env{'set.product.status_main'}='Y' unless $env{'set.product.status_main'};
		my $sql_set_product_status_main=join "','", split('',$env{'set.product.status_main'});
	
	$env{'modification.product.status_main'}='N' unless $env{'modification.product.status_main'};
		my $sql_modification_product_status_main=join "','", split('',$env{'modification.product.status_main'});
	
	$env{'check_price'} = 1 unless exists $env{'check_price'};
	$env{'check_world'} = 1 unless exists $env{'check_world'};
	#$env{'check_price_or_modifications'} = 0 unless exists $env{'check_price_or_modifications'};
	$env{'modifications'} = 0 unless exists $env{'modifications'};
	$env{'check_availability'} = 0 unless exists $env{'check_availability'};
	
	$env{'price_level.ID_entity'} = 0 unless exists $env{'price_level.ID_entity'};
	
	
	my @sql_bind;
	my $sql_join;
	my $sql_columns;
	my $sql_where;
	my $sql_changetime;
	my $sql_limit=$env{'sql_limit'} || 10;
	my $sql_order_by=$env{'sql_order_by'} || 'product.ID DESC';
	my $sql_group_by;
	
	if ($env{'check_world'})
	{
		if ($main::USRM{'logged'} eq "Y")
		{
		}
		else
		{
			$sql_where.=" AND (ACL_world.perm_R='Y' OR ACL_world.perm_R IS NULL)";
		}
	}
	
	if ($env{'product.ID_entity'})
	{
		main::_log("search by product.ID_entity");
		push @{$env_out{'entity'}},{
			'db_h' => 'main',
			'db_name' => $App::910::db_name,
			'tb_name' => 'a910_product',
			'ID_entity' => $env{'product.ID_entity'}
		};
		$sql_where.="AND product.ID_entity=? ";
		push @sql_bind,$env{'product.ID_entity'};
		$sql_changetime=App::020::SQL::functions::_get_changetime(
			{
				'db_h'=>"main",
				'db_name' => $App::910::db_name,
				'tb_name' => "a910_product",
				'ID_entity' => $env{'product.ID_entity'}
			}
		);
	}
	elsif ($env{'product.ID'})
	{
		main::_log("search by product.ID");
		#push @{$env_out{'entity'}},{
		#	'db_h' => 'main',
		#	'db_name' => $App::910::db_name,
		#	'tb_name' => 'a910_product',
		#	'ID_entity' => $env{'product.ID_entity'}
		#};
		$sql_where.="AND product.ID=? ";
		push @sql_bind,$env{'product.ID'};
		#$sql_changetime=App::020::SQL::functions::_get_changetime(
		#	{
		#		'db_h'=>"main",
		#		'db_name' => $App::910::db_name,
		#		'tb_name' => "a910_product",
		#		'ID_entity' => $env{'product.ID_entity'}
		#	}
		#);
	}
	elsif ($env{'product.product_number'})
	{
		main::_log("search by product.product_number");
		$sql_where.="AND product.product_number=? ";
		push @sql_bind,$env{'product.product_number'};
	}
	else
	{
		main::_log("product.ID_entity/product_number not defined");
		return 1;
	}
	
	if ($env{'price_level.ID_entity'} && $env{'price_level.ID_entity'} =~/^\d+$/)
	{
		$sql_join.=qq{INNER JOIN $App::910::db_name.a910_price_level AS price_level ON
		(
			price_level.ID_entity = $env{'price_level.ID_entity'} AND
			price_level.status = 'Y'
		)
		INNER JOIN $App::910::db_name.a910_product_price AS product_price ON
		(
			product_price.ID_price = $env{'price_level.ID_entity'} AND
			product_price.status = 'Y'
		)
		};
		$sql_columns.=qq{,
			product_price.price,
			product_price.price_full, AS price_incl_VAT,
			product_level.currency AS price_currency,
			product_price.price/(SELECT rate FROM TOM.a910_currency_rate WHERE currency2=product_level.currency LIMIT 1) AS price_EUR};
		$sql_where.=" AND (product_price.price IS NOT NULL AND product_price.price > 0)";
	}
	else
	{
		$sql_columns.=qq{,
			product.price,
			(product.price*((100+product_ent.VAT)/100)) AS price_incl_VAT,
			product.price_currency,
			product.price/(SELECT rate FROM TOM.a910_currency_rate WHERE currency2=product.price_currency LIMIT 1) AS price_EUR,
			product.price_previous,
			(product.price_previous*((100+product_ent.VAT)/100)) AS price_previous_incl_VAT,
			product.price_previous/(SELECT rate FROM TOM.a910_currency_rate WHERE currency2=product.price_currency LIMIT 1) AS price_previous_EUR};
		$sql_where.="
			AND ((product.price IS NOT NULL AND product.price > 0)".do{
				if ($env{'modifications'})
				{
					qq{ OR (
				SELECT modification.price
				FROM $App::910::db_name.a910_product AS modification
				WHERE
					modification.ID_entity = product.ID_entity
					AND modification.status IN ('$sql_product_status')
					AND modification.status_main IN ('$sql_modification_product_status_main')
					AND (modification.datetime_publish_start IS NULL OR modification.datetime_publish_start <= NOW())
					AND (modification.datetime_publish_stop IS NULL OR modification.datetime_publish_stop >= NOW())
					AND modification.price IS NOT NULL
					AND modification.price > 0}.do{
				if ($env{'check_availability'})
				{
					qq{
					AND modification.amount > modification.amount_limit AND modification.amount > 0
					};
				}
					}.qq{
				LIMIT 1
			) > 0};
				}else{''}
			}.")"
		if $env{'check_price'};
	}
	
	if ($env{'check_availability'})
	{
		$sql_where.="
			AND ((product.amount > product.amount_limit AND product.amount > 0)".do{
				if ($env{'modifications'})
				{
					qq{ OR (
				SELECT modification.ID
				FROM $App::910::db_name.a910_product AS modification
				WHERE
					modification.ID_entity = product.ID_entity
					AND modification.status IN ('$sql_product_status')
					AND modification.status_main IN ('$sql_modification_product_status_main')
					AND (modification.datetime_publish_start IS NULL OR modification.datetime_publish_start <= NOW())
					AND (modification.datetime_publish_stop IS NULL OR modification.datetime_publish_stop >= NOW())
					AND modification.amount > modification.amount_limit
					AND modification.amount > 0}.do{
				if ($env{'check_price'})
				{
					qq{
					AND modification.price IS NOT NULL AND modification.price > 0
					};
				}
					}.qq{
				LIMIT 1
			) IS NOT NULL};
				}else{''}
			}.")"
	}
	
	$sql_where.=" AND ".$env{'sql_where'} if $env{'sql_where'};
	
	$sql_where=~s|^ ||;
	
	# get template
	Tomahawk::GetTpl('env' => \%env) || return undef;
	
#	return 1 unless $sql_where;
	
	use App::020::mimetypes::html;
	my $parser=new App::020::mimetypes::html(
		'tpl_ext' => $TPL # extend
	);
	
	my %sth0=TOM::Database::SQL::execute(qq{
		SELECT
			product.ID_entity,
			product.ID,
			product.product_number,
			product.datetime_publish_start,
			product.datetime_publish_stop,
			product.amount,
			product.amount_unit,
			product.amount_availability,
			product.amount_limit,
			product.amount_order_min,
			product.amount_order_max,
			product.amount_order_div,
			product.metadata,
			product.supplier_org,
			product.supplier_person,
			product.status_new,
			product.status_recommended,
			product.status_sale,
			product.status_special,
			product.status_main,
			product.status,
			
			product_ent.posix_owner,
			product_ent.ID_brand,
			product_ent.ID_family,
			product_ent.VAT AS ent_VAT,
			product_ent.rating_score,
			product_ent.rating_votes,
			(product_ent.rating_score/product_ent.rating_votes) AS rating,
			product_ent.priority_A,
			product_ent.priority_B,
			product_ent.priority_C,
			product_ent.product_type,
			
			product_lng.name,
			product_lng.name_url,
			product_lng.name_long,
			product_lng.name_label,
			product_lng.description_short,
			product_lng.description,
			product_lng.keywords,
			product_lng.lng,
			
			product_cat.ID AS cat_ID,
			
			product_brand.name AS brand_name,
			
			product_family.name AS family_name,
			product_family.name_url AS family_name_url,
			
			supplier_org.ID AS supplier_org_ID,
			supplier_org.ID_entity AS supplier_org_ID_entity,
			supplier_org.name AS supplier_org_name,
			supplier_org.name_url AS supplier_org_name_url,
			supplier_org_lng.about AS supplier_org_about$sql_columns
			
		FROM $App::910::db_name.a910_product_ent AS product_ent
		LEFT JOIN $App::910::db_name.a910_product AS product ON
		(
			product_ent.ID_entity = product.ID_entity
		)
		LEFT JOIN $App::910::db_name.a910_product_lng AS product_lng ON
		(
			product_lng.ID_entity = product.ID AND
			product_lng.lng = '$env{'lng'}'
		)
		
		INNER JOIN $App::910::db_name.a910_product_sym AS product_sym ON
		(
			product_sym.ID_entity = product.ID_entity
		)
		INNER JOIN $App::910::db_name.a910_product_cat AS product_cat ON
		(
			product_cat.ID_entity = product_sym.ID AND
			product_cat.lng = product_lng.lng AND
			product_cat.status IN ('Y','L')
		)
		
		LEFT JOIN $App::910::db_name.a910_product_brand AS product_brand ON
		(
			product_brand.ID_entity = product_ent.ID_brand
		)
		LEFT JOIN $App::910::db_name.a910_product_family AS product_family ON
		(
			product_family.ID_entity = product_ent.ID_family
		)
		LEFT JOIN $App::710::db_name.a710_org AS supplier_org ON
		(
			supplier_org.ID_entity = product.supplier_org
		)
		LEFT JOIN $App::710::db_name.a710_org_lng AS supplier_org_lng ON
		(
			supplier_org.ID_entity=supplier_org_lng.ID_entity AND supplier_org_lng.lng = '$env{'lng'}'
		)
		LEFT JOIN $App::910::db_name.a301_ACL_user_group AS ACL_world ON
		(
			ACL_world.ID_entity = 0 AND
			r_prefix = 'a910' AND
			r_table = 'product' AND
			r_ID_entity = product.ID_entity
		)
		
		$sql_join
		
		WHERE
			product_ent.status = 'Y'
			AND product.status IN ('$sql_product_status')
			AND product.status_main IN ('$sql_product_status_main')
			AND (product.datetime_publish_start IS NULL OR product.datetime_publish_start <= NOW())
			AND (product.datetime_publish_stop IS NULL OR product.datetime_publish_stop >= NOW())
			$sql_where}.do{if($sql_group_by){qq{
		GROUP BY
			$sql_group_by}}}.qq{
		ORDER BY
			$sql_order_by
		LIMIT
			1
	},'bind'=>[@sql_bind],'log'=>0,'-slave'=>1,
		'-changetime'=>App::020::SQL::functions::_get_changetime(
			{
				'db_h'=>"main",
				'db_name' => $App::910::db_name,
				'tb_name' => "a910_product",
				'ID_entity' => do{$env{'product.ID_entity'} if $env{'product.ID_entity'}=~/^\d+$/}
			}),
	);
	
	my %product=$sth0{'sth'}->fetchhash();
	
	return 1 unless $product{'ID_entity'};
	
	my @gallery_images;
	foreach my $relation(App::160::SQL::get_relations(
		'db_name' => $App::910::db_name,
		'l_prefix' => 'a910',
		'l_table' => 'product',
		'l_ID_entity' => $product{'ID_entity'},
		'rel_type' => 'gallery',
		'r_prefix' => "a501",
		'r_table' => "image",
		'status' => "Y",
	))
	{
		next unless $relation->{'r_ID_entity'};
		
		push @gallery_images, $relation->{'r_ID_entity'};
	}
	$product{'gallery'} = \@gallery_images;
	
	if ($product{'supplier_org_ID_entity'}) {
		my $tmphash=(App::160::SQL::get_relations(
			'db_name' => $App::710::db_name,
			'l_prefix' => 'a710',
			'l_table' => 'org',
			'l_ID_entity' => $product{'supplier_org_ID_entity'},
			'r_prefix' => "a501",
			'r_table' => "image",
			'rel_type' => "avatar",
			'status' => "Y"
		))[0];
		$product{'supplier_org_avatar'}=$tmphash->{'r_ID_entity'};
	}
	
	
	main::_log("product product.ID_entity='$product{'ID_entity'}' product.ID='$product{'ID'}' product.name='$product{'name'}'");
	
	push @{$env_out{'call'}{'H'}{'add_DOC_keywords'}},$product{'keywords'}
		if $env{'header.keywords'};
	
	push @{$env_out{'call'}{'H'}{'add_DOC_title'}},$product{'name'}
		if $env{'header.title'};
	
	$product{'related_thumbnail'}=(App::160::SQL::get_relations(
		'db_name' => $App::910::db_name,
		'l_prefix' => 'a910',
		'l_table' => 'product',
		'l_ID_entity' => $product{'ID'},
		'r_prefix' => "a501",
		'r_table' => "image",
		'rel_type' => "thumbnail",
		'status' => "Y"
	))[0];
	
	if ($env{'header.og'})
	{
		push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:title','content'=>$product{'name'}};
		push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:site_name','content' => $tom::H};
		push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:type','content'=>'article'};
		
		if ($product{'related_thumbnail'}->{'r_ID_entity'})
		{
			my %image=App::501::functions::get_image_file(
				'image.ID_entity' => $product{'related_thumbnail'}->{'r_ID_entity'},
				'image_file.ID_format' => $env{'header.og.image_format.ID'} || $App::501::image_format_thumbnail_ID,
				'image_attrs.lng' => $env{'lng'}
			);
			push @{$env_out{'call'}{'H'}{'add_DOC_meta'}},{'property'=>'og:image','content'=>$tom::H_a501.'/image/file/'.$image{'file_path'}};
		}
	}
	
	# link to a210_page
	if (my $category=App::910::functions::_a210_by_cat([$product{'cat_ID'}],'lng'=>$env{'lng'}))
	{
		my %sql_def=('db_h' => "main",'db_name' => $App::210::db_name,'tb_name' => "a210_page");
		foreach my $p(
			App::020::SQL::functions::tree::get_path(
				$category,
				%sql_def,
				'-slave' => 1,
				'-cache' => 86400*7
			)
		)
		{
			push @{$product{'a210'}{'IDs'}}, $p->{'ID'};
			push @{$product{'a210'}{'nodes'}}, $p;
			$product{'a210'}{'path_url'}.="/".$p->{'name_url'};
		}
		$product{'a210'}{'path_url'}=~s|^/||;
	}
	
	# parser description_short
	$parser->parse($product{'description_short'});
	$parser->eof();
	push @{$env_out{'entity'}},@{$parser->{'entity'}} if $parser->{'entity'}; # depend on this too
	$product{'description_short_parser'}={
		'output' => $parser->{'output'},
		'addon' => $parser->{'addon'},
		'entity' => $parser->{'entity'},
		'thumbnail' => $parser->{'thumbnail'},
	};
	
	push @{$env_out{'call'}{'H'}{'change_DOC_description'}},TOM::Text::format::xml2plain($product{'description_short'})
		if $env{'header.description'};
	
	# parser description
	$parser->parse($product{'description'});
	$parser->eof();
	$product{'description_parser'}={
		'output' => $parser->{'output'},
		'addon' => $parser->{'addon'},
		'entity' => $parser->{'entity'},
		'thumbnail' => $parser->{'thumbnail'},
	};
	push @{$env_out{'entity'}},@{$parser->{'entity'}} if $parser->{'entity'}; # depend on this too
	
	%{$product{'metahash'}}=App::020::functions::metadata::parse($product{'metadata'});
	delete $product{'metadata'};
	
	if ($env{'supplier_org'} && $product{'supplier_org_ID'})
	{
		use App::710::_init;
		my %sth1=TOM::Database::SQL::execute(qq{
			SELECT
				org.*,
				org_lng.name_short,
				org_lng.about
			FROM $App::710::db_name.a710_org AS org
			LEFT JOIN $App::710::db_name.a710_org_lng AS org_lng ON
			(
				org_lng.ID_entity = org.ID AND
				org_lng.lng = '$env{'lng'}'
			)
			WHERE
				org.status = 'Y' AND
				org.ID = ?
			LIMIT
				1
		},'bind'=>[$product{'supplier_org_ID'}],'log'=>0,'-slave'=>1,
			'-changetime'=>App::020::SQL::functions::_get_changetime(
				{
					'db_h'=>"main",
					'db_name' => $App::710::db_name,
					'tb_name' => "a710_org",
					'ID_entity' => $product{'supplier_org_ID'}
				}),
		);
		my %db1_line=$sth1{'sth'}->fetchhash();
		
		$db1_line{'related_avatar'}=(App::160::SQL::get_relations(
			'db_name' => $App::710::db_name,
			'l_prefix' => 'a710',
			'l_table' => 'org',
			'l_ID_entity' => $db1_line{'ID_entity'},
			'r_prefix' => "a501",
			'r_table' => "image",
			'rel_type' => "avatar",
			'status' => "Y"
		))[0];
		
		%{$db1_line{'metahash'}}=App::020::functions::metadata::parse($db1_line{'metadata'});
		delete $db1_line{'metadata'};
		
		$product{'supplier_org'}=\%db1_line;
	}
	
	if ($env{'prices'})
	{
		# prices
		my %sth1=TOM::Database::SQL::execute(qq{
			SELECT
				a910_product_price.*,
				a910_price_level.name_code
			FROM
				$App::910::db_name.a910_product_price
			INNER JOIN $App::910::db_name.a910_price_level ON
			(
				a910_product_price.ID_price = a910_price_level.ID_entity
			)
			WHERE
						a910_product_price.ID_entity = ?
				AND	a910_product_price.status IN ('Y', 'L')
		},'quiet'=>1,'bind'=>[$product{'ID'}]);
		while (my %db1_line=$sth1{'sth'}->fetchhash())
		{
			next if $db1_line{'price'} == 0;
			$product{'prices'}{$db1_line{'name_code'}}={
				'price' => $db1_line{'price'},
				'price_full' => ($db1_line{'price_full'} || $db1_line{'price'})
			}
		}
	}
	
	main::_log("try to find modifications? (status_main=$product{'status_main'} modifications=$env{'modifications'})");
	if ($product{'status_main'} eq "Y" && $env{'modifications'})
	{
		# skusime najst produktove modifikacie;
		main::_log("yes, try to find modifications");
		
		my $sql_columns;
		my $sql_join;
		my $sql_bind;
		my $sql_where;
		my @sql_bind;
		
		$sql_where.="AND product.ID_entity=? ";
		push @sql_bind,$env{'product.ID_entity'};
		
		if ($env{'price_level.ID_entity'} && $env{'price_level.ID_entity'} =~/^\d+$/)
		{
			$sql_join.=qq{INNER JOIN $App::910::db_name.a910_price_level AS price_level ON
			(
				price_level.ID_entity = $env{'price_level.ID_entity'} AND
				price_level.status = 'Y'
			)
			INNER JOIN $App::910::db_name.a910_product_price AS product_price ON
			(
				product_price.ID_price = $env{'price_level.ID_entity'} AND
				product_price.status = 'Y'
			)
			};
			$sql_columns.=qq{,
				product_price.price,
				product_price.price_full, AS price_incl_VAT,
				product_level.currency AS price_currency,
				product_price.price/(SELECT rate FROM TOM.a910_currency_rate WHERE currency2=product_level.currency LIMIT 1) AS price_EUR};
			$sql_where.=" AND product_price.price IS NOT NULL AND product_price.price > 0";
		}
		else
		{
			$sql_columns.=qq{,
				product.price,
				(product.price*((100+product_ent.VAT)/100)) AS price_incl_VAT,
				product.price_currency,
				product.price/(SELECT rate FROM TOM.a910_currency_rate WHERE currency2=product.price_currency LIMIT 1) AS price_EUR};
			$sql_where.=" AND product.price IS NOT NULL AND product.price > 0"
				if $env{'check_price'};
		}
		
		if ($env{'check_availability'})
		{
			$sql_where.=qq{
				AND product.amount > product.amount_limit AND product.amount > 0};
		}
		
		my %sth1=TOM::Database::SQL::execute(qq{
			SELECT
				
				product.ID_entity,
				product.ID,
				product.product_number,
				product.ref_ID,
				product.datetime_publish_start,
				product.datetime_publish_stop,
				product.amount,
				product.amount_unit,
				product.amount_availability,
				product.amount_limit,
				product.amount_order_min,
				product.amount_order_max,
				product.amount_order_div,
				product.metadata,
				product.supplier_org,
				product.supplier_person,
				product.status_new,
				product.status_recommended,
				product.status_sale,
				product.status_special,
				product.status_main,
				product.status,
				
				product_lng.name,
				product_lng.name_url,
				product_lng.name_long,
				product_lng.name_label,
				product_lng.description_short,
				product_lng.description,
				product_lng.keywords,
				product_lng.lng,
				
				supplier_org.ID AS supplier_org_ID,
				supplier_org.ID_entity AS supplier_org_ID_entity,
				supplier_org.name AS supplier_org_name,
				supplier_org.name_url AS supplier_org_name_url
				
				$sql_columns
				
			FROM $App::910::db_name.a910_product_ent AS product_ent
			LEFT JOIN $App::910::db_name.a910_product AS product ON
			(
				product_ent.ID_entity = product.ID_entity
			)
			LEFT JOIN $App::910::db_name.a910_product_lng AS product_lng ON
			(
				product_lng.ID_entity = product.ID AND
				product_lng.lng = '$env{'lng'}'
			)
			
			LEFT JOIN $App::710::db_name.a710_org AS supplier_org ON
			(
				supplier_org.ID_entity = product.supplier_org
			)
			
			$sql_join
			
			WHERE
				product_ent.status = 'Y'
				AND product.status IN ('$sql_product_status')
				AND product.status_main IN ('$sql_modification_product_status_main')
				AND (product.datetime_publish_start IS NULL OR product.datetime_publish_start <= NOW())
				AND (product.datetime_publish_stop IS NULL OR product.datetime_publish_stop >= NOW())
				$sql_where
			ORDER BY
				product.ID DESC
		},'bind'=>[@sql_bind],'log'=>0,'-slave'=>1,
			'-changetime'=>App::020::SQL::functions::_get_changetime(
				{
					'db_h'=>"main",
					'db_name' => $App::910::db_name,
					'tb_name' => "a910_product",
					'ID_entity' => do{$env{'product.ID_entity'} if $env{'product.ID_entity'}=~/^\d+$/}
				}),
		);
		
		while (my %product_modification=$sth1{'sth'}->fetchhash())
		{
			main::_log("modification product.ID='$product_modification{'ID'}' product.name='$product_modification{'name'}'");
			
			$product_modification{'related_thumbnail'}=(App::160::SQL::get_relations(
				'db_name' => $App::910::db_name,
				'l_prefix' => 'a910',
				'l_table' => 'product',
				'l_ID_entity' => $product_modification{'ID'},
				'r_prefix' => "a501",
				'r_table' => "image",
				'rel_type' => "thumbnail",
				'status' => "Y"
			))[0];
			
			foreach my $relation(App::160::SQL::get_relations(
				'db_name' => $App::910::db_name,
				'l_prefix' => 'a910',
				'l_table' => 'product',
				'l_ID_entity' => $product_modification{'ID'},
				'rel_type' => 'gallery',
				'r_prefix' => "a501",
				'r_table' => "image",
				'status' => "Y",
			))
			{
				next unless $relation->{'r_ID_entity'};
				push @{$product_modification{'gallery'}}, $relation->{'r_ID_entity'};
			}
			
			%{$product_modification{'metahash'}}=App::020::functions::metadata::parse($product_modification{'metadata'});
			delete $product_modification{'metadata'};
			
			if ($env{'prices'})
			{
				# prices
				my %sth2=TOM::Database::SQL::execute(qq{
					SELECT
						a910_product_price.*,
						a910_price_level.name_code
					FROM
						$App::910::db_name.a910_product_price
					INNER JOIN $App::910::db_name.a910_price_level ON
					(
						a910_product_price.ID_price = a910_price_level.ID_entity
					)
					WHERE
								a910_product_price.ID_entity = ?
						AND	a910_product_price.status IN ('Y', 'L')
				},'quiet'=>1,'bind'=>[$product_modification{'ID'}]);
				while (my %db2_line=$sth2{'sth'}->fetchhash())
				{
					next if $db2_line{'price'} == 0;
					$product_modification{'prices'}{$db2_line{'name_code'}}={
						'price' => $db2_line{'price'},
						'price_full' => ($db2_line{'price_full'} || $db2_line{'price'})
					}
				}
			}
			
			push @{$product{'modifications'}},\%product_modification;
		}
		
	}
	
	# produktovy set
	if ($product{'product_type'} eq "SET")
	{
		main::_log("try to find products in set");
		
		foreach my $relation (App::160::SQL::get_relations(
				'db_name' => $App::910::db_name,
				'l_prefix' => 'a910',
				'l_table' => 'product',
				'l_ID_entity' => $product{'ID'},
				'r_prefix' => "a910",
				'r_table' => "product",
				'rel_type' => "product_set",
				'status' => "Y"
		))
		{
			my $sql_columns;
			my $sql_join;
			my $sql_bind;
			my $sql_where;
			my @sql_bind;
			
			$sql_where.="AND product.ID=? ";
			push @sql_bind,$relation->{'r_ID_entity'};
			
			if ($env{'price_level.ID_entity'} && $env{'price_level.ID_entity'} =~/^\d+$/)
			{
				$sql_join.=qq{INNER JOIN $App::910::db_name.a910_price_level AS price_level ON
				(
					price_level.ID_entity = $env{'price_level.ID_entity'} AND
					price_level.status = 'Y'
				)
				INNER JOIN $App::910::db_name.a910_product_price AS product_price ON
				(
					product_price.ID_price = $env{'price_level.ID_entity'} AND
					product_price.status = 'Y'
				)
				};
				$sql_columns.=qq{,
					product_price.price,
					product_price.price_full, AS price_incl_VAT,
					product_level.currency AS price_currency,
					product_price.price/(SELECT rate FROM TOM.a910_currency_rate WHERE currency2=product_level.currency LIMIT 1) AS price_EUR};
#				$sql_where.=" AND product_price.price IS NOT NULL AND product_price.price > 0";
			}
			else
			{
				$sql_columns.=qq{,
					product.price,
					(product.price*((100+product_ent.VAT)/100)) AS price_incl_VAT,
					product.price_currency,
					product.price/(SELECT rate FROM TOM.a910_currency_rate WHERE currency2=product.price_currency LIMIT 1) AS price_EUR};
#				$sql_where.=" AND product.price IS NOT NULL AND product.price > 0"
#					if $env{'check_price'};
			}
			
#			if ($env{'check_availability'})
#			{
#				$sql_where.=qq{
#					AND product.amount > product.amount_limit AND product.amount > 0};
#			}
			
			my %sth1=TOM::Database::SQL::execute(qq{
				SELECT
					
					product.ID_entity,
					product.ID,
					product.product_number,
					product.datetime_publish_start,
					product.datetime_publish_stop,
					product.amount,
					product.amount_unit,
					product.amount_availability,
					product.amount_limit,
					product.amount_order_min,
					product.amount_order_max,
					product.amount_order_div,
					product.metadata,
					product.supplier_org,
					product.supplier_person,
					product.status_new,
					product.status_recommended,
					product.status_sale,
					product.status_special,
					product.status_main,
					product.status,
					
					product_lng.name,
					product_lng.name_url,
					product_lng.name_long,
					product_lng.name_label,
					product_lng.description_short,
					product_lng.description,
					product_lng.keywords,
					product_lng.lng,
					
					supplier_org.ID AS supplier_org_ID,
					supplier_org.ID_entity AS supplier_org_ID_entity,
					supplier_org.name AS supplier_org_name,
					supplier_org.name_url AS supplier_org_name_url
					
					$sql_columns
					
				FROM $App::910::db_name.a910_product_ent AS product_ent
				LEFT JOIN $App::910::db_name.a910_product AS product ON
				(
					product_ent.ID_entity = product.ID_entity
				)
				LEFT JOIN $App::910::db_name.a910_product_lng AS product_lng ON
				(
					product_lng.ID_entity = product.ID AND
					product_lng.lng = '$env{'lng'}'
				)
				
				LEFT JOIN $App::710::db_name.a710_org AS supplier_org ON
				(
					supplier_org.ID_entity = product.supplier_org
				)
				
				$sql_join
				
				WHERE
					product_ent.status = 'Y'
					AND product.status IN ('$sql_set_product_status_main')
					AND (product.datetime_publish_start IS NULL OR product.datetime_publish_start <= NOW())
					AND (product.datetime_publish_stop IS NULL OR product.datetime_publish_stop >= NOW())
					$sql_where
				ORDER BY
					product.ID DESC
			},'bind'=>[@sql_bind],'log'=>0,'-slave'=>1,
				'-changetime'=>App::020::SQL::functions::_get_changetime(
					{
						'db_h'=>"main",
						'db_name' => $App::910::db_name,
						'tb_name' => "a910_product"
					}),
			);
			
			if (my %product_=$sth1{'sth'}->fetchhash())
			{
				main::_log("product.ID='$product_{'ID'}' product.name='$product_{'name'}'");
				
				$product_{'related_thumbnail'}=(App::160::SQL::get_relations(
					'db_name' => $App::910::db_name,
					'l_prefix' => 'a910',
					'l_table' => 'product',
					'l_ID_entity' => $product_{'ID'},
					'r_prefix' => "a501",
					'r_table' => "image",
					'rel_type' => "thumbnail",
					'status' => "Y"
				))[0];
				
				%{$product_{'metahash'}}=App::020::functions::metadata::parse($product_{'metadata'});
				delete $product_{'metadata'};
				
				if ($env{'prices'})
				{
					# prices
					my %sth2=TOM::Database::SQL::execute(qq{
						SELECT
							a910_product_price.*,
							a910_price_level.name_code
						FROM
							$App::910::db_name.a910_product_price
						INNER JOIN $App::910::db_name.a910_price_level ON
						(
							a910_product_price.ID_price = a910_price_level.ID_entity
						)
						WHERE
									a910_product_price.ID_entity = ?
							AND	a910_product_price.status IN ('Y', 'L')
					},'quiet'=>1,'bind'=>[$product_{'ID'}]);
					while (my %db2_line=$sth2{'sth'}->fetchhash())
					{
						next if $db2_line{'price'} == 0;
						$product_{'prices'}{$db2_line{'name_code'}}={
							'price' => $db2_line{'price'},
							'price_full' => ($db2_line{'price_full'} || $db2_line{'price'})
						}
					}
				}
				
				push @{$product{'set'}},\%product_;
			}
			
		}
		
	}
	
	$TPL->{'variables'}{'product'} = \%product;
	
	return 1,%env_out;
}

1;
