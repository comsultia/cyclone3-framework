#!/usr/bin/env c3-job
package Cyclone3::job;
use parent 'TOM::Engine::job::module';
use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8;
use strict;

use Utils::datetime;
use JSON;
use App::510::_init;


sub execute
{
	my $self=shift;
	my $env=$self->env;
	return if $self->running({'max'=>3600}); # check if not already running
	
	if (!$tom::H)
	{
		main::_log("only running under domain",1);
		return undef;
	}
	
	# clean freezed W statuses (encoding running longer than 7 hours?)
	my %sth0=TOM::Database::SQL::execute(qq{
		SELECT
			*
		FROM
			`$App::510::db_name`.a510_video_part_file_process
		WHERE
			status = 'W'
			AND datetime_start <= DATE_SUB(NOW(), INTERVAL 24 HOUR)
		LIMIT 5
	},'quiet'=>1);
	while (my %db0_line=$sth0{'sth'}->fetchhash())
	{
		TOM::Database::SQL::execute(qq{
			DELETE FROM `$App::510::db_name`.a510_video_part_file_process
			WHERE ID=?
			LIMIT 1
		},'bind'=>[$db0_line{'ID'}],'quiet'=>1);
	}
	
	
	# check files without info (W status)
	my %sth0=TOM::Database::SQL::execute(qq{
		SELECT
			a510_video_part_file.*,
			a510_video_part.ID_brick,
			a510_video_part.ID AS part_ID
		FROM
			`$App::510::db_name`.a510_video_part_file
		INNER JOIN `$App::510::db_name`.a510_video_part ON
		(
			a510_video_part_file.ID_entity = a510_video_part.ID
		)
		WHERE
			a510_video_part_file.status='W' OR
			(
				a510_video_part_file.status='N' AND
				a510_video_part_file.regen='Y' AND
				a510_video_part_file.ID_format=1 AND
				a510_video_part_file.from_parent != 'Y'
			)
		ORDER BY
			a510_video_part_file.ID DESC
		LIMIT 10
	});
	while (my %db0_line=$sth0{'sth'}->fetchhash())
	{
		my $vd = Movie::Info->new || die "Couldn't find an mplayer to use\n";
		
		my %brick;
		%brick=App::020::SQL::functions::get_ID(
			'ID' => $db0_line{'ID_brick'},
			'db_h' => "main",
			'db_name' => $App::510::db_name,
			'tb_name' => "a510_video_brick",
			'columns' => {'*'=>1}
		) if $db0_line{'ID_brick'};
		
		my $brick_class='App::510::brick';
		$brick_class.="::".$brick{'name'}
			if $brick{'name'};
		
		my $video_=$brick_class->video_part_file_path({
			'video_part_file.ID' => $db0_line{'ID'},
			'video_part.ID' => $db0_line{'part_ID'},
			'video_format.ID' => $db0_line{'ID_format'},
			'video_part_file.name' => $db0_line{'name'},
			'video_part_file.file_ext' => $db0_line{'file_ext'}
		});
		
		my $filename=$db0_line{'file_alt_src'} || $video_->{'dir'}.'/'.$video_->{'file_path'};
		main::_log("filename=$filename");
		
		my $tmp_file={};
		if ($brick_class->can('download'))
		{
			$tmp_file=new TOM::Temp::file('dir'=>$main::ENV{'TMP'},'nocreate'=>1);
			$brick_class->download($filename, $tmp_file->{'filename'});
			$filename=$tmp_file->{'filename'};
		}
		
		if ($db0_line{'ID_format'} eq "1")
		{
			if (!-e $filename)
			{
				main::_log("file not found",1);
				next;
			}
		}
		
		my %video = $vd->info($filename);
		
		App::020::SQL::functions::update(
			'ID' => $db0_line{'ID'},
			'db_h' => 'main',
			'db_name' => $App::510::db_name,
			'tb_name' => 'a510_video_part_file',
			'columns' =>
			{
				'video_width' => "'$video{'width'}'",
				'video_height' => "'$video{'height'}'",
				'video_codec' => "'$video{'codec'}'",
				'video_fps' => "'$video{'fps'}'",
				'video_bitrate' => "'$video{'bitrate'}'",
				'audio_codec' => "'$video{'audio_codec'}'",
				'audio_bitrate' => "'$video{'audio_bitrate'}'",
				'length' => "SEC_TO_TIME(".int($video{'length'}).")",
				'status' => "'Y'",
				'regen' => "'N'",
			},
			'-journalize' => 1,
		);
		
	}
	
	use Data::Dumper;
	foreach my $video_part_file (App::510::functions::get_video_part_file_process_front('limit'=>20))
	{
		next unless $video_part_file->{'ID_part'};
#		print Dumper($video_part_file);
#		next;
		App::510::functions::video_part_file_generate(
				'-jobify' => 1,
			'video_part.ID' => $video_part_file->{'ID_part'},
			'video_format.ID' => $video_part_file->{'ID_entity_format'}
		);
	}
	
#	sleep 1;
	
return 1}
1;
