#!/usr/bin/perl
package CRON::module;
use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8;
use strict;

=head1 NAME

510-video_part_file.check.cron

=cut

=head1 DESCRIPTION

Automatically checks all video_part_file items, its directories and files. Removes entries with missing file, moves journalized files, removed old files

=head1 DEPENDS

=over

=item *

L<App::510::_init|app/"510/_init.pm">

=back

=cut

use App::510::_init;
use TOM::Text::format;



sub execute
{
	my %env=@_;
	
	return 1; # bricks are not supported by now
	
	# Check
	if (!$tom::addons{'a510'} || ($TOM::DB{'main'}{'name'} ne $App::510::db_name))
	{main::_log("not enabled, or set for another domain service");return 1;}
	
	
	alarm(0);
	
#			App::501::functions::image_regenerate(
#			'image.ID' => '42058'
#		);
		
#	return 1;
	
	main::_log("remove all old generated video_part_file_j items in video_part_file_j table");
	my $sql=qq{
		SELECT
			*,
			CONCAT(ID_format,'/',SUBSTR(ID,1,4),'/',name,'.',file_ext) AS file_path
		FROM
			`$App::510::db_name`.a510_video_part_file_j
		WHERE
			file_alt_src IS NULL AND
			from_parent = 'Y' AND
			datetime_create <= DATE_SUB(CURDATE(),INTERVAL 7 DAY)
		ORDER BY
			ID
	};
	my %sth0=TOM::Database::SQL::execute($sql,'quiet'=>1);
	while (my %db0_line=$sth0{'sth'}->fetchhash())
	{
		my $file=$tom::P_media.'/a510/video/part/file_j/'.$db0_line{'file_path'};
		if (-e $file)
		{
			main::_log("remove file video_part_file_j.ID=$db0_line{'ID'} $file");
			# very blind function!!! not controls if file is used by another entry in video_part_file_j table
			# but not critical, because is not deleting files in production use
			my $out=unlink $file;
			if (!$out){main::_log("can't remove: $!",1);}
		}
	}
	
=head1
	# find video_part with missing 'original' format
	# and delete it
	main::_log("checking for empty video_part items");
	my $sql=qq{
		SELECT
			video_part.ID
		FROM
			`$App::510::db_name`.a510_video_part AS video_part
		LEFT JOIN `$App::510::db_name`.a510_video_part_file AS video_part_file ON
		(
			video_part_file.ID_entity = video_part.ID AND
			video_part_file.status IN ('Y','N') AND
			video_part_file.ID_format=$App::510::video_format_original_ID
		)
		WHERE
			video_part.status IN ('Y','N') AND
			video_part_file.ID IS NULL
		ORDER BY
			video_part.ID
	};
	my %sth0=TOM::Database::SQL::execute($sql,'quiet'=>1);
	while (my %db0_line=$sth0{'sth'}->fetchhash())
	{
		main::_log("delete empty video_part.ID='$db0_line{'ID'}'");
		
		# find all video_part_attrs
		foreach my $ID (App::020::SQL::functions::get_ID_entity(
				'ID_entity' => $db0_line{'ID'},
				'db_h' => "main",
				'db_name' => $App::510::db_name,
				'tb_name' => "a510_video_part_attrs",
		))
		{
			main::_log("part_attrs.ID='$ID->{'ID'}'");
			App::020::SQL::functions::delete(
				'ID' => $ID->{'ID'},
				'db_h' => "main",
				'db_name' => $App::510::db_name,
				'tb_name' => "a510_video_part_attrs",
				'-journalize' => 1
			);
		}
		App::020::SQL::functions::delete(
			'ID' => $db0_line{'ID'},
			'db_h' => "main",
			'db_name' => $App::510::db_name,
			'tb_name' => "a510_video_part",
			'-journalize' => 1
		);
		
	}
=cut
	
	# find all video_part's with missing thumbnail
	main::_log("check video_part items for missing a501_image");
	my $sql=qq{
		SELECT
			*
		FROM
			`$App::510::db_name`.a510_video_part
		WHERE
			thumbnail_lock='Y'
		ORDER BY
			ID
	};
	my %sth0=TOM::Database::SQL::execute($sql,'quiet'=>1);
	while (my %db0_line=$sth0{'sth'}->fetchhash())
	{
		# find related image
		my $relation=(App::160::SQL::get_relations(
			'l_prefix' => 'a510',
			'l_table' => 'video_part',
			'l_ID_entity' => $db0_line{'ID'},
			'rel_type' => 'thumbnail',
			'r_db_name' => $App::501::db_name,
			'r_prefix' => 'a501',
			'r_table' => 'image',
		#	'r_ID_entity' => '2'
			'limit' => 1
		))[0];
		if (!$relation->{'ID'})
		{
			main::_log("missing thumbnail image for video_part.ID='$db0_line{'ID'}'",1);
			
			# unlock thumbnail regeneration
			App::020::SQL::functions::update(
				'ID' => $db0_line{'ID'},
				'db_h' => "main",
				'db_name' => $App::510::db_name,
				'tb_name' => "a510_video_part",
				'columns' =>
				{
					'thumbnail_lock' => "'N'"
				},
				'-journalize' => 1
			);
		}
		else
		{
			use App::501::_init;
			# check if that image really exists
			my $sql=qq{
				SELECT
					*
				FROM
					`$App::501::db_name`.a501_image_view
				WHERE
					ID_entity_image=$relation->{'r_ID_entity'} AND
					ID_format=$App::501::image_format_original_ID AND
					status IN ('Y','N')
				LIMIT 1
			};
			my %sth1=TOM::Database::SQL::execute($sql,'quiet'=>1,'slave'=>1);
			if (!$sth1{'rows'})
			{
				main::_log("missing thumbnail image for video_part.ID='$db0_line{'ID'}'",1);
				
				App::020::SQL::functions::update(
					'ID' => $db0_line{'ID'},
					'db_h' => "main",
					'db_name' => $App::510::db_name,
					'tb_name' => "a510_video_part",
					'columns' =>
					{
						'thumbnail_lock' => "'N'"
					},
					'-journalize' => 1
				);
				
				my $out=App::160::SQL::remove_relation(
					'ID' => $relation->{'ID'}
				);
				
			}
		}
	}
	
	
	# find missing files
	main::_log("checking video_part_file items in video_part_file table");
	my $sql=qq{
		SELECT
			*,
			CONCAT(ID_format,'/',SUBSTR(ID,1,4),'/',name,'.',file_ext) AS file_path
		FROM
			`$App::510::db_name`.a510_video_part_file
		WHERE
			file_alt_src IS NULL
		ORDER BY
			ID
	};
	my %sth0=TOM::Database::SQL::execute($sql,'quiet'=>1);
	while (my %db0_line=$sth0{'sth'}->fetchhash())
	{
		#main::_log("check image_file $db0_line{'ID'} in $db0_line{'file_path'}");
		
		if (!-e $tom::P_media.'/a510/video/part/file/'.$db0_line{'file_path'})
		{
			main::_log("file of video_part_file $db0_line{'file_path'} not exists",1);
			TOM::Database::SQL::execute(qq{
				DELETE FROM `$App::510::db_name`.`a510_video_part_file`
				WHERE ID=$db0_line{'ID'} LIMIT 1
			},'quiet'=>1) if $env{'delete'};
			next;
		}
		
		if ($db0_line{'ID_format'} == $App::510::video_format_full_ID)
		{
			# find related image
			my $relation=(App::160::SQL::get_relations(
				'l_prefix' => 'a510',
				'l_table' => 'video_part',
				'l_ID_entity' => $db0_line{'ID_entity'},
				'rel_type' => 'thumbnail',
				'r_db_name' => $App::501::db_name,
				'r_prefix' => 'a501',
				'r_table' => 'image',
		#		'r_ID_entity' => '2'
				'limit' => 1
			))[0];
			if (!$relation->{'ID'})
			{
				main::_log("missing thumbnail image for video_part.ID='$db0_line{'ID'}'");
				
				# remove full format file
				App::020::SQL::functions::delete(
					'ID' => $db0_line{'ID'},
					'db_h' => "main",
					'db_name' => $App::510::db_name,
					'tb_name' => "a510_video_part_file",
					'-journalize' => 1
				);
				
				# unlock thumbnail regeneration
				App::020::SQL::functions::update(
					'ID' => $db0_line{'ID_entity'},
					'db_h' => "main",
					'db_name' => $App::510::db_name,
					'tb_name' => "a510_video_part",
					'columns' =>
					{
						'thumbnail_lock' => "'N'"
					},
					'-journalize' => 1
				);
				
			}
		}
		
	}
	
#	return 1;
	
	# find missing files in file_j
	main::_log("checking video_part_file items in video_part_file_j table");
	my $sql=qq{
		SELECT
			*,
			CONCAT(ID_format,'/',SUBSTR(ID,1,4),'/',name,'.',file_ext) AS file_path
		FROM
			`$App::510::db_name`.a510_video_part_file_j
		WHERE
			file_alt_src IS NULL
		ORDER BY
			ID
	};
	my %sth0=TOM::Database::SQL::execute($sql,'quiet'=>1);
	while (my %db0_line=$sth0{'sth'}->fetchhash())
	{
		#main::_log("check image_file $db0_line{'ID'} in $db0_line{'file_path'}");
		
		my $pth=$tom::P_media.'/a510/video/part/file_j/'.$db0_line{'file_path'};
		$pth=~s|/$db0_line{'name'}\.$db0_line{'file_ext'}$||;
		
		if (!-d $pth)
		{
			main::_log("creating directory '$pth'");
			File::Path::mkpath($pth);
		}
		
		if (!-e $tom::P_media.'/a510/video/part/file_j/'.$db0_line{'file_path'})
		{
			if (-e $tom::P_media.'/a510/video/part/file/'.$db0_line{'file_path'})
			{
				
				# check if this file is not required in main table
				my $sql=qq{
					SELECT
						ID
					FROM
						`$App::510::db_name`.a510_video_part_file
					WHERE
						name='$db0_line{'name'}'
					LIMIT 1;
				};
				my %sth1=TOM::Database::SQL::execute($sql,'quiet'=>1);
				my %db1_line=$sth1{'sth'}->fetchhash();
				if ($db1_line{'ID'})
				{
					#main::_log("don't copy file '$db0_line{'file_path'}'");
					next;
					# so, copy to journal archive
					File::Copy::copy($tom::P_media.'/a510/video/part/file/'.$db0_line{'file_path'},
						$tom::P_media.'/a510/video/part/file_j/'.$db0_line{'file_path'});
				}
				else
				{
					# so, move to journal archive
					main::_log("move file '$db0_line{'file_path'}'");
					File::Copy::move($tom::P_media.'/a510/video/part/file/'.$db0_line{'file_path'},
						$tom::P_media.'/a510/video/part/file_j/'.$db0_line{'file_path'}) || main::_log("file can't be moved $!",1);
				}
				
			}
			else
			{
				main::_log("file of video_part_file_j $db0_line{'file_path'} not exists",1);
				if ($env{'delete'})
				{
					TOM::Database::SQL::execute(qq{
						DELETE FROM `$App::510::db_name`.`a510_video_part_file_j`
						WHERE
							ID=$db0_line{'ID'} AND
							name='$db0_line{'name'}' AND
							datetime_create='$db0_line{'datetime_create'}'
						LIMIT 1
					},'quiet'=>1);
				}
			}
			
		}
		
		
	}
	
	
	
	my $sql=qq{SELECT SUM(file_size) AS size FROM `$App::510::db_name`.`a510_video_part_file`};
	my %sth0=TOM::Database::SQL::execute($sql,'quiet'=>1);
	my %db0_line=$sth0{'sth'}->fetchhash();
	
	
	my $sql=qq{SELECT SUM(file_size) AS size FROM `$App::510::db_name`.`a510_video_part_file_j`};
	my %sth1=TOM::Database::SQL::execute($sql,'quiet'=>1);
	my %db1_line=$sth1{'sth'}->fetchhash();
	
	main::_log("all file_size active='".TOM::Text::format::bytes($db0_line{'size'})."' journalized='".TOM::Text::format::bytes($db1_line{'size'})."'");
	
	
	
	my $sql=qq{SELECT SUM(file_size) AS size FROM `$App::510::db_name`.`a510_video_part_file` WHERE file_alt_src IS NULL};
	my %sth0=TOM::Database::SQL::execute($sql,'quiet'=>1);
	my %db0_line=$sth0{'sth'}->fetchhash();
	
	my $sql=qq{SELECT SUM(file_size) AS size FROM `$App::510::db_name`.`a510_video_part_file_j` WHERE file_alt_src IS NULL};
	my %sth1=TOM::Database::SQL::execute($sql,'quiet'=>1);
	my %db1_line=$sth1{'sth'}->fetchhash();
	
	main::_log("internal file_size active='".TOM::Text::format::bytes($db0_line{'size'})."' journalized='".TOM::Text::format::bytes($db1_line{'size'})."'");
	
	
	return 1
}



=head1 AUTHORS

Comsultia, Ltd. (open@comsultia.com)

=cut

1;
