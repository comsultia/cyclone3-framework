#!/usr/bin/perl
package CRON::module;
use open ':utf8', ':std';
use encoding 'utf8';
use utf8;
use strict;

=head1 NAME

510-video_format.check.cron

=cut

=head1 DESCRIPTION

Automatically checks video_format items, its directories and depend video_part_file items. Converts and generates video_part_file items how in video_format items are defined

Checks related thumbnail images in a501

Checks all missing video_part_files (only check database entries)

Checks all video_formats which are updated or created as new

Checks all video_part_files which parents are changed

=head1 DEPENDS

=over

=item *

L<App::510::_init|app/"510/_init.pm">

=item *

L<App::501::_init|app/"501/_init.pm">

=item *

Proc::ProcessTable

=back

=cut

#use App::510::_init;
#use App::501::_init;
use Proc::ProcessTable;


=head1 INPUTS

=over

=item *

B<time_max> - max seconds to process (default 60*5 seconds)

=back

=cut



sub execute
{
	my %env=@_;
	
	# Check
	require App::510::_init if $tom::addons{'a510'};
	if (!$tom::addons{'a510'} || ($TOM::DB{'main'}{'name'} ne $App::510::db_name))
	{main::_log("not enabled, or set for another domain service");return 1;}
	
	require App::510::_init;
	require App::501::_init;
	
	alarm(0);
	$env{'time_max'}=60*10 unless $env{'time_max'};
	my $encode_max=$env{'parallel'}; # max parallel processes
		$encode_max=2 unless $encode_max;
	$env{'limit'}=$encode_max+1; # find max files to encode
	
	
	# check files without info (W status)
	my %sth0=TOM::Database::SQL::execute(qq{
		SELECT
			*
		FROM
			`$App::510::db_name`.a510_video_part_file
		WHERE
			status='W'
	});
	while (my %db0_line=$sth0{'sth'}->fetchhash())
	{
		my $vd = Movie::Info->new || die "Couldn't find an mplayer to use\n";
		my $filename=$tom::P.'/!media/a510/video/part/file/'.$db0_line{'ID_format'}.'/'.substr($db0_line{'ID'},0,4).'/'.$db0_line{'name'}.'.'.$db0_line{'file_ext'};
		main::_log("filename=$filename");
		my %video = $vd->info($filename);
		App::020::SQL::functions::update(
			'ID' => $db0_line{'ID'},
			'db_h' => 'main',
			'db_name' => $App::510::db_name,
			'tb_name' => 'a510_video_part_file',
			'columns' =>
			{
				'video_width' => "'$video{'width'}'",
				'video_height' => "'$video{'height'}'",
				'video_codec' => "'$video{'codec'}'",
				'video_fps' => "'$video{'fps'}'",
				'video_bitrate' => "'$video{'bitrate'}'",
				'audio_codec' => "'$video{'audio_codec'}'",
				'audio_bitrate' => "'$video{'audio_bitrate'}'",
				'length' => "SEC_TO_TIME(".int($video{'length'}).")",
				'status' => "'Y'",
			},
			'-journalize' => 1,
		);
	}
	
	
	# check directory of formats
	
	
	# check list of formats and its directories
	
	
	# check how many encoders are running parrallel
	my $t = new Proc::ProcessTable;
	my $encode;
	foreach my $p (@{$t->table})
	{
		next unless $p->{'cmndline'}=~/(mencoder|ffmpeg)/;
		next if $p->{'cmndline'}=~/sh -c/;
		$encode++;
	}
	main::_log("encoders running - $encode");
	
	if ($encode >= $encode_max)
	{
		main::_log("sorry, too many encoding processes already running",1);
		return 1;
	}
	
	my $time_start=time();
	
	
	my $video_part_file=(App::510::functions::get_video_part_file_process_front('limit'=>$env{'limit'}))[0];
	return 1 unless $video_part_file->{'ID_part'};
#	{
		my $lock=new TOM::lock($App::510::db_name."::a510:encode video_part.ID=".$video_part_file->{'ID_part'}." video_format.ID_entity=".$video_part_file->{'ID_entity_format'}) 
		|| do {
			$encode++;
			return 1 if $encode_max<=$encode;
			return 1;
		}; # when this video is noew already encoding, skip to next video
		App::510::functions::video_part_file_generate(
			'video_part.ID' => $video_part_file->{'ID_part'},
			'video_format.ID' => $video_part_file->{'ID_entity_format'}
		);
#	}
	
	return 1
}



=head1 AUTHORS

Comsultia, Ltd. (open@comsultia.com)

=cut

1;
