#!/usr/bin/perl
# áéíóú - USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use encoding 'utf8';
use utf8;
use strict;
=head1 NAME
fview

=head1 HEAD_VERSION_BUILD
1.030702

=head1 DESCRIPTION
fview original photo
zobrazenie originalu obrazku so vsetkymi
informaciami

=head1 XMLDESCRIPTION

<DESCRIPTION>

        <value id="preview" value="1" />
        <value id="output" value="xsgn" />

	<input id="ID" value="varchar(7)">cislo obrazku</input>
	<input id="-xsgn" value="varchar(20)">potrebujem design</input>
	<input id="hash" value="boolean">hashovany original obrazku?</input>
        <input id="width_max" value="int(1600)"></input>
	<input id="height_max" value="int(1200)"></input>
	<input id="400_db" value="varchar(50)">databaza kde su obrazky</input>

        <source type="db.table" value="X.photogallery" />

</DESCRIPTION>


=head1 CHANGES
build 030702 - Aben
        *) FIRST MAKE

=head1 WARNINGS & BUGS
        *) nothings
=cut

sub execute
{
 my %env=@_;

	if(exists $env{display_if_IDcategory})
	{
		$env{display_if_IDcategory}.=";" unless $env{display_if_IDcategory}=~/;$/;
		$env{display_if_IDcategory}=";".$env{display_if_IDcategory} unless $env{display_if_IDcategory}=~/^;/;
		return 1 if(not $env{display_if_IDcategory}=~/;$env{from};/);
	}

 Tomahawk::GetXSGN(-convertvars=>1) || return undef; # NATIAHNEM XML DESIGN

 # KDE SU OBRAZKY?
 $env{db_400}=Tomahawk::Getmdlvar("400","db") unless $env{db_400};
 $env{db_400}=$TOM::DB_name unless $env{db_400};

 $env{from}="" unless $env{from};
 $env{from_level}=0 unless $env{from_level};

 my @struct;
 my %struct_base;
 my $db0=$main::DBH->Query("
	SELECT *
	FROM markiza_sk.a400_category
	WHERE ID LIKE '$env{from}%' AND (lng='$env{lng}' OR lng='') AND active='Y'
	ORDER BY ID");
 while (my %env0=$db0->fetchhash)
 {
  my $var=$env0{ID};
  $var=~s|^$env{from}||;
  push @struct,$var;
  push @struct,length($var)/2;
  $struct_base{$var}{ID}=$env0{ID};
  $struct_base{$var}{name}=$env0{name};
 }

# for (my $i;$i<@struct;$i=$i+2)
# {
#  $XSGN{TMP}.="$struct[$i] $struct[$i+1] $struct_base{$struct[$i]}{name}<BR>";
# }


 for (my $i=0;$i<@struct;$i=$i+2)
 {
  my $tr_uroven=$struct[$i+1];
  $XSGN{TMP}=~s|<#LINE#>|$XSGN{LINE}<#LINE#>|;
  my $width=$tr_uroven*16+5;
  $XSGN{TMP} =~s|<%NAME%>|<a href=\"?\|?TID=$main::FORM{TID}&IDcat=<%ID%>"\><strong>$struct_base{$struct[$i]}{name}</strong></a>|g;
  $XSGN{TMP} =~s|<%ID%>|$struct_base{$struct[$i]}{ID}|g;


  my $i0=$env{from_level};
  $XSGN{NULL}="";
  while ($i0<($tr_uroven))
  {
   $i0++;
   $XSGN{NULL} .= $XSGN{OD};
   $XSGN{NULL} =~s|<%TBG%>|<%TBG-$i0%>|g;

   if (($i0+1) == $tr_uroven)
   {
    $XSGN{NULL}=~s|<%IMG%>|$XSGN{img_cross}|g;
    $XSGN{TMP} =~s|<%TBG-$i0%>|$XSGN{bg_line}|g;
   }

   if ($i0 == $tr_uroven)
   {
    $XSGN{NULL}=~s|<%VALIGN%>|valign=top|g;
    $XSGN{NULL}=~s|<%IMG%>|$XSGN{icon}|g;

    if ($struct[$i+3]>$struct[$i+1])
    {
     $XSGN{NULL} =~s|<%TBG-$i0%>|$XSGN{bg_cross}|g;
    }
    else {$XSGN{NULL} =~s|<%TBG-$i0%>||g;}
    $XSGN{TMP} =~s|<%TBG-$i0%>||g;
   }
   else
   {
    $XSGN{NULL}=~s|<%IMG%>||g;
   }

   $XSGN{NULL}=~s|<%VALIGN%>|valign=top|g;
  }
  $XSGN{TMP} =~s|<#OD#>|$XSGN{NULL}|g;
  $XSGN{TMP} =~s|<%BG%>|#96B2C8|g;
 }






 return 1
 }

1;










