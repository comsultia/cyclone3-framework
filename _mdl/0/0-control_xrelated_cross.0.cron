#!/usr/bin/perl
# USE UTF-8 !!!
package CRON::module;
use strict;

sub execute
{
 my %env=@_;
 #return 1;

 my $normal;
 $env{normal}=100 unless $env{normal};
 my $repair=0;

 #if ($cron::P eq $CRON::P){$cron::ERR="WARN: this cron is only for local use!!!";return undef}
 #if (!$env{db_820}){$cron::ERR="not defined database db_820";return undef;}

 if (!$env{db_130}){$cron::ERR="WARN: db_130 not defined!!!";return undef}
 if ($env{db_130} eq $TOM::DB_name_TOM){$env{table}="a130_send";}else{$env{table}="a130_send";}

 if ($env{app} eq "400"){}
 elsif ($env{app} eq "500"){}
 elsif ($env{app} eq "820"){}
 else
 {
  $cron::ERR="WARN: unknown application!!!";return undef;
 }

 $env{'db_'.$env{app}}=CRON::Getmdlvar($env{app},"db") unless $env{'db_'.$env{app}};
 $env{'db_'.$env{app}}=$TOM::DB_name unless $env{'db_'.$env{app}};


 if ($env{app} eq "400")
 {
  if (!$env{app_type})
  {
   my $var;
   if ($env{'db_'.$env{app}} eq "TOM"){$var="C"}
   $env{select}="
   (SELECT ID,xrelated,arch
    FROM $env{'db_'.$env{app}}.".$var."a400
    WHERE xrelated!='')
   UNION ALL
   (SELECT ID,xrelated,arch
    FROM $env{'db_'.$env{app}}.".$var."a400_arch
    WHERE xrelated!=''
   ) ORDER BY ID DESC";
   $env{update}="$env{'db_'.$env{app}}.".$var."a400";
  }
  elsif ($env{app_type} eq "category")
  {
   my $var;
   if ($env{'db_'.$env{app}} eq "TOM"){$var="C"}
   $env{select}="
    SELECT ID,xrelated
    FROM $env{'db_'.$env{app}}.".$var."a400_category
    WHERE xrelated!='' ORDER BY ID DESC";
   $env{update}="$env{'db_'.$env{app}}.".$var."a400_category";
  }
  else
  {
   $cron::ERR="WARN: not supported extension to application!!!";return undef;
  }
 }
 elsif ($env{app} eq "500")
 {
  my $var;
  if ($env{'db_'.$env{app}} eq "TOM"){$var="C"}
  if ($env{app_type} eq "category")
  {
   $env{select}="
    SELECT ID,xrelated
    FROM $env{'db_'.$env{app}}.".$var."a500_category
    WHERE xrelated!=''";
   $env{update}="$env{'db_'.$env{app}}.".$var."a500_category";
  }
  else
  {
   $cron::ERR="WARN: not supported extension to application!!!";return undef;
  }
 }
 elsif ($env{app} eq "820")
 {
  if ($env{app_type} eq "category")
  {
   $env{select}="
    SELECT ID,xrelated
    FROM $env{'db_'.$env{app}}.a820
    WHERE xrelated!='' AND type='C'";
  }
  else
  {
   $env{select}="
    SELECT ID,xrelated
    FROM $env{'db_'.$env{app}}.a820
    WHERE xrelated!='' AND type='F'";
  }
  $env{update}="$env{'db_'.$env{app}}.a820";
 }

 $env{app_f}=$env{app};
 $env{app_f}.="_".$env{app_type} if $env{app_type};

 print $env{select};



#return 1;


 my $email=<<"HEADER";
From: <%FROM%>
To: <%TO%>
Subject: [ERR][CONTROL][a$env{app_f}] control xrelated cross
Date: <%DATE%>
List-Id: TOM3
MIME-Version: 1.0
Content-Type: text/plain;charset="utf-8"
Content-Transfer-Encoding: 7bit

<%BODY%>
HEADER


 my $doc;
 my $bugs;



 #######################################################################################################
 #######################################################################################################
 #######################################################################################################
 #######################################################################################################
 CRON::debug::log(5,"controll $env{app_f} xrelated to aX");
 $doc.="controll $env{app_f} xrelated to aX\n";
 #######################################################################################################
 my $count;
 my $count0;
 my $db0=$main::DBH->Query($env{select});
 while (my @db0_line=$db0->fetchrow)
 {
  $count0++;
  if ($count0/100 == int($count0/100)){CRON::debug::log(6,"[$count0] checked");CRON::waitload($CRON::LOADAVG);}

  my $debug;
  my $xrelated_old=$db0_line[1];
  my $xrelated=$db0_line[1];
  my $data=$db0_line[1];
  while ($data=~s|<VAR id="(.*?)" value="(.*?)" />||)
  {
   my $app=$1;
   my $val=$2;
   if ($app=~s|^a||) # ide o aplikaciu
   {
    my $found;
    my $app_type;
    my $app_db=$app;$app_type=$1 if $app_db=~s|_(.*?)$||;
    my $app_domain;

    #CRON::debug::log(6,"app $1 $2");
    $env{'db_'.$app_db}=CRON::Getmdlvar($app_db,"db") unless $env{'db_'.$app_db};
    $env{'db_'.$app_db}=$TOM::DB_name unless $env{'db_'.$app_db};
    next if $app=~/^0/;

    $app_domain=$env{'db_'.$app_db};
    $app_domain=~s|__|/|g;
    $app_domain=~s|_|.|g;

=head1
    my $db1=$main::DBH->Query("
	SELECT *
	FROM a160_relations
	WHERE	master_app='$env{app}' AND
			master_type='$env{app_type}' AND
			master_ID='$db0_line[0]' AND
			slave_app='$app' AND
			slave_type='$app_type' AND
			slave_ID='$val'
	LIMIT 1");
    if (my %db1_line=$db1->fetchhash)
    {
    }
    else
    {
     $main::DBH->Query("
     INSERT INTO a160_relations
     		(master_app,master_type,master_ID,slave_app,slave_type,slave_ID)
		VALUES('$env{app}','$env{app_type}','$db0_line[0]','$app','$app_type','$val')
     	");
    }    
=cut

    #next;
    
=head1
    my $db1=$main::DBH->Query("
	SELECT ID
	FROM $env{'db_'.$env{app}}.a$env{app}_apprelation
	WHERE	ID='$db0_line[0]'
		AND app='$app_db'
		AND app_type='$app_type'
		AND app_ID='$val'
		AND domain='$app_domain'
	LIMIT 1");
    if (my @db1_line=$db1->fetchrow)
    {
    }
    else
    {
     $main::DBH->Query("
     INSERT INTO $env{'db_'.$env{app}}.a$env{app}_apprelation
     		(ID,app,app_type,app_ID,domain)
		VALUES('$db0_line[0]','$app_db','$app_type','$val','$app_domain')
     	");
    }
=cut


    $app=~/^400$/ && do
    {$found++;
     my $found0;
     my $db1=$main::DBH->Query("
	(SELECT ID,xrelated,arch FROM $env{db_400}.a400 WHERE ID='$val')UNION ALL
	(SELECT ID,xrelated,arch FROM $env{db_400}.a400_arch WHERE ID='$val')");
     while (my @db1_line=$db1->fetchrow())
     {
      $found0++;
      if (not $db1_line[1]=~/<VAR id="a$env{app_f}" value="$db0_line[0]" \/>/s)
      {
       my $var=$db1_line[1];
       CRON::debug::log(7,"$db0_line[0]: a$app with $val without crossing",1);
	  
	  if ($repair)
	  {
	  	CRON::debug::log(8,"repairing...",1);
       	$doc.="$db0_line[0]: a$app with $val without crossing, repairing...\n";$bugs++;
       	$var.="<VAR id=\"a$env{app_f}\" value=\"$db0_line[0]\" />";
       	if ($db1_line[2] eq "Y")
       	{$main::DBH->Query("UPDATE $env{db_400}.a400_arch SET xrelated='$var' WHERE ID='$db1_line[0]' AND xrelated='$db1_line[1]'");}
       	else {$main::DBH->Query("UPDATE $env{db_400}.a400 SET xrelated='$var' WHERE ID='$db1_line[0]' AND xrelated='$db1_line[1]'");}
	  }
	  
	  
      }
     }
     if (!$found0)
     {
      CRON::debug::log(6,"a$env{app_f}:$db0_line[0]: cannot find application $app with value $val",1);
      $doc.="$db0_line[0]: cannot find aplication $app with value $val\n";
      $xrelated=~s|<VAR id="a$app" value="$val" />||g;
     }
    };


    $app=~/^500$/ && do
    {$found++;
     my $found0;
     my $db1=$main::DBH->Query("SELECT ID FROM $env{db_500}.a500_attrs WHERE ID='$val' LIMIT 1");
     if (my @db1_line=$db1->fetchrow())
     {
      $found0++;
     }
     if (!$found0)
     {
      CRON::debug::log(6,"a$env{app_f}:$db0_line[0]: cannot find application $app with value $val",1);
      $doc.="$db0_line[0]: cannot find aplication $app with value $val\n";
      $xrelated=~s|<VAR id="a$app" value="$val" />||g;#$debug=1;
     }
    };


    $app=~/^500_category$/ && do
    {$found++;
     my $found0;
     my $db1=$main::DBH->Query("SELECT ID,xrelated FROM $env{db_500}.a500_category WHERE ID='$val'");
     while (my @db1_line=$db1->fetchrow())
     {
      $found0++;
      if (not $db1_line[1]=~/<VAR id="a$env{app_f}" value="$db0_line[0]" \/>/s)
      {
       my $var=$db1_line[1];
	  
       CRON::debug::log(7,"$db0_line[0]: a$app with $val without crossing",1);
	  if ($repair)
	  {
	  	CRON::debug::log(8,"repairing...",1);
       	$doc.="$db0_line[0]: a$app with $val without crossing, repairing...\n";$bugs++;
       	$var.="<VAR id=\"a$env{app_f}\" value=\"$db0_line[0]\" />";
       	$main::DBH->Query("UPDATE $env{db_500}.a500_category SET xrelated='$var'
			WHERE ID='$db1_line[0]' AND xrelated='$db1_line[1]'");
	   }
      }
     }


     if (!$found0)
     {
      CRON::debug::log(6,"a$env{app_f}:$db0_line[0]: cannot find application $app with value $val",1);
      $doc.="$db0_line[0]: cannot find aplication $app with value $val\n";
      $xrelated=~s|<VAR id="a$app" value="$val" />||g;#$debug=1;
     }
    };


    $app=~/^820$/ && do
    {$found++;
     my $found0;
     my $db1=$main::DBH->Query("
	SELECT ID,xrelated FROM $env{db_820}.a820 WHERE ID='$val'");
     while (my @db1_line=$db1->fetchrow())
     {
      $found0++;
      if (not $db1_line[1]=~/<VAR id="a$env{app_f}" value="$db0_line[0]" \/>/s)
      {
       my $var=$db1_line[1];
       CRON::debug::log(7,"$db0_line[0]: a$app with $val without crossing",1);
	  if ($repair)
	  {
	  	CRON::debug::log(8,"repairing...",1);
       	$doc.="$db0_line[0]: a$app with $val without crossing, repairing...\n";$bugs++;
       	$var.="<VAR id=\"a$env{app_f}\" value=\"$db0_line[0]\" />";
       	$main::DBH->Query("UPDATE $env{db_820}.a820 SET xrelated='$var'
       		WHERE ID='$db1_line[0]' AND xrelated='$db1_line[1]'");
	  }
      }
     }
     if (!$found0)
     {
      CRON::debug::log(6,"a$env{app_f}:$db0_line[0]: cannot find application $app with value $val",1);
      $doc.="$db0_line[0]: cannot find aplication $app with value $val\n";
      $xrelated=~s|<VAR id="a$app" value="$val" />||g;
     }
    };


#    $app=~/^500_category$/ && do
#    {$found++;
#     $xrelated=~s|<VAR id="a$app" value="$val" />||g;
#    };

    $app=~/^400_category$/ && do
    {$found++;
     $xrelated=~s|<VAR id="a$app" value="$val" />||g;
    };


    if (!$found)
    {
     CRON::debug::log(6,"$db0_line[0]: unknown aplication $app ($app_db) $env{'db_'.$app_db} with value $val",1);$bugs++;
     $doc.="$db0_line[0]: unknown aplication $app with value $val\n";
    }

   }
  }


  # CONVERT TO NORMAL FORM :)
  if ($normal<$env{normal})
  {
   my $format=$xrelated;$xrelated="";
   while ($format=~s|<VAR id="(.*?)" value="(.*?)" />||){$xrelated.="<VAR id=\"$1\" value=\"$2\" />";}
   if ($xrelated_old ne $xrelated)
   {
    $normal++;
    CRON::debug::log(5,"$db0_line[0]: normalized ($normal) xrelated",1);
    $doc.="$db0_line[0]: normalized ($normal) xrelated\n";#$bugs++;
    #print "$xrelated_old\n\n";
    #print "$xrelated\n";
   }
  }

  if ($xrelated_old ne $xrelated)
  {
    next unless $repair;
   CRON::debug::log(5,"$db0_line[0]: bad xrelated, repairing",1);
   $doc.="$db0_line[0]: bad xrelated, repairing\n";$bugs++;

   if ($debug)
   {
    print "$xrelated_old\n\n";
    print "$xrelated\n";
   }

   if ($db0_line[2] eq "Y")
   {
    print "UPDATE $env{update}_arch SET xrelated='$xrelated' WHERE xrelated='$xrelated_old'" if $debug;
    if ($main::DBH->Query("UPDATE $env{update}_arch SET xrelated='$xrelated' WHERE xrelated='$xrelated_old'"))
    {
    }
    else
    {
     CRON::debug::log(5,"$db0_line[0]: cannot repair :(",1);
     $doc.="$db0_line[0]: cannot repair :(\n";$bugs++;
    }
   }
   else
   {
    print "UPDATE $env{update} SET xrelated='$xrelated' WHERE xrelated='$xrelated_old'" if $debug;
    if ($main::DBH->Query("UPDATE $env{update} SET xrelated='$xrelated' WHERE xrelated='$xrelated_old'"))
    {
    }
    else
    {
     CRON::debug::log(5,"$db0_line[0]: cannot repair :(",1);
     $doc.="$db0_line[0]: cannot repair :(\n";$bugs++;
    }
   }
   #$main::DBH->Query("UPDATE $env{db_820}.a820 SET xrelated='$xrelated' WHERE xrelated='$xrelated_old'");
   #else
   #{$main::DBH->Query("UPDATE $env{db_400}.a400 SET xrelated='$xrelated' WHERE xrelated='$xrelated_old'");}
  }
 }


#=head1
 if ($bugs)
 {
  $email=~s|<%BODY%>|$doc|;
  $email=~s|<%FROM%>|"$CRON::core_uname_n($tom::H)" <CRON\@$tom::H>|;
  use Utils::datetime;
  $email=~s|<%DATE%>|$Utils::datetime::DAYS{en}[$cron::Twday], $cron::Tmday $Utils::datetime::MONTHS{en}[$cron::Tmom-1] $cron::Fyear $cron::Fhour:$cron::Fmin:$cron::Fsec +-200|g;

  $env{to_email}=$TOM::contact_admin;
  my %env0;
  foreach (split(';',$env{to_email})){$env0{$_}++;}
  $env{to_email}="";foreach (sort keys %env0){$env{to_email}.=$_.";";}$env{to_email}=~s|;$||;
  $env{to_email_parse}=$env{to_email};$env{to_email_parse}=~s|;|>,<|g;$env{to_email_parse}="<".$env{to_email_parse}.">";
  $email=~s|<%TO%>|"contact_admin" $env{to_email_parse}|g;
  #print $email;
  #return 1;
  if ($main::DBH->Query("
	 INSERT INTO $env{db_130}.$env{table}
	 (
	  sendtime,
	  priority,
	  from_name,
	  from_email,
	  from_host,
	  from_service,
	  to_name,
	  to_email,
	  body)
	 VALUES	(
	  '$cron::time_current',
	  '99',
	  'CRON',
	  'CRON\@$tom::H',
	  '$tom::H',
	  'a130',
	  'director',
	  '$env{to_email}',
	  '$email'
	 )"))
  {
   print "ok\n";
  }
  else
  {
   print "err\n";
  }
 }

#=cut










 return 1}



1;























