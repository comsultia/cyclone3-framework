#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use encoding 'utf8';
use utf8;
$authors="ondrovic\@comsultia.com";
use strict;

=head1 NAME
mlist_m1

=head1 HEAD_VERSION_BUILD
1.050222

=head1 DESCRIPTION
listing obrazkov
=cut

sub execute
{
	my %env=@_;

	$env{db_410}=Tomahawk::Getmdlvar("410","db") unless $env{db_410};
	$env{db_410}="TOM" unless $env{db_410};

	$env{db_limit}=10 unless $env{db_limit};

	if($env{db_limit}=~/^(.*?),(.*)$/)
	{
		$env{db_offset}=$1;
		$env{db_count}=$2;
	}
	else
	{
		$env{db_offset}=0;
		$env{db_count}=$env{db_limit};
	}
	
	$env{db_domain}=$tom::Hm unless $env{db_domain};

	if($env{db_paging})
	{
		if(!exists $env{db_page})
		{
			if(exists $main::FORM{a410mlistpage})
			{
				main::_log("you are using a deprecated way of paging! please use the 'db_page' parameter for sending page number, instead of automatic use of main::FORM{a410mlistpage}!");
				$env{db_page}=$main::FORM{a410mlistpage};
			}
			else
			{
				main::_log("missing 'db_page'! probably you are expecting automatic use of main::FORM{a410mlistpage}, which is deprecated. please use 'db_page' parameter, i.e. &lt;VAR id=\"db_page\" value=\"&lt;\$main::FORM{page}&gt;\" />");
			}
		}
		$env{db_page}=0 unless $env{db_page};
		$env{db_offset}=($env{db_page}*$env{db_count})+$env{db_offset};
		$env{db_limit}=$env{db_offset}.",".($env{db_count}+1);
		main::_log("listing with offset $env{db_offset} $env{db_from} requesting $env{db_count} articles plus 1 more for paging");
	}

	#loading only active images by default
	$env{db_active}=1 if (not exists  $env{db_active});

	# setting default db_order_by
	$env{db_order_by}="a410.ID DESC" unless $env{db_order_by};

	#parsing IDcategory
	if($env{db_where})
	{ $env{db_where}.=" AND " unless ($env{db_where}=~/ AND$/i); }

	if($env{db_ID})
	{
		$env{db_where}.="(";
		foreach my $tmp (split(";",$env{db_ID}))
		{
			$env{db_where}.="(a410.ID='$tmp') OR ";
		}
		$env{db_where}=~s|\) OR $|\)\) AND |;
	}

	if($env{db_ID_exclude})
	{
		$env{db_where}.="(";
		foreach my $tmp (split(";",$env{db_ID_exclude}))
		{
			$env{db_where}.="(a410.ID NOT LIKE '$tmp') OR ";
		}
		$env{db_where}=~s|\) OR $|\)\) AND |;
	}

	if($env{db_IDcategory})
	{
		$env{db_where}.="(";
		foreach my $tmp (split(";",$env{db_IDcategory}))
		{
			$env{db_where}.="(a410.IDcategory LIKE '$tmp') OR ";
		}
		$env{db_where}=~s|\) OR $|\)\) AND |;
	}

	if($env{db_IDcategory_exclude})
	{
		foreach my $tmp (split(";",$env{db_IDcategory_exclude}))
		{
			$env{db_where}.="(a410.IDcategory NOT LIKE '$tmp') AND ";
		}
	}
	
	$env{db_where}.="(a410.lng='$env{lng}' OR a410.lng='') AND ";
	$env{db_where}.="(a410.domain IS NULL OR a410.domain='$env{db_domain}') AND ";

	if($env{db_search})
	{
		main::_log("'$env{db_search}'");
		my $tmpWhere="";
		$env{db_search}=~s|\s+|;|g;
		foreach my $tmp (split(";",$env{db_search}))
		{
			$tmp=~s|^\s*?(\S*)\s*?$|\1|;
			main::_log("((a410.title LIKE '%".$tmp."%') || (a410.tiny LIKE '%".$tmp."%')) AND ");
			$tmpWhere.="((a410.title LIKE '%".$tmp."%') || (a410.tiny LIKE '%".$tmp."%')) AND ";
		}
		$tmpWhere=~s| AND $||;
		$env{db_where}="(".$tmpWhere.") AND ";
	}

	# setting default db_order_by
	$env{db_order_by}="a410.ID DESC" unless $env{db_order_by};

	main::_log("
		SELECT
			a410.*,
			a410_category.name
		FROM $env{db_410}.a410 AS a410
		LEFT JOIN  $env{db_410}.a410_category AS a410_category ON a410.IDcategory=a410_category.ID
		WHERE
			$env{db_where}
			(a410.active='Y' OR a410.active='N')
		GROUP BY a410.ID
		ORDER BY
			$env{db_order_by}
		LIMIT
			$env{db_limit}
	");

	my $list=$main::DBH->Query("
		SELECT
			a410.*,
			a410_category.name
		FROM $env{db_410}.a410 AS a410
		LEFT JOIN  $env{db_410}.a410_category AS a410_category ON a410.IDcategory=a410_category.ID
		WHERE
			$env{db_where}
			(a410.active='Y' OR a410.active='N')
		GROUP BY a410.ID
		ORDER BY
			$env{db_order_by}
		LIMIT
			$env{db_limit}
	");

	my $line_counter;

	if ($list)
	{
		main::_log("received ".$list->NumRows()." db lines");

		Tomahawk::GetXSGN(-convertvars=>1) || return undef; # load design file
		if (($env{xt_xlng}) || ($env{xlng}))
		{
			main::_log("using xlng transformation");
			if ($env{xlng}) { main::_log("WARNING! using deprecated parameter 'xlng'! please, use 'xt_xlng';"); }
			Tomahawk::GetXLNG() || return undef; # retrieve language xml
			Tomahawk::XLNGtoXSGN(); # implement XLNG into XSGN
		}

		if($env{db_IDcategory}=~/^([a-zA-Z0-9]*?)[%]?$/)
		{
			my $tmpID=$1;
			my $db0=$main::DB{main}->Query("
				SELECT
					name
				FROM $env{db_410}.a410_category
				WHERE
					ID='$tmpID'
				LIMIT 1
			");
			if (my %db0_line=$db0->fetchHash)
			{
				$XSGN{TMP}=~s|<%IDcategory_name%>|$db0_line{name}|g;
				#main::_log("a just - $db0_line{name}");
			}
		}
		else
		{$XSGN{TMP}=~s|<%IDcategory_name%>||g;}

		while (my %db_line=$list->fetchhash())
		{
			$XSGN{NULL}=undef;
			$line_counter++;
			if ($line_counter eq ($env{db_count}+1)) {main::_log("we have an exceeding line - allowing next page");last;}

			if(exists $XSGN{'LINE_'.$env{db_page}.'_'.$line_counter})
			{
				main::_log("adding special xsgn - LINE_".$env{db_page}."_".$line_counter);
				$XSGN{NULL}=$XSGN{'LINE_'.$env{db_page}.'_'.$line_counter};
			}
			elsif(exists $XSGN{'LINE_'.$line_counter})
			{
				main::_log("adding special xsgn - LINE_".$line_counter);
				$XSGN{NULL}=$XSGN{'LINE_'.$line_counter};
			}
			elsif ((not $line_counter % 2) && (exists $XSGN{LINE_odd})) #is this an odd line?
			{
				main::_log("adding special xsgn - LINE_odd");
				$XSGN{NULL}=$XSGN{LINE_odd};
			}
			else
			{
				$XSGN{NULL}=$XSGN{LINE};
			}

			my $tmp_ID=sprintf('%07d',$db_line{ID});

			if(
				(($env{db_select}=~/a410_attrs.IDauthor/) || ($env{db_select}=~/a410_attrs.\*/)) &&
				(($XSGN{NULL}=~/<%IDauthor_fullname%>/) || ($XSGN{NULL}=~/<%IDauthor_nickname%>/))
			)
			{
				$env{db_120}=Tomahawk::Getmdlvar("120","db") unless $env{db_120};
				$env{db_120}=$TOM::DB{main}{name} unless $env{db_120};

				my $db0=$main::DB{main}->Query("
					SELECT
						ID,
						IDcategory,
						fullname,
						nickname
					FROM $env{db_120}.a120
					WHERE
						ID='$db_line{IDauthor}'
						AND IDtype='0'
					LIMIT 1
				");
				if (my %db0_line=$db0->FetchHash())
				{
					$XSGN{NULL}=~s|<%IDauthor%>|$db0_line{ID}|g;
					$XSGN{NULL}=~s|<%IDauthor_fullname%>|$db0_line{fullname}|g;
					$XSGN{NULL}=~s|<%IDauthor_nickname%>|$db0_line{nickname}|g;
				}
				else
				{
					main::_log("SELECT
						ID,
						IDcategory,
						fullname,
						nickname
					FROM $env{db_120}.a120
					WHERE
						ID='$db_line{IDauthor}'
						AND IDtype='0'
					LIMIT 1");
					main::_log($db0->errstr());
				}
			}

			if(
				(($env{db_select}=~/a410.IDeditor/) || ($env{db_select}=~/a410_attrs.\*/)) &&
				(($XSGN{NULL}=~/<%IDeditor_fullname%>/) || ($XSGN{NULL}=~/<%IDeditor_nickname%>/))
			)
			{
				$env{db_120}=Tomahawk::Getmdlvar("120","db") unless $env{db_120};
				$env{db_120}=$TOM::DB{main}{name} unless $env{db_120};

				my $db0=$main::DB{main}->Query("
					SELECT
						ID,
						IDcategory,
						fullname,
						nickname
					FROM $env{db_120}.a120
					WHERE
						ID='$db_line{IDeditor}'
						AND IDtype='1'
					LIMIT 1
				");
				if (my %db0_line=$db0->FetchHash())
				{
					$XSGN{NULL}=~s|<%IDeditor%>|$db0_line{ID}|g;
					$XSGN{NULL}=~s|<%IDeditor_fullname%>|$db0_line{fullname}|g;
					$XSGN{NULL}=~s|<%IDeditor_nickname%>|$db0_line{nickname}|g;
				}
				else
				{
					main::_log($db0->errstr());
				}
			}

			my $db0=$main::DB{main}->Query("
				SELECT
					name
				FROM $env{db_410}.a410_category
				WHERE
					ID='$db_line{IDcategory}'
				LIMIT 1
			");
			if (my %db0_line=$db0->fetchHash)
			{
				$db_line{IDcategory_name}=$db0_line{name};
			}

			$XSGN{NULL}=~s|<%IDcategory_name%>|$db_line{IDcategory_name}|g;

			# display date and time
			if (($env{datetime_allow}) || ($env{datetime}) || ($env{xt_datetime}))
					{
						my %env0=Utils::datetime::ctodatetime($db_line{'starttime'},format=>1);
	
						$XSGN{NULL}=~s|<%day%>|$env0{mday}|g;
						$XSGN{NULL}=~s|<%month%>|$env0{mom}|g;
						$XSGN{NULL}=~s|<%year%>|$env0{year}|g;
						$XSGN{NULL}=~s|<%hour%>|$env0{hour}|g;
						$XSGN{NULL}=~s|<%minute%>|$env0{min}|g;
						$XSGN{NULL}=~s|<%second%>|$env0{sec}|g;
	
						$XSGN{NULL}=~s|<%day_name%>|$Utils::datetime::DAYS{$env{lng}}[$env0{wday}]|g;
						$XSGN{NULL}=~s|<%day_name_long%>|$Utils::datetime::DAYS_L{$env{lng}}[$env0{wday}]|g;
						$XSGN{NULL}=~s|<%month_name%>|$Utils::datetime::MONTHS{$env{lng}}[$env0{mom}]|g;
						$XSGN{NULL}=~s|<%month_name_long%>|$Utils::datetime::MONTHS_L{$env{lng}}[$env0{mom}]|g;
					}

			my $tmp;
			if ($tmp_ID=~/^(....)/i){$tmp=$1};

			$db_line{fullpath}="$tom::H_410/$tmp/$db_line{hash}-$env{db_format_tmp}.jpg";
			$db_line{name}="$db_line{hash}-$env{db_format_tmp}.jpg";

			if (($env{about_cut})&&(length($db_line{about})>$env{about_cut}))
			{$db_line{about}=substr($db_line{title}, 0, $env{about_cut});$db_line{about}=~s|(.*) .*?$|$1&hellip;|;}

			foreach (keys %db_line)
			{
				$XSGN{NULL}=~s|<%$_%>|$db_line{$_}|g;
			}
			$XSGN{NULL}=~s|<%alt%>|$db_line{about}|g;
			$XSGN{NULL}=~s|<%line_no%>|$line_counter|g;

			if($XSGN{TMP}=~/<#LINE_$line_counter#>/)
			{$XSGN{TMP}=~s|<#LINE_$line_counter#>|$XSGN{NULL}|;}
			else
			{$XSGN{TMP}=~s|<#LINE#>|$XSGN{NULL}|;}
		}
		$XSGN{TMP}=~s|<%counter%>|$line_counter|g;
	}
	else
	{
		main::_log($main::DBH->errstr());
		if (!$env{return_null})
		{
			Tomahawk::GetXSGN(-convertvars=>1) || return undef; # load design file
			if (($env{xt_xlng}) || ($env{xlng}))
			{
				main::_log("using xlng transformation");
				if ($env{xlng}) { main::_log("WARNING! using deprecated parameter 'xlng'! please, use 'xt_xlng';"); }
				Tomahawk::GetXLNG() || return undef; # retrieve language xml
				Tomahawk::XLNGtoXSGN(); # implement XLNG into XSGN
			}
		}
	}

	if($line_counter<1)
	{
		if($env{return_null})
		{
			main::_log("no data available. return_null parameter in effect");
			$XSGN{TMP}="";
		}
		else
		{
			if(exists $XSGN{TMP_NO_DATA})
			{
				main::_log("no data available. returning TMP_NO_DATA");
				$XSGN{TMP}=$XSGN{TMP_NO_DATA};
			}
			else
			{
				$tom::ERR="no data available! query description in log.";
				return undef;
			}
		}
	}

	if (($line_counter eq ($env{db_count}+1)) || ($env{db_page}>0))
	{
		main::_log("actual page is: $env{db_page}");
		#$XSGN{TMP}=~s|<#PAGING#>|$XSGN{PAGING}|;

		if ($XSGN{'PAGING_'.$env{db_page}})
		{
			$XSGN{PAGING}=$XSGN{'PAGING_'.$env{db_page}};
			main::_log("got a different design for paging!");
		}

		if($XSGN{TMP}=~/<#PAGING_$env{db_page}#>/)
		{
			#not sure about this
			#$XSGN{TMP}=~s|<#PAGING_$env{db_page}#>|$XSGN{PAGING}|g;
			$XSGN{TMP}=~s|<#PAGING_$env{db_page}#>|$XSGN{PAGING}|g;
		}
		else
		{$XSGN{TMP}=~s|<#PAGING#>|$XSGN{PAGING}|g;}

		# inserting links to all previous pages
		if(($XSGN{TMP}=~/<#PAGES#>/) && ($XSGN{PAGES}) && ($env{db_page}>1))
		{
			my $var=$env{db_page}-1;
			if ($var)
			{
				while ($var)
				{
					$XSGN{PAGES}=~s|<#PAGE#>|$XSGN{PAGE}|;
					$XSGN{PAGES}=~s|<%page%>|$var|g;
					$XSGN{PAGES}=~s|<%page_real%>|$var+1|ge;
					$var--;
				}
				$XSGN{TMP}=~s|<#PAGES#>|$XSGN{PAGES}|g;
			}
		}

		$XSGN{TMP}=~s|<%page%>|$env{db_page}|;
		$XSGN{TMP}=~s|<%page_real%>|$env{db_page}+1|ge;
	}

	if ($line_counter eq ($env{db_count}+1))
	{
		my $nextpage=$env{db_page}+1;
		$XSGN{NULL}=$XSGN{PAGING_NEXT};
		$XSGN{NULL}=~s|<%page%>|$nextpage|g;

		if($XSGN{'PAGING_URL_'.$nextpage})
		{$XSGN{NULL}=~s|<#PAGING_URL#>|$XSGN{'PAGING_URL_'.$nextpage}|;}
		else
		{$XSGN{NULL}=~s|<#PAGING_URL#>|$XSGN{PAGING_URL}|;}

		$XSGN{NULL}=~s|<%page%>|$nextpage|g;
		$XSGN{NULL}=~s|<%page_real%>|$nextpage+1|ge;
		$XSGN{TMP}=~s|<#PAGING_NEXT#>|$XSGN{NULL}|;
	}

	if ($env{db_page}>0)
	{
		my $prevpage=$env{db_page}-1;
		$XSGN{NULL}=$XSGN{PAGING_PREV};
		$XSGN{NULL}=~s|<%page%>|$prevpage|g;

		if($XSGN{'PAGING_URL_'.$prevpage})
		{$XSGN{NULL}=~s|<#PAGING_URL#>|$XSGN{'PAGING_URL_'.$prevpage}|;}
		else
		{$XSGN{NULL}=~s|<#PAGING_URL#>|$XSGN{PAGING_URL}|;}

		$XSGN{NULL}=~s|<%page%>|$prevpage|g;
		$XSGN{NULL}=~s|<%page_real%>|$prevpage+1|ge;
		$XSGN{TMP}=~s|<#PAGING_PREV#>|$XSGN{NULL}|;
	}

	return 1;
}

1;