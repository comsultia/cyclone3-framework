#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use encoding 'utf8';
use utf8;
use strict;

use App::020;

=head1

parent - zobraz parent element
ID_charindex - vsetko od ID_charindex
depth - hlbku

=cut

sub execute
{
	my %env=@_;
	Tomahawk::GetXSGN('-convertvars'=>1) || return undef;
	delete $env{'ID_charindex'};
	
	$env{'tree'}=1 unless exists $env{'tree'};
	
	my $from;
	
	# ak idem vykreslovat strom od nejakeho ID
	if ($env{'ID'})
	{
		my %data=App::020::SQL::functions::get_ID(
			'db_h'    => 'main',
			'db_name' => $TOM::DB{'main'}{'name'},
			'tb_name' => 'a210_page',
			'ID'      => $env{'ID'},
			'columns' => 
			{
				'ID_charindex' => 1
			}
		);
		if ($data{'ID'})
		{
			$env{'ID_charindex'}=$data{'ID_charindex'};
		}
		else
		{
			main::_log("can't find ID='$data{'ID'}'",1);
			return undef;
		}
		
	}
	
	# ak chcem zobrazit levely nad current levelom
	if ($env{'level'}<0)
	{
		my $reg='(.{0,'.(abs($env{'level'})*4).'})';
		$env{'ID_charindex'}=~s|^(.*?)$reg$|\1|;
		main::_log("ID_charindex=$env{'ID_charindex'} reg='$reg'");
	}
	
	# vykreslujem od urciteho levelu
	if ($env{'ID_charindex'})
	{
		$from=$env{'ID_charindex'};
		# zobrazit parent element daneho levelu alebo nie
		if (!$env{'parent'})
		{
			$from.=':';
		}
	}
	
	my $where;
	
	# language
	$where.="lng='$env{'lng'}' ";
	
	# status
	if ($env{'status'})
	{
		$XSGN{'TMP'}=~s|<%required_status%>|$env{'status'}|g;
		$where.="AND (";
		foreach (split('',$env{'status'}))
		{
			$where.="status='$_' OR ";
		}
		$where=~s|OR $||;
		$where.=")";
	}
	else
	{
		$where.="AND status='Y' ";
	}
	
	# charindex
	$where.="AND ID_charindex LIKE '$from%' ";
	
	
	# s akou hlbkou ziskavam data
	if ($env{'depth'})
	{
		my $chars=length($from)+$env{'depth'}*4;
		$where.="AND length(ID_charindex)<".($chars)." ";
	}
	
	$where="WHERE ".$where if $where;
	
	
	$env{'db_order'}="ID_charindex" unless $env{'db_order'};
	
	
	my $sql=qq{
		SELECT
			ID,
			ID_entity,
			ID_charindex,
			datetime_create,
			name,
			name_url,
			t_name,
			lng,
			status,
			is_default
		FROM
			a210_page
$where
		ORDER BY
			$env{'db_order'}
	};
	
	my @path;
	my @path_url;
	
	my %charindex_ID;
	
	my $level;
	my $level_prev;
	my $level_next;
	
	my %sth0=TOM::Database::SQL::execute($sql,'log'=>1);
	if ($sth0{'sth'})
	{
		# naplnim si @tree s polozkami zo stromu preto aby som mohol v dalsom
		# cykle pracovat ako s predchadzajucimi tak i s buducimi polozkami
		my @tree;
		while (my %db0_line=$sth0{'sth'}->fetchhash())
		{
			$charindex_ID{$db0_line{'ID_charindex'}}=$db0_line{'ID'};
			
			my $dbg=$db0_line{'ID_charindex'};
			$dbg=~s|^(.*?)(.{0,4})$|\1|;
			
			$db0_line{'ID_parent'}=$charindex_ID{$dbg};
			
			push @tree, {%db0_line};
		}
		
		my $i=0;
		
		foreach my $entity(@tree)
		{
			
			my $dbg_level=$entity->{'ID_charindex'};$dbg_level=~s|:||g;
			$level=(length($dbg_level)/3)+1;
			
			if ($tree[$i+1])
			{
				my $dbg_level=$tree[$i+1]->{'ID_charindex'};$dbg_level=~s|:||g;
				$level_next=(length($dbg_level)/3)+1;
			}
			else
			{
				$level_next=0;
			}
			
			if ($env{'tree'})
			{
				if ($level>$level_prev)
				{
					my $rec=$XSGN{'TMP'}=~s|<#tree#>|$XSGN{'SUB'}|;
					main::_log("inserted tree ($rec) for level $level");
				}
			}
			
			main::_log("$level($level_next) $entity->{'ID_charindex'} $entity->{'name'} $entity->{'lng'}");
			
			for ($level..$level_prev+1)
			{
				delete $path[$_];
			}
			
			$path[$level]=$entity->{'name_url'};
			
			my $path_;
			foreach my $node (App::020::SQL::functions::tree::get_path(
				$entity->{'ID'},
				'db_h'    => 'main',
				'db_name' => $TOM::DB{'main'}{'name'},
				'tb_name' => 'a210_page'
			))
			{
				$path_.='/'.$node->{'name_url'};
			}
			$path_=~s|^/||;
			main::_log("path_='$path_'");
			
			$XSGN{'NULL'}=$XSGN{'ITEM'};
			
			$XSGN{'NULL'}=~s|<%ID%>|$entity->{'ID'}|g;
			$XSGN{'NULL'}=~s|<%ID_entity%>|$entity->{'ID_entity'}|g;
			$XSGN{'NULL'}=~s|<%ID_parent%>|$entity->{'ID_parent'}|g;
			$XSGN{'NULL'}=~s|<%name%>|$entity->{'name'}|g;
			$XSGN{'NULL'}=~s|<%name_url%>|$entity->{'name_url'}|g;
			$XSGN{'NULL'}=~s|<%path%>|$entity->{'path'}|g;
			$XSGN{'NULL'}=~s|<%datetime_create%>|$entity->{'datetime_create'}|g;
			$XSGN{'NULL'}=~s|<%t_name%>|$entity->{'t_name'}|g;
			$XSGN{'NULL'}=~s|<%status%>|$entity->{'status'}|g;
			$XSGN{'NULL'}=~s|<%is_default%>|$entity->{'is_default'}|g;
			$XSGN{'NULL'}=~s|<%path%>|$path_|g;
			
			if ($env{'tree'})
			{
				if ($level_next<$level)
				{
					$XSGN{'NULL'}=~s|<#item#>||g;
				}
				if ($level_next<=$level)
				{
					$XSGN{'NULL'}=~s|<#tree#>||g;
				}
			}
			
			$XSGN{'TMP'}=~s|<#item#>|$XSGN{'NULL'}|;
			
			if ($env{'tree'})
			{
				for ($level_next..$level-2)
				{
					$XSGN{'TMP'}=~s|<#item#>||;
				}
				for ($level_next..$level-1)
				{
					$XSGN{'TMP'}=~s|<#tree#>||;
				}
			}
			
			$level_prev=$level;
			$i++;
		}
		
	}
	else
	{
		main::_log("can't select");
	}
	
	return 1;
}



1;
