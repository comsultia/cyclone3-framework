#!/bin/perl
# ÁÉÍÓÚ - USE UTF-8 !!!
package CRON::module;
use strict;
use Utils::datetime;


sub execute
{
 die "this module is tooo old!";


 my %env=@_;
 if ($cron::P eq $CRON::P){$cron::ERR="WARN: this cron is only for local use!!!";return undef}

# if (!$env{max}){$cron::ERR="not defined max deleted messages";return undef;}
# if (!$env{old}){$cron::ERR="not defined max old caches";return undef;}
# if (!$env{db_130}){$cron::ERR="not defined mail database db_130";return undef;}

 my $var=$cron::time_current-$env{old};

 my %mdl;
 my %mdl_frags;
 my $updated;

# require "$CRON::P/.core/_config/TOM3.conf";
# require "$CRON::P/.core/_config/TOM3.fcgi.conf";

 if (opendir (DIR,$cron::P."/_cache"))
 {
  my @files=readdir DIR;
  foreach my $file(@files)
  {
   #main::_log("found $file");
   if (($file ne ".")&&($file ne "..")&&($file=~/\.pub\.debug$/))
   {

    #if ($file=~/\.cache\.debug$/)
    #{
     main::_log("parsing $file");
     CRON::waitload($CRON::LOADAVG);

	#my $fragged;my %mdl_frags;
	open (HND0,"<$cron::P/_cache/$file") || next;
	my $file_data;while (my $file_line=<HND0>)
	{
	 $file_data.=$file_line;

	 while ($file_data=~s|<CACHE>(.*?)</CACHE>||s)
	 {
	  #main::_log("line");
	  my $data=$1;my %env;while ($data=~s|<VAR id="(.*?)" value="(.*?)" />||s){$env{$1}=$2;}
	  if ($env{type} ne "mini")
	  {

           if ($env{cache_time}>1000000)
	   {
	    main::_log("time $env{time_insert} $env{cache_time} $env{insert}",1);
	    next;
	   }

	   #main::_log("+ time $env{time_insert} $env{cache_time} $env{insert}") if $env{cache_time} > 604800;

	   #if (!$fragged){$fragged=1;$mdl{$env{conf_name}}{fragment}++;}
	   if (not exists $mdl_frags{$env{name_full}})
	   {
	    $mdl_frags{$env{name_full}}++;
	    $mdl{$env{name_conf}}{fragment}++;
	   }
	   $mdl{$env{name_conf}}{loads}+=$env{loads};$mdl{$env{name_conf}}{time}+=$env{cache_time};
	   #$mdl{$env{name_conf}}{first}=$env{time} unless $mdl{$env{name_conf}}{first};
	   #print "	+ $env{old}/$env{loads}\n";
	   #main::_log("$env{old}/$env{loads}");
	  }
	 }


	}



    #}

   }
  }
  closedir DIR;
 }


 foreach (keys %mdl)
 {
  my $report;
  my %date=Utils::datetime::ctodatetime(time,format=>1);
  $report.="$date{year}-$date{mom}-$date{mday} $date{hour}:$date{min}:$date{sec}\n";

  main::_log("$_ frags($mdl{$_}{fragment})");
  $report.="$_ frags($mdl{$_}{fragment})\n";
  main::_log("time/loads ".$mdl{$_}{time}."/".$mdl{$_}{loads}." min(".$TOM::DEBUG_cache_mintime."/".$TOM::DEBUG_cache_min.")");
  $report.="time/loads ".$mdl{$_}{time}."/".$mdl{$_}{loads}." min(".$TOM::DEBUG_cache_mintime."/".$TOM::DEBUG_cache_min.")\n";

  if ($mdl{$_}{loads}<$TOM::DEBUG_cache_min){main::_log("need more data, next...");next;}
  if ($mdl{$_}{time}<$TOM::DEBUG_cache_mintime){main::_log("need more time, next...");next;}

  my $everyxsecs=(int(($mdl{$_}{time}/$mdl{$_}{loads})*100))/100;
  main::_log("1 load in ".$everyxsecs." secs");
  $report.="1 load in ".$everyxsecs." secs\n";
  my $type=$_;$type=~s|^(.*)-||;
  my $name=$1;$name=~s|^(.*)-||;
  my $category=$1;

  my $db0=$main::DBH->Query("
	SELECT cache_time,opt_time,opt_dynamize
	FROM _cache_conf
	WHERE engine='pub' AND IDcategory='$category' AND module='$name' AND type='$type'
	LIMIT 1");
  if (my @db0_line=$db0->FetchRow())
  {

   my %date=Utils::datetime::splittime($cron::time_current-$db0_line[1]);
   main::_log("debugging... $date{day}d $date{hour}:$date{min}:$date{sec} (more $TOM::DEBUG_cache_minovertime)");
   if ($cron::time_current-$db0_line[1]<$TOM::DEBUG_cache_minovertime)
   {
    main::_log("need more overtime, next...",1);next;
   }

   #next;
   #main::_log("uz som fnutriiiii! !$db0_line[1]!");
   #return 1;

   my $settoloads=$TOM::DEBUG_cache_optim;


   my $inxsecs=(int(($db0_line[0]/($mdl{$_}{time}/$mdl{$_}{loads}))*100))/100;
   main::_log("in ".$db0_line[0]." secs ".$inxsecs."x ");
   $report.="in ".$db0_line[0]." secs ".$inxsecs."x \n";

   my $db1=$main::DBH->Query("
	SELECT load_req
	FROM _mdl
	WHERE module='$category-$name' AND engine='pub'
	LIMIT 1");
   if (my @db1_line=$db1->FetchRow())
   {
    $settoloads=(int(($TOM::DEBUG_cache_optimtime/$db1_line[0])*100))/100;
    main::_log("1 load_req $db1_line[0], $TOM::DEBUG_cache_optimtime secs load in ".$settoloads."x");
    $report.="1 load_req $db1_line[0], $TOM::DEBUG_cache_optimtime secs load in ".$settoloads."x\n";
   }
   else
   {
    main::_log("unknown load_req",1);
    $report.="unknown load_req\n";
   }


   my $settime=int($everyxsecs*$settoloads);
   main::_log($settoloads."x in ".($settime)." secs");
   $report.=$settoloads."x in ".($settime)." secs\n";
   $settime=$settime*$mdl{$_}{fragment};
   main::_log($settoloads."x (frag) in ".($settime)." secs");
   $report.=$settoloads."x (frag) in ".($settime)." secs\n";
   my @ref=split('-',$db0_line[2]);
   $ref[0]=$TOM::CACHE_time_min unless $ref[0];
   $ref[1]=$TOM::CACHE_time_max unless $ref[1];
   my $needtime=$settime;
   if ($settime<$ref[0]){$settime=$ref[0]}
   if ($settime>$ref[1]){$settime=$ref[1]}
   main::_log("($ref[0]-$ref[1]) setting to ".($settime));
   $report.="($ref[0]-$ref[1]) setting to ".($settime)."\n";

#=head1
   my $time_current=time;
   if ($main::DBH->Query("
	UPDATE _cache_conf
	SET	cache_time='$settime',
		opt_time='$time_current',
		opt_fragment='$mdl{$_}{fragment}',
		opt_time_need='$needtime',
		opt_report='$report'
	WHERE engine='pub' AND IDcategory='$category' AND module='$name' AND type='$type'
	LIMIT 1"))
   {
    #my $path=$cron::P;$path=~s|\!|\\!|g;
      main::_log("rm $cron::P/_cache/$category-$name-$type.pub.debug -f");
      system("rm $cron::P/_cache/$category-$name-$type.pub.debug -f");
      $updated=1;
   }
   #print "rm $category-$name.i-$type.*.debug\n";
#=cut
  }
  else
  {
   main::_log("unknown cache",1);
   main::_log("rm $cron::P/_cache/$category-$name-$type.pub.debug -f");
   system("rm $cron::P/_cache/$category-$name-$type.pub.debug -f");
  }

 }

 # AK PREBEHLI NEJAKE OPTIMALIZACIE, TAK NECHAM RESTARTNUT CACHE_CONF, ABY ZBYTOCNE
 # NEDEBUGOVAL UZ CONFNUTE VECI
 if ($updated)
 {
  main::_log("SETTING TOM3_CACHE_CONF TO RELOAD IN $cron::time_current");
  $main::DBH->Query("
	UPDATE _config
	SET	value='$cron::time_current'
	WHERE variable='_cache_conf_reload' AND type='var'
	LIMIT 1");
 }


 return 1;}

1;
