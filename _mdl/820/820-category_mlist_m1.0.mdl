#!/usr/bin/perl
# ????? - USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use encoding 'utf8';
use utf8;
use strict;
use CVML;

our $authors = "nemsak\@webcom.sk";

sub execute
{
	my %env = @_;

	Tomahawk::GetXSGN(-convertvars=>1) || return undef; # NATIAHNEM XML DESIGN
	if ($env{xt_xlng})
	{
		main::_log("using xlng transformation");
		Tomahawk::GetXLNG() || return undef; # retrieve language xml
		Tomahawk::XLNGtoXSGN(); # implement XLNG into XSGN
	}

	$env{db_820}=Tomahawk::Getmdlvar("820","db") unless $env{db_820};
	$env{db_820}=$TOM::DB{main}{name} unless $env{db_820};

	# active
	$env{db_active} = "Y" if not exists $env{db_active} || $env{db_active};

	$env{db_select}="a820_category.*" unless $env{db_select};

	$env{db_order_by}="a820_category.IDcharindex ASC";

	if(exists($env{db_where}))
	{ $env{db_where}=" AND ".$env{db_where} unless $env{db_where}=~/^\sAND\s/; }

	if(exists($env{db_lng}))
	{
		if($env{db_lng})
		{
			my @levels=split(";",$env{db_lng});
			$env{db_where}.=" AND a820_category.lng IN (";
			foreach (@levels)
			{
				$env{db_where}.="'$_',";
			}
			$env{db_where}=~s|,$||;
			$env{db_where}.=") ";
		}
		else
		{
			$env{db_where}.=" AND a820_category.lng IS NULL ";
		}
	}
	else
	{
		$env{db_where}.=" AND ((a820_category.lng='$env{lng}') || (a820_category.lng IS NULL))";
	}

	# start level
	$env{db_startlevel} = "(length(ID)/2>=$env{db_startlevel})" if $env{db_startlevel};

	$env{xt_reroot}=0 unless $env{xt_reroot};
	if(($env{xt_reroot}) && ($env{db_ID}))
	{
		main::_log("xt_reroot parameter in effect. rerooting!");
		main::_log("
			SELECT IDcharindex
			FROM $env{db_820}.a820_category
			WHERE
				1
				$env{db_where}
				ID='$env{db_ID}'
				AND active LIKE '$env{db_active}'
			LIMIT 1
		");
		my $db = $main::DB{main}->Query("
			SELECT IDcharindex
			FROM $env{db_820}.a820_category
			WHERE
				1
				$env{db_where}
				ID='$env{db_ID}'
				AND active LIKE '$env{db_active}'
			LIMIT 1
		");
		if(my %db_line=$db->fetchHash())
		{
			$env{db_where}.=" AND IDcharindex LIKE '$db_line{IDcharindex}%'";
		}
		else
		{
			main::_log("db error: ".$main::DB{main}->errstr());
		}
	}

	main::_log("
		SELECT $env{db_select}
		FROM $env{db_820}.a820_category AS a820_category
		WHERE
			1
			$env{db_where}
			AND a820_category.active LIKE '$env{db_active}'
		ORDER BY
			$env{db_order_by}
	");

	my $db = $main::DB{main}->Query("
		SELECT $env{db_select}
		FROM $env{db_820}.a820_category AS a820_category
		WHERE
			1
			$env{db_where}
			AND a820_category.active LIKE '$env{db_active}'
		ORDER BY
			$env{db_order_by}
	");
	if($db)
	{
		my $lastLevel=1;

		main::_log('db returned '.$db->NumRows().' rows');

		my %tmpIDParentRewrite;

		while(my %db_line=$db->fetchhash())
		{
			$XSGN{NULL}=undef;

			$tmpIDParentRewrite{$db_line{'IDcharindex'}}=$db_line{'IDentity'};

			my @levels=split(":",$db_line{IDcharindex});
			$db_line{IDcharindex_level}=scalar(@levels);

			if(exists $XSGN{'LINE_level_'.$db_line{IDcharindex_level}})
			{
				main::_log("adding special xsgn - LINE_".$db_line{IDcharindex_level});
				$XSGN{NULL}=$XSGN{'LINE_level_'.$db_line{IDcharindex_level}};
			}
			elsif ((not $db_line{IDcharindex_level} % 2) && (exists $XSGN{LINE_level_odd})) #is this an odd line?
			{
				main::_log("adding special xsgn - LINE_level_odd");
				$XSGN{NULL}=$XSGN{LINE_level_odd};
			}
			else
			{
				$XSGN{NULL}=$XSGN{LINE};
			}

			my $catChildren;
			#zistime si kategorie ktorym sme parent (otazka je ci tam na konieco dat % alebo ne)
			main::_log("
				SELECT IDentity
				FROM $env{db_820}.a820_category
				WHERE
					IDcharindex LIKE '$db_line{IDcharindex}'
			");
			my $db0 = $main::DB{main}->Query("
				SELECT IDentity
				FROM $env{db_820}.a820_category
				WHERE
					IDcharindex LIKE '$db_line{IDcharindex}'
			");
			if($db0)
			{
				while(my %db0_line=$db0->fetchHash())
				{
					if($catChildren){$catChildren.=",";}
					$catChildren.="'$db0_line{IDentity}'";
				}

				my $db1 = $main::DB{main}->Query("
					SELECT COUNT(ID) AS item_count
					FROM $env{db_820}.a820
					WHERE
						IDcategory IN ($catChildren)
						AND ((a820.lng='$env{lng}') || (a820.lng IS NULL))
						AND active='Y'
				");
				if(my %db1_line=$db1->fetchHash())
				{
					$db_line{item_count}=$db1_line{item_count};
				}
				else
				{
					main::_log("db error: ".$main::DB{main}->errstr());
				}
				
				my $db2 = $main::DB{main}->Query("
					SELECT
						COUNT(ID) AS item_count
					FROM $env{db_820}.a820
					WHERE
						((IDcategory='') OR (IDcategory IS NULL))
						AND ((a820.lng='$env{lng}') OR (a820.lng IS NULL))
						AND active!='D'
				");
				if(my %db2_line=$db2->fetchHash())
				{
					$XSGN{TMP} =~ s|<%itemcount_root%>|$db2_line{item_count}|g;
				}
				else
				{
					main::_log("db error: ".$main::DB{main}->errstr());
				}
			}
			else
			{
				main::_log("db error: ".$main::DB{main}->errstr());
			}


			if ($db_line{IDcharindex_level}>$lastLevel)
			{
				if (exists $XSGN{"LIST_level_$db_line{IDcharindex_level}"})
				{ $XSGN{TMP} =~ s/<#LIST#>/$XSGN{"LIST_level_$db_line{IDcharindex_level}"}/; }
				else
				{ $XSGN{TMP} =~ s/<#LIST#>/$XSGN{LIST}/; }
			}

			# ak sa vraciam do nadurovne
			# - pozatvaram vsetky podurovnevne
			# - zatvorim aj LIST
			if ($db_line{IDcharindex_level}<$lastLevel)
			{
				for ($db_line{IDcharindex_level} .. $lastLevel-1)
				{ $XSGN{TMP} =~ s/<#LINE#>//; }
				$XSGN{TMP} =~ s/<#LIST#>//;
			}

			# ak je to len dalsia polozka v rovnakej urovni
			# - zatvorim LIST (poduroven, nechcem ju)
			if ($db_line{IDcharindex_level}==$lastLevel)
			{$XSGN{TMP} =~ s/<#LIST#>//;}

			my $cvml=new CVML(data=>$db_line{cvml});
			my %cvml_hash=%{$cvml->{hash}};

			$db_line{description}=$cvml_hash{description};


			main::_log("time_create: $db_line{time_create}");
			if($db_line{time_create})
			{
				if(exists $XSGN{time_create})
				{
					$XSGN{NULL}=~s|<#time_create#>|$XSGN{time_create}|g;
				}

				my %env0=Utils::datetime::ctodatetime($db_line{time_create},format=>1);

				$XSGN{NULL}=~s|<%time_create_day%>|$env0{mday}|g;
				$XSGN{NULL}=~s|<%time_create_month%>|$env0{mom}|g;
				$XSGN{NULL}=~s|<%time_create_year%>|$env0{year}|g;
				$XSGN{NULL}=~s|<%time_create_hour%>|$env0{hour}|g;
				$XSGN{NULL}=~s|<%time_create_minute%>|$env0{min}|g;
				$XSGN{NULL}=~s|<%time_create_second%>|$env0{sec}|g;

				$XSGN{NULL}=~s|<%time_create_day_name%>|$Utils::datetime::DAYS{$env{lng}}[$env0{wday}]|g;
				$XSGN{NULL}=~s|<%time_create_day_name_long%>|$Utils::datetime::DAYS_L{$env{lng}}[$env0{wday}]|g;
				$XSGN{NULL}=~s|<%time_create_month_name%>|$Utils::datetime::MONTHS{$env{lng}}[$env0{mom}-1]|g;
				$XSGN{NULL}=~s|<%time_create_month_name_long%>|$Utils::datetime::MONTHS_L{$env{lng}}[$env0{mom}-1]|g;
			}

			if($db_line{time_change})
			{
				if(exists $XSGN{time_change})
				{
					$XSGN{NULL}=~s|<#time_change#>|$XSGN{time_change}|g;
				}

				my %env0=Utils::datetime::ctodatetime($db_line{time_change},format=>1);

				$XSGN{NULL}=~s|<%time_change_day%>|$env0{mday}|g;
				$XSGN{NULL}=~s|<%time_change_month%>|$env0{mom}|g;
				$XSGN{NULL}=~s|<%time_change_year%>|$env0{year}|g;
				$XSGN{NULL}=~s|<%time_change_hour%>|$env0{hour}|g;
				$XSGN{NULL}=~s|<%time_change_minute%>|$env0{min}|g;
				$XSGN{NULL}=~s|<%time_change_second%>|$env0{sec}|g;

				$XSGN{NULL}=~s|<%time_change_day_name%>|$Utils::datetime::DAYS{$env{lng}}[$env0{wday}]|g;
				$XSGN{NULL}=~s|<%time_change_day_name_long%>|$Utils::datetime::DAYS_L{$env{lng}}[$env0{wday}]|g;
				$XSGN{NULL}=~s|<%time_change_month_name%>|$Utils::datetime::MONTHS{$env{lng}}[$env0{mom}-1]|g;
				$XSGN{NULL}=~s|<%time_change_month_name_long%>|$Utils::datetime::MONTHS_L{$env{lng}}[$env0{mom}-1]|g;
			}

			if(!exists($db_line{'IDparent'})){
				if($db_line{'IDcharindex'}=~/:/){
					$db_line{'IDparentCharindex'}=$db_line{'IDcharindex'};
					$db_line{'IDparentCharindex'}=~s|^(.*?):[0-9a-zA-Z]*?$|\1|;
					$db_line{'IDparent'}=$tmpIDParentRewrite{$db_line{'IDparentCharindex'}};
				}else{
					$db_line{'IDparent'}="";
				}
			}

			foreach (keys %db_line)
			{
				$XSGN{NULL}=~s|<%$_%>|$db_line{$_}|g;
			}

			$XSGN{TMP} =~ s|<#LINE#>|$XSGN{NULL}|;

			$lastLevel=$db_line{IDcharindex_level};
		}
	}
	else
	{
		main::_log("db error: ".$main::DB{main}->errstr());
	}

	$XSGN{TMP} =~ s/<#LIST#>/$XSGN{LIST}/; # vsetko davam rovno do TMP

=head1

	# KONVERZIE
	$env{db_limit} = $env{limit} if $env{limit};
	$env{db_like} = $env{like} if $env{like};
	$env{db_direction} = $env{direction} if $env{direction};

	$env{db_IDcategory_exclude} = $env{db_IDcategory_ex} if $env{db_IDcategory_ex};
	$env{db_IDcategory_exclude} =~ s|'||g; $env{db_IDcategory_exclude} =~ s|,|;|g;

	$env{db_IDcategory_default} = $env{db_IDcategory_def} if $env{db_IDcategory_def};

	# NASTAVENIA
	# ak mam clanok - db_ID
	if ($env{db_ID})
	{
		main::_log("Mam clanok s db_ID $env{db_ID}");

		main::_log("
			SELECT IDcategory
			FROM $env{db_500}.a500
			WHERE ID='$env{db_ID}'
		");

		my $db_article = $main::DB{main}->Query("
			SELECT IDcategory
			FROM $env{db_500}.a500
			WHERE ID='$env{db_ID}'
		");

		my %db_article_line = $db_article->fetchhash;
		$env{db_IDcategory} = $db_article_line{IDcategory};
	}

	# informacie z _config pre url
	$env{db_500}=Tomahawk::Getmdlvar("500","db") unless $env{db_500};
	$env{db_500}=$TOM::DB{main}{name} unless $env{db_500};

	$env{db_500_url}=$env{db_500} unless $env{db_500_url};
	$env{a500_IDcategory_url}=Tomahawk::Getmdlvar("500",'IDcategory_url', db=>$env{db_500_url});

	my %IDcategory_url_hash = ( $env{a500_IDcategory_url}=~/([^\r\n;]+);([^\r\n]+)/g );

	# selekt
	$env{db_select} = "ID, name" unless $env{db_select};

	# order by
	$env{db_order_by} = "ORDER BY $env{db_order_by}" if $env{db_order_by};
	$env{db_order_by} = "ORDER BY ID ASC" unless $env{db_order_by};

	# limit
	$env{db_limit} = "LIMIT $env{db_limit}" if $env{db_limit};

	# defaultna kategoria
	$env{db_IDcategory} = $env{db_IDcategory_default} if $env{db_IDcategory_default};

	# IDcategory
	if (!$env{db_IDcategory} && !$env{db_where})
	{
		$env{db_IDcategory} = "%" unless $env{db_IDcategory};

		$env{db_direction} = "from" unless $env{db_direction};
	}

	$env{db_direction} = "to" if $env{db_IDcategory} && !$env{db_direction};

	# lng
	$env{db_lng} = "(lng='$env{lng}' OR lng='')" if not exists $env{db_lng} || $env{db_lng};

	# start level
	$env{db_startlevel} = "(length(ID)/2>=$env{db_startlevel})" if $env{db_startlevel};

	# VYSKLADANIE a UPRAVY
	# exclude kategorie
	if ($env{db_IDcategory_exclude})
	{
		$env{db_exclude} = ""; $env{db_exclude_like} = "";
		foreach (split ";", $env{db_IDcategory_exclude})
		{
			if ($_ =~ /[_%]$/)
			{
				$env{db_exclude_like} .= " AND " if $env{db_exclude_like}; $env{db_exclude_like} .= "ID not like '$_'";
			}
			else
			{
				$env{db_exclude} .= "," if $env{db_exclude}; $env{db_exclude} .= "'$_'";
			}
		}
		$env{db_exclude} = "ID not in ($env{db_exclude})" if $env{db_exclude};
		$env{db_exclude} .= " AND " if $env{db_exclude} && $env{db_exclude_like};
		$env{db_exclude} = "$env{db_exclude}$env{db_exclude_like}";
	}

	# podla db_direction
	if (!$env{db_like} && $env{db_IDcategory})
	{
		if ($env{db_direction} eq "from")
		{
			my $like_IDcategory = $env{db_IDcategory};
			$like_IDcategory .= "%" unless $like_IDcategory =~ /[_%]$/;

			$env{db_like} = "ID like '$like_IDcategory'";
		}
		if ($env{db_direction} eq "to")
		{
			$env{db_like} = "'$env{db_IDcategory}' like concat(ID, '%')";
		}
	}

	# cele where
	$env{db_where} = $env{db_where} if $env{db_where};

	$env{db_where} .= " AND " if $env{db_where} && $env{db_like};
	$env{db_where} .= $env{db_like} if ($env{db_like});

	$env{db_where} .= " AND " if $env{db_where} && $env{db_exclude};
	$env{db_where} .= $env{db_exclude} if ($env{db_exclude});

	$env{db_where} .= " AND " if $env{db_where} && $env{db_active};
	$env{db_where} .= $env{db_active} if ($env{db_active});

	$env{db_where} .= " AND " if $env{db_where} && $env{db_lng};
	$env{db_where} .= $env{db_lng} if ($env{db_lng});





	# Idem uz pracovat - zacnem selektom kategorii
	main::_log("
		NOVE
		SELECT $env{db_select}
		FROM $env{db_500}.a500_category
		WHERE
			$env{db_where}
			$env{db_order_by}
			$env{db_limit}
	");

	my $db = $main::DB{main}->Query("
		SELECT $env{db_select}
		FROM $env{db_500}.a500_category
		WHERE
			$env{db_where}
			$env{db_order_by}
			$env{db_limit}
	");

	my $countline = 0; # sem si ukladam poradove cislo LINE
	my %levelCountline; # toto sluzi ako pocitadlo poloziek v ramci levelu
	my $numrows = $db->numrows; # pocet riadkov

	my $firstLevel;
	my $lastID; # podla neho si zistujem level v ktorom som
	$XSGN{TMP} =~ s/<#LIST#>/$XSGN{LIST}/; # vsetko davam rovno do TMP

	main::_log("Ziskal som zaznamy, prechadzam ich") if $numrows;

	# prechadzam zaznamy
	while (my %db_line = $db->fetchhash)
	{

		# ak je prvy riadok, nastavim si ID (akoby starej urovne)
		unless ($countline)
		{
			$lastID = $db_line{ID};
			$firstLevel = length($db_line{ID})/2;
		}

		$countline++;

		my $ID = $db_line{ID}; # sucasne ID

		# nastavenie urovni
		my $level = (length($ID)/2) - $firstLevel; my $lastLevel = (length($lastID)/2) - $firstLevel;

		# ak nastavim maximalny level, za neho uz nejdem
		next if $env{max_level} && $level > $env{max_level};

		# vynulujem pocet poloziek v leveli, ak prisiel novy level
		if ($levelCountline{"level$level"}) { $levelCountline{"level$level"}++; }
		else { $levelCountline{"level$level"} = 1; }

		if ($level<$lastLevel) { delete $levelCountline{"level$lastLevel"}; }

		# pozeram ci je splneny limit poctu poloziek, pre danu uroven, alebo pre vsetky
		next if $env{"level_${level}_limit"} && $levelCountline{"level$level"}>$env{"level_${level}_limit"};

		my $null; # toto je tmp premenna - aktualna polozka

		# rozhodnem sa aku bude mat formu
		$null = $XSGN{LINE};
		$null = $XSGN{"LINE_level_$level"} if exists $XSGN{"LINE_level_$level"};


		# exchanging links heading to external locations
		# $env{IDcategory_url_allow} = 1;
		my $url;
		if ($env{IDcategory_url_allow})
		{
			my $var;
			#main::_log("trying to fetch IDcategory url");
			foreach (reverse sort keys %IDcategory_url_hash)
			{
				#main::_log("comparing $db_line{ID} against $_");
				if ($db_line{ID}=~/^$_/)
				{
					#main::_log("redirecting db_line reading to $IDcategory_url_hash{$_} (IDcategory: $ID)");
					$url = $IDcategory_url_hash{$_};
					last;
				}
			}

		}

		# pripadne ak najdem Line s poradovym cislom
		$null = $XSGN{"LINE_$countline"} if (exists $XSGN{"LINE_$countline"});

		# ak je url linka na externu stranku
		if ($url=~/^http:/)
		{
			$null = $XSGN{LINE_out};
			$null = $XSGN{"LINE_out_level_$level"} if exists $XSGN{"LINE_out_level_$level"};
		}

		# posledna kategoria
		if ($countline>=$numrows && $env{db_direction} eq "to")
		{
			$null = $XSGN{LINE_last};
			$null = $XSGN{"LINE_last_level_$level"} if exists $XSGN{"LINE_last_level_$level"};
		}

		# vybrana kategoria
		if ($db_line{ID} eq $env{db_select_IDcategory})
		{
			$null = $XSGN{LINE_selected};
			$null = $XSGN{"LINE_selected_level_$level"} if exists $XSGN{"LINE_selected_level_$level"};
		}


		# nahradim url
		$null=~s|<%url%>|$url|g;
		# ak sa nic nenahradilo, tak to zmazem
		if($null=~/<%url%>/){$XSGN{NULL}=~s|<%url%>||g;}

		# nazov kategorie
		#$null =~ s/<%NAME%>/$db_line{name}/g; $null =~ s/<%name%>/$db_line{name}/g;

		# zamenim premenne
		foreach (keys %db_line) { $null =~ s|<%$_%>|$db_line{$_}|g; }

		# ID kategorie
		$null =~ s/<%IDcategory%>/$db_line{ID}/g if $db_line{ID};

		# FIXME: Level_space sa pouziva iba v SZLH
		my $level_space = "";
		for (2 .. $level) { $level_space .= "&nbsp;&nbsp;"; }

		$null =~ s/<%LEVEL_space%>/$level_space/g;

		# level_no je uz globalnejsia zalezitost
		$null =~ s/<%LEVEL_NO%>/$level/g;

		# OSETRENIE STROMOVEJ STRUKTURY

		# ak vchadzam do podurovne
		# - vlozim LIST
		if ($level>$lastLevel) {
			if (exists $XSGN{"LIST_level_$level"})
			{ $XSGN{TMP} =~ s/<#LIST#>/$XSGN{"LIST_level_$level"}/; }
			else
			{ $XSGN{TMP} =~ s/<#LIST#>/$XSGN{LIST}/; }
		}

		# ak sa vraciam do nadurovne
		# - pozatvaram vsetky podurovnevne
		# - zatvorim aj LIST
		if ($level<$lastLevel) {
			for ($level .. $lastLevel-1) { $XSGN{TMP} =~ s/<#LINE#>//; }
			$XSGN{TMP} =~ s/<#LIST#>//;
		}

		# ak je to len dalsia polozka v rovnakej urovni
		# - zatvorim LIST (poduroven, nechcem ju)
		if ($level==$lastLevel) {
			$XSGN{TMP} =~ s/<#LIST#>//;
		}

		# VLOZENIE LINE...

		# - nemam design k LINE_x (normalna situacia)
		unless (exists $XSGN{"LINE_$countline"})
		{
			# ale ak v TMP je LINE_x, treba ju odstranit
			$XSGN{TMP} =~ s|<#LINE_$countline#>||g if $XSGN{TMP} =~ /<#LINE_$countline#>/;

			$XSGN{TMP} =~ s|<#LINE#>|$null|;
		}

		# ak mam design LINE_x
		else
		{
			# pozrem sa, ci ho mozem nahradit
			# ak ano
			if ($XSGN{TMP} =~ /<#LINE_$countline#>/)
			{
				# ak je v LINE_x designe <#LINE#>, potom jednu <#LINE#> zrusim, lebo
				# - inak by tu boli dva priestory pre LINE a mohlo by to zhaluzit
				$XSGN{TMP} =~ s|<#LINE#>|| if ( $XSGN{"LINE_$countline"} =~ /<#LINE#>/ );

				$XSGN{TMP} =~ s|<#LINE_$countline#>|$null|g;
			}

			# ak ho nemozem nahradit, ostava mi len normalny <#LINE#>
			else
			{
				$XSGN{TMP} =~ s|<#LINE#>|$null|;
			}
		}

		$lastID = $ID;
	}

=cut

	return 1;
}

1;