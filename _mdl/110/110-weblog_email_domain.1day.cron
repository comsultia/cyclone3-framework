#!/bin/perl
# USE UTF-8 !!!
package CRON::module;
use strict;


sub execute
{
 my %env=@_;

 if ($cron::P eq $CRON::P){$cron::ERR="WARN: this cron is only for local use!!!";return undef}

 #return undef unless $env{to_email};
 my $date=`date -u "+%a,%e %b %Y %H:%M:%S (%Z)"`;chomp($date);
 
 #if ($TOM::DB_name_STAT eq $TOM::DB_name_TOM){$env{t}="C";}
 
 #print "$TOM::DB_name_STAT\n";

 #if (!$env{db_130}){$cron::ERR="WARN: db_130 not defined!!!";return undef}
 
 $env{to_email} = $TOM::contact{'stats'}.";".$TOM::contact{'TOM'};
 #$env{to_email} = "gregor\@webcom.sk;fordinal\@webcom.sk";
 #$env{to_email} = "gregor\@webcom.sk";
	
 TOM::Database::connect::multi('stats') || die "cannot connect all databases";
	my $boundary = "------------080308060200060803000107";
=head1
From: <%FROM%>
To: <%TO%>
Subject: [STAT][a110/weblog] last day domain bilance
Date: <%DATE%>
List-Id: TOM3
MIME-Version: 1.0
Content-Type: text/plain;charset="utf-8"
Content-Transfer-Encoding: 7bit
=cut
 
 my $email=<<"HEADER";
From: "$TOM::hostname" <TOM\@$TOM::hostname>
To: <%TO%>
Subject: [STAT][a110/weblog] last day domain bilance
Date: $date
List-Id: TOM3
MIME-Version: 1.0
Content-Type: multipart/related;
 boundary="$boundary"

This is a multi-part message in MIME format.
--$boundary
Content-Type: text/html;charset="utf-8"
Content-Transfer-Encoding: 7bit

<html>
  <head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8" />
  </head>
  <body>
		<style>
			body { font-family: Arial, Verdana; }
		
			h1 {
				color: #808285;
				font-family: Arial, Verdana;
			}
		
			.info-domain { font-size: 18px; }
			.term { font-size: 14px; font-weight: normal; }

			table { margin-bottom: 10px; }
		
			h2, th { font-size: 12px; }
			th { text-align: left; }
			td { font-size: 10px; }

			#page { width: 500px; }
			#domains, #search_engines { width: 250px; float: left; }
			#keywords { width: 180px; float: left; }
			#keyphrases { width: 320px; float: left; }

			.odd { background: #FFF6F6; }
			.odd .first { border-left: 5px solid #D1D1D1; padding-left: 10px; }
			.first { border-left: 5px solid #fff; padding-left: 10px; }
			.icon { width: 80px; }
			.endblock { clear: both;  }
		</style>

		<div id="page">

			<h1>
				<img src="cid:part1.webcom.icon\@webcom.sk" alt="webcom logo" border="0" /><br /><br />
				<span class="info-domain"><%main-header%></span><br />
				<span class="term"><%term%></span>
			</h1>

			<pre>
				<%BODY%>
			</pre>

		</div>
	</body>
</html>
--$boundary
Content-Type: image/gif;
 name=\"webcom_icon.gif\"
Content-ID: <part1.webcom.icon\@webcom.sk>
Content-Transfer-Encoding: base64
Content-Disposition: inline;
 filename=\"webcom_icon.gif\"

R0lGODlhlgAcAMQAAL/Awd/g4O0bI/f395iam7i5urCxss/Q0YiKjJCSk+/v8NfY2Ofn6Kip
q8fIyfaNke84P/zU1v3i4/RxdvebnvV/hKCho4CChP///wAAAAAAAAAAAAAAAAAAAAAAAAAA
ACH5BAAAAAAALAAAAACWABwAAAX/ICaOZGmeaIpaV6u+cCzPL0MQFuLQfD+yLp9wSBQxEg6A
I0DYFZ8l4AVKrZ4aAIChYGEgrFApeEy1BACWRgGTIBPF7rjPrDUYMF95D67vwwBYAEcOFn40
fIaJJQM3Cwo5DIoxiJKSA4QWBQqVMJScnxgWohabJwOiDSmPowMkCgAELS0EmidSCgYJshcE
AK0qCgWxuxYOvyXBurIJtSdcoiIHDcsGpdENCC0J1SrTLWsnB7ILKAWyqSMO2buyOiZS7LsI
BygD5vGyhST2+LIFxz9k2cA3D8OjfvRQBGgHcMSwC/oWrbsQYISBfrvABcS4K+G+h/0iigDZ
j8C7dhwP/0zERw7FQ48jFu6yNkLcrHS7EgAIsKDAypYi4EHMYmAlxY/sEoxSJhKDzRaBvLWA
GZSdgQM8L8ZrgHWBVm0pnrYp8bXFnRLKLiRUMNEAQEbLSEjhNoJf3BH3ZlUkwcBAU6cQaR6k
WrUFgr042wEV4WBXJBQTFyvAB3DBXQwALrvaBdSTiMzjREyWRaBhDRERHjyIIAJxFIEnIp9I
67oEaIgkbksBIFcW75GyCIuQqtGziLTg8iIwHWOCgOcCJqgwLqV24Qu/Tc0coWz5urEYGDAc
sctAlvPnpUQ0jiGvPikaaTyADv1BCuqyrGP4mv3E17NP8ZZXQv+RwBE+68mSgv9lYOGRnw8Q
0PccBPcpaMuDJtzWnwmjtdDKLQblg8EA25F3IDsJBnGCTEHsoh8MEkJXoYqvtaCfhi/sJh5U
G13AwG3omDhVAEQWaSSRj4Vi4QkMXjDWRC++EKGEFK6wZI1HZejbCyxugyEGTRb1pQiyzcCe
e9fFN8N8EtpnJY292XgCji+kpRkb8YA3glRnycAeciIoxxwMFdBXwXRXxpmlbVu+8JQsToxw
W3AmPCqcCPZkZ9yke3XIy6AoLNCKBBRQIMGIiyn65qK5NarCACsttwg7eZhgZ6Qj9JWNprI0
ZNdNFu1CgHULBFkTL64xodaFcPZ4o6sqTNonCWVtOEKGk4YFksMuvJJWQBbYsJPkiCQppQUl
jxJgB0iE4Senli1Ye4Kn48a0C6iPctTtiYTBdWAJJOFjEparPhuvDFr95ZBZLyxgVFIwCSVw
vXXl1Q+8/ah5XcFzQqvCjpcCdgFN9RCSlAGpitCTxOpGOYICJhNTQMoGOQASLSTjNUo5o1Ds
1CjChQAAOw==
--$boundary--
HEADER

 my $lastday;
 my $db0=$main::DB{stats}->Query("
	SELECT *
	FROM TOM.a110_weblog_day
	WHERE domain_sub='$tom::H'
	ORDER BY reqdatetime DESC LIMIT 1");
 if (my %db0_line=$db0->fetchhash)
 {
  $db0_line{reqdatetime}=~s/ \d\d:\d\d:\d\d$//;
  $lastday=$db0_line{reqdatetime};
 }

 $email =~ s|<%main-header%>|Štatistiky pre doménu $tom::H|;
 $email =~ s|<%term%>|za 24 hodín pre deň $lastday|;

 my $doc;

 
  $doc.="\n";
  $doc.="domain: $tom::H\n";
  #$doc.="hour   visits     IPs   users   sess.\n";
  $doc.="hour   av/dv/fv            IPs   users   sess.\n";
  
  
  my $max;
  my $min;
  my $db1=$main::DB{stats}->Query("
	SELECT *
	FROM TOM.a110_weblog_hour
	WHERE domain_sub='$tom::H' AND reqdatetime LIKE '$lastday%'");
  while (my %db1_line=$db1->fetchhash)
  {
   $max=$db1_line{visits} if $max<$db1_line{visits};
   $min=$db1_line{visits} unless $min;
   $min=$db1_line{visits} if $min>$db1_line{visits};
  }

  my $db1=$main::DB{stats}->Query("
	SELECT *
	FROM TOM.a110_weblog_hour
	WHERE domain_sub='$tom::H' AND reqdatetime LIKE '$lastday%'
	ORDER BY reqdatetime DESC
	LIMIT 24");
  while (my %db1_line=$db1->fetchhash)
  {
   #$db1_line{reqdatetime}=~s/ \d\d:\d\d:\d\d$//;
   $db1_line{reqdatetime}=~s/^\d\d\d\d\-\d\d\-\d\d (.*?):\d\d$/\1/;
   $doc.=$db1_line{reqdatetime};
   #$doc.=" ".sprintf("%7s",$db1_line{visits});
   $doc.="  ".sprintf("%-15s",$db1_line{visits}."/".$db1_line{visits_direct}."/".$db1_line{visits_firstpage});
   $doc.=" ".sprintf("%7s",$db1_line{IPs});
   $doc.=" ".sprintf("%7s",$db1_line{IDhashs});
   $doc.=" ".sprintf("%7s",$db1_line{IDsessions});

   my $fake_max=$max-$min;
   $fake_max=1 unless $fake_max;
   my $fake_this=$db1_line{visits}-$min;

   my $perc0=int(($db1_line{visits}/($max/100))/3);
   my $perc=int(($fake_this/($fake_max/100))/3);

   $doc.=" #"."#" x $perc0." ($db1_line{visits})";

   #$doc.=" (".$db1_line{load_proc}."/".$db1_line{load_req}.") ";

   $doc.="\n";
  }

  
  
  
  
  
  
  
  

  $doc.="\n";
  $doc.="domain: $tom::H\n";
  #$doc.="hour   visits     IPs   users   sess.\n";
  $doc.="day    av/dv/fv                 IPs   users   sess.\n";
  
  my $max;
  my $min;
  my $db1=$main::DB{stats}->Query("
	SELECT *
	FROM TOM.a110_weblog_day
	WHERE domain_sub='$tom::H'
	ORDER BY reqdatetime DESC
	LIMIT 31
	");
  while (my %db1_line=$db1->fetchhash)
  {
   $max=$db1_line{visits} if $max<$db1_line{visits};
   $min=$db1_line{visits} unless $min;
   $min=$db1_line{visits} if $min>$db1_line{visits};
  }

  my $db1=$main::DB{stats}->Query("
	SELECT *
	FROM TOM.a110_weblog_day
	WHERE domain_sub='$tom::H'
	ORDER BY reqdatetime DESC
	LIMIT 31");
  while (my %db1_line=$db1->fetchhash)
  {
   #$db1_line{reqdatetime}=~s/ \d\d:\d\d:\d\d$//;
   $db1_line{reqdatetime}=~s/^\d\d\d\d\-(\d\d\-\d\d).*$/\1/;
   $doc.=$db1_line{reqdatetime};
   #$doc.=" ".sprintf("%7s",$db1_line{visits});
   $doc.="  ".sprintf("%-20s",$db1_line{visits}."/".$db1_line{visits_direct}."/".$db1_line{visits_firstpage});
   $doc.=" ".sprintf("%7s",$db1_line{IPs});
   $doc.=" ".sprintf("%7s",$db1_line{IDhashs});
   $doc.=" ".sprintf("%7s",$db1_line{IDsessions});

   my $fake_max=$max-$min;
   $fake_max=1 unless $fake_max;
   my $fake_this=$db1_line{visits}-$min;

   my $perc0=int(($db1_line{visits}/($max/100))/3);
   my $perc=int(($fake_this/($fake_max/100))/3);

   $doc.=" #"."#" x $perc0." ($db1_line{visits})";

   #$doc.=" (".$db1_line{load_proc}."/".$db1_line{load_req}.") ";

   $doc.="\n";
  }
  
  
 $doc.=<<"HEADER";
 
av = all visits
dv = direct visits
fv = fistpage visits
HEADER
  


 #print $doc."\n";

 #print $doc; return 1;


 $email=~s|<%BODY%>|$doc|;
 #$email=~s|<%FROM%>|"$CRON::core_uname_n($tom::H)" <TOM\@webcom.sk>|;
 use Utils::datetime;
 #$email=~s|<%DATE%>|$Utils::datetime::DAYS{en}[$cron::Twday], $cron::Tmday $Utils::datetime::MONTHS{en}[$cron::Tmom-1] $cron::Fyear $cron::Fhour:$cron::Fmin:$cron::Fsec +-200|g;

	#$env{to_email} = $TOM::contact{'stats'}.";".$TOM::contact{'TOM'};
 #$env{to_email}=$TOM::contact_admin.";".$TOM::contact_operator.";".$TOM::contact_director.";".$TOM::contact_stats;
 my %env0;
 foreach (split(';',$env{to_email})){$env0{$_}++;}
 $env{to_email}="";foreach (sort keys %env0){$env{to_email}.=$_.";" if $_}$env{to_email}=~s|;$||;
 $env{to_email_parse}=$env{to_email};$env{to_email_parse}=~s|;|>,<|g;$env{to_email_parse}="<".$env{to_email_parse}.">";
 $email=~s|<%TO%>|$env{to_email_parse}|g;

# print "send to $env{to_email_parse}\n";

#=head1

# print "insert TOM.a130_send\n";
 #return 1;
 #print $email;
# return 1;

#=head1

#return 1;

	if
	(
		# sendtime='$main::time_current'
		# priority=0
		# from_name='CRON'
		# from_email='TOM\@$TOM::hostname'
		# from_host='$tom::H'
		# from_service='a110' a400 a300
		# to_name = ''
 
		$main::DB{main}->Query("
			INSERT INTO TOM.a130_send
			(
				sendtime,
				priority,
				from_name,
				from_email,
				from_host,
				from_service,
				to_name,
				to_email,
				body)
			VALUES	(
				'$main::time_current',
				'0',
				'CRON',
				'TOM\@$TOM::hostname',
				'$tom::H',
				'a110',
				'',
				'$env{to_email}',
				'$email'
				)"
		)
	)
	{
		main::_log(9," ok, email sended");
	}
	else
	{
		main::_log(9," :((, email not sended");
	}
#=cut




 return 1}

1;
