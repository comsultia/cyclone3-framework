#!/bin/perl
# USE UTF-8 !!!
package CRON::module;
use Utils::datetime;
use strict;


sub execute
{
 my %env=@_;
 
 if ($cron::P eq $CRON::P)
 {
  CRON::debug::log(5,"WARN: global use, using database $TOM::DB_name_STAT, ALL DOMAINS!!!");
  $env{sel}="";
  $env{tbl}="Ca110_weblog_rqs";
  $env{t}="C";
 }
 else
 {
  CRON::debug::log(5,"WARN: local(master) use, using database $TOM::DB_name_STAT, domain $tom::H_cookie");
  $env{sel}="domain='$tom::H_cookie'";
  $env{tbl}="a110_weblog_rqs";
 }

 # zmenit $datetime1;
 my %dates = Utils::datetime::ctodatetime($cron::time_current-86400, format=>"1");
 my $datetime1="$dates{year}-$dates{mom}-$dates{mday}";
 CRON::debug::log(5,"this day \"$datetime1\"");
 
 my $var="
	SELECT IDsession,domain_sub
	FROM $TOM::DB_name_STAT.$env{tbl}
	WHERE	domain='$tom::H_cookie' AND
			reqdatetime LIKE '$datetime1%' AND
			IDsession<>'' AND
			reqtype='B'
	GROUP BY IDsession,domain_sub
	ORDER BY IDsession,domain_sub
	LIMIT 1000
	";
 my $db0=$main::DBH->Query($var);
 my %domain=();
 my %domain_0=();
 my %domains=();
 #my %domains_0=();
 my $last;
 while (my %db0_line=$db0->fetchhash)
 {
  if ($last ne $db0_line{IDsession})
  {
   foreach my $key0(keys %domain)
   {
    foreach my $key1(keys %domain)
    {
     next if $key0 eq $key1;
     print " +$key0 -> $key1\n";
     $domains{$key0}{$key1}++;
    }
   }
   foreach (keys %domain){delete $domain{$_};}
  }
  
  $domain{$db0_line{domain_sub}}++;
  $domain_0{$db0_line{domain_sub}}++;
  
  $last=$db0_line{IDsession};
  print "$db0_line{IDsession}, $db0_line{domain_sub}\n";
 }
 
 print "\n";
   
 my $loop;
 foreach my $key0(sort keys %domains)
 {
  $loop++;
  print ";".$key0;
 }
 print "\n";
 
 my $loop0;
 foreach my $key0(sort keys %domains)
 {$loop0++;
  print $key0.";";
  my $loop1;
  foreach my $key1(sort keys %domains)
  {$loop1++;
   #next if $key0 eq $key1;
   print $domains{$key0}{$key1}."(".((int(($domains{$key0}{$key1}/($domain_0{$key0}/100))*100))/100)."%,".((int(($domains{$key0}{$key1}/($domain_0{$key1}/100))*100))/100)."%);";
   #print " +$key0 -> $key1 [ $domains{$key0}{$key1} ]\n";
  }
  print "\n";
 } 
 
 
 
 
 return 1}

1;
