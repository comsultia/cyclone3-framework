#!/usr/bin/perl
# áéíóú - USE UTF-8 !!!
package CRON::module;
#use App::400;
#use App::400::SQL::a400;

#use SVGraph;
use SVGraph::2D::lines;
#use SVGraph::2D::columns;
#use SVGraph::2D::ring;

#use Net::HTTP::LiteAgent;

use Utils::datetime;

use strict;

sub execute
{
 my %env=@_;
 
 Database::connect::multi('stats') || die "cannot connect all databases";
 
 $main::DB{stats}->selectdb("TOM");
 
# print "ideeeeeeeem\n";

#SELECT reqdatetime,AVG(load_1min),AVG(load_5min),AVG(load_15min) FROM `Ca110_load_min` WHERE reqdatetime>'' GROUP BY substring(reqdatetime,1,13) ORDER BY reqdatetime 
 
 print "min\n";

 my $graf=SVGraph::2D::lines->new(
	title		=>	"Load AVG on server (minutes)",
#	type		=>	"normal",	# normal/stacked(spojene)/percentage
#	type		=>	"stacked",	# normal/stacked(spojene)
#	type		=>	"overlap",	# normal/stacked(spojene)	
	x		=>	1000,
	y		=>	400,

	show_legend		=>	1, # show legend of Columns
#	show_points		=>	1,
#	show_points_middle	=>	1,
	show_lines			=>	1,
#	show_lines_smooth	=>	1,
#	show_areas		=>	1,
#	show_lines_smooth_range	=>	1,
#	show_data			=>	1,
#	show_data_background=>	1,

#	grid_y_scale_minimum		=>	5000.00, # zaciname od nuly
#	grid_y_scale_maximum		=>	15.00, #
#	grid_y_main_spacing			=>	0.10,

#	grid_y_main_lines			=>	10, # number of lines
	show_grid_x		=>	1,
);
my %columns;

#$columns{load_1min}=$graf->addColumn(title=>"1m AVG load");
$columns{load_1min}=$graf->addColumn(title=>"1m AVG load",showa_area=>1,color=>'yellow');
$columns{load_5min}=$graf->addColumn(title=>"5m AVG load",color=>'gold');
$columns{load_15min}=$graf->addColumn(title=>"15m AVG load",color=>'red');

$graf->addValueMark(1,
	front			=>1,
	show_label		=>1,
#	size			=>1.5,
	color			=>"red",
	);
$graf->addValueMark(0.5,
	front			=>1,
	show_label		=>1,
#	size			=>1.5,
	color			=>"yellow",
	);

#$graf->addValueMarkArea(1,
#	end			=>	10,
#	front			=> 0,
#	color			=> "red",
#	);
#$graf->addValueMarkArea(0.5,
#	end			=>	1,
#	front			=> 0,
#	color			=> "yellow",
#	);

my $from=60*24*1;
my $db0=$main::DB{stats}->Query("
	SELECT *
	FROM TOM.a110_load_min
	ORDER BY reqdatetime DESC
	LIMIT $from
");

#my $step;
while (my %db0_line=$db0->fetchhash)
{
 #$step++;
 #next if ($step/2 == int($step/2));
 #$db0_line{reqdatetime}=~s|:00$||;
 my @date=($db0_line{reqdatetime}=~/^(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)/);  
 my $label=$date[2].".".$date[1].". ".$date[3].":".$date[4];  
 
 #print "-$label\n";
 
 $graf->addRowLabelBegin($label); 
# $columns{load_1min}->addData($db0_line{reqdatetime},$db0_line{load_1min});
# $columns{load_1min}->addData($label,$db0_line{load_1min});
 $columns{load_1min}->addData($label,$db0_line{load_1min});
 $columns{load_5min}->addData($label,$db0_line{load_5min});
 $columns{load_15min}->addData($label,$db0_line{load_15min});
# $columns{load_req}->addData($db0_line{reqdatetime},($db0_line{load_req}-$db0_line{load_proc}));

 $graf->addRowMark($label,show_label=>1,colora=>"red") if $db0_line{reqdatetime}=~/ 00:00:00$/;
 
}

$graf->addValueMark($columns{load_1min}->GetAVG(),
	front			=>1,
	right			=>1,
	show_label		=>1,
	show_label_text	=>	int($columns{load_1min}->GetAVG()*1000)/1000,
#	size			=>1.5,
	color			=>"red",
	);

#=head1
eval
{
 alarm(50);
 open HND,">$cron::P/!www/load_min.svg" or die "$!";
 my $out=$graf->prepare();
 $out=~s|[\s]+</text>|</text>|g;
 print HND $out; 
 alarm(0);
};
if ($@)
{
 die "error! $@\n";
}



 print "hour\n";

 my $graf=SVGraph::2D::lines->new(
	title		=>	"Load AVG on server (hours)",
#	type		=>	"normal",	# normal/stacked(spojene)/percentage
#	type		=>	"stacked",	# normal/stacked(spojene)
#	type		=>	"overlap",	# normal/stacked(spojene)	
	x		=>	1000,
	y		=>	400,

	show_legend		=>	1, # show legend of Columns
	show_points		=>	1,
#	show_points_middle	=>	1,
	show_lines			=>	1,
#	show_lines_smooth	=>	1,
	show_areas		=>	1,
	show_areas_opacity	=>	0.5,
#	show_lines_smooth_range	=>	1,
#	show_data			=>	1,
#	show_data_background=>	1,

#	grid_y_scale_minimum		=>	5000.00, # zaciname od nuly
#	grid_y_scale_maximum		=>	15.00, #
#	grid_y_main_spacing			=>	0.10,

#	grid_y_main_lines			=>	10, # number of lines
	show_grid_x		=>	1,
);
my %columns;

#$columns{load_1min}=$graf->addColumn(title=>"1m AVG load");
$columns{load_1min}=$graf->addColumn(title=>"1m AVG load",color=>'red');
#$columns{load_15min}=$graf->addColumn(title=>"15m AVG load");

$graf->addValueMark(1,
	front			=>1,
	show_label		=>1,
#	size			=>1.5,
	color			=>"red",
	);
$graf->addValueMark(0.5,
	front			=>1,
	show_label		=>1,
#	size			=>1.5,
	color			=>"yellow",
	);

#$graf->addValueMarkArea(1,
#	end			=>	10,
#	front			=> 0,
#	color			=> "red",
#	);
#$graf->addValueMarkArea(0.5,
#	end			=>	1,
#	front			=> 0,
#	color			=> "yellow",
#	);

my $from=24*7*2;
my $db0=$main::DB{stats}->Query("
	SELECT *
	FROM TOM.a110_load_hour
	ORDER BY reqdatetime DESC
	LIMIT $from
");

while (my %db0_line=$db0->fetchhash)
{
 #$db0_line{reqdatetime}=~s|:00$||;
 my @date=($db0_line{reqdatetime}=~/^(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)/);  
 my $label=$date[2].".".$date[1].". ".$date[3].":".$date[4];  
 
 #print "-$label\n";
 
 $graf->addRowLabelBegin($label); 
# $columns{load_1min}->addData($db0_line{reqdatetime},$db0_line{load_1min});
# $columns{load_1min}->addData($label,$db0_line{load_1min});
 $columns{load_1min}->addData($label,$db0_line{load_1min});
# $columns{load_15min}->addData($label,$db0_line{load_15min});
# $columns{load_req}->addData($db0_line{reqdatetime},($db0_line{load_req}-$db0_line{load_proc}));

 $graf->addRowMark($label,show_label=>1,colora=>"red") if $db0_line{reqdatetime}=~/ 00:00:00$/;
 
}

#=head1
eval
{
 alarm(50);
 open HND,">$cron::P/!www/load_hour.svg" or die "$!";
 my $out=$graf->prepare();
 $out=~s|[\s]+</text>|</text>|g;
 print HND $out; 
 alarm(0);
};
if ($@)
{
 die "error! $@\n";
}




 print "day\n";


 my $graf=SVGraph::2D::lines->new(
	title		=>	"Load AVG on server (days)",
#	type		=>	"normal",	# normal/stacked(spojene)/percentage
#	type		=>	"stacked",	# normal/stacked(spojene)
#	type		=>	"overlap",	# normal/stacked(spojene)	
	x		=>	1000,
	y		=>	400,

	show_legend		=>	1, # show legend of Columns
	show_points		=>	1,
#	show_points_middle	=>	1,
#	show_lines			=>	1,
	show_lines_smooth	=>	1,
	show_areas		=>	1,
	show_areas_opacity	=>	0.5,
#	show_lines_smooth_range	=>	1,
	show_data			=>	1,
	show_data_background=>	1,

#	grid_y_scale_minimum		=>	5000.00, # zaciname od nuly
#	grid_y_scale_maximum		=>	15.00, #
#	grid_y_main_spacing			=>	0.10,

#	grid_y_main_lines			=>	10, # number of lines
	show_grid_x		=>	1,
);
my %columns;

#$columns{load_1min}=$graf->addColumn(title=>"1m AVG load");
$columns{load_1min}=$graf->addColumn(title=>"1m AVG load",color=>'red');
#$columns{load_15min}=$graf->addColumn(title=>"15m AVG load");

$graf->addValueMark(1,
	front			=>1,
	show_label		=>1,
#	size			=>1.5,
	color			=>"red",
	);
$graf->addValueMark(0.5,
	front			=>1,
	show_label		=>1,
#	size			=>1.5,
	color			=>"yellow",
	);

#$graf->addValueMarkArea(1,
#	end			=>	10,
#	front			=> 0,
#	color			=> "red",
#	);
#$graf->addValueMarkArea(0.5,
#	end			=>	1,
#	front			=> 0,
#	color			=> "yellow",
#	);

my $from=7*4;
my $db0=$main::DB{stats}->Query("
	SELECT *
	FROM TOM.a110_load_day
	ORDER BY reqdatetime DESC
	LIMIT $from
");

while (my %db0_line=$db0->fetchhash)
{
 #$db0_line{reqdatetime}=~s|:00$||;
 my @date=($db0_line{reqdatetime}=~/^(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)/);  
 my $label=$date[2].".".$date[1].". ".$date[3].":".$date[4];  
 
 #print "-$label\n";
 
 $graf->addRowLabelBegin($label); 
# $columns{load_1min}->addData($db0_line{reqdatetime},$db0_line{load_1min});
# $columns{load_1min}->addData($label,$db0_line{load_1min});
 $db0_line{load_1min}=int($db0_line{load_1min}*100)/100;
 $columns{load_1min}->addData($label,$db0_line{load_1min});
# $columns{load_15min}->addData($label,$db0_line{load_15min});
# $columns{load_req}->addData($db0_line{reqdatetime},($db0_line{load_req}-$db0_line{load_proc}));

 $graf->addRowMark($label,show_label=>1,colora=>"red") if $db0_line{reqdatetime}=~/01 00:00:00$/;
 
}

#=head1
eval
{
 alarm(50);
 open HND,">$cron::P/!www/load_day.svg" or die "$!";
 my $out=$graf->prepare();
 $out=~s|[\s]+</text>|</text>|g;
 print HND $out; 
 alarm(0);
};
if ($@)
{
 die "error! $@\n";
}













return 1}



1;























