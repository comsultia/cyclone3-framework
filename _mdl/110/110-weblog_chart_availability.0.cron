#!/usr/bin/perl
# áéíóú - USE UTF-8 !!!
package CRON::module;


use SVGraph::2D::lines;
use SVGraph::2D::columns;
use Utils::datetime;
use DateTime;

use strict;

sub execute
{
	my %env=@_;
	
	Database::connect::multi('stats') || die "cannot connect all databases";
	
	if ($cron::P eq $CRON::P){$cron::ERR="WARN: this cron is only for local use!!!";return undef}
	$env{domain}=$tom::H unless exists $env{domain};

	if ($env{hour})
	{
		my $graf=SVGraph::2D::lines->new(
			title		=>	"Web publisher availability - average time for page generation (hourly)",
		#	type		=>	"normal",	# normal/stacked(spojene)/percentage
		#	type		=>	"stacked",	# normal/stacked(spojene)
		#	type		=>	"stacked",	# normal/stacked(spojene)	
			x		=>	750,
			y		=>	300,
		
			show_legend		=>	1, # show legend of Columns
		#	show_points		=>	1,
		#	show_points_middle	=>	1,
		#	show_lines			=>	1,
			show_lines_smooth	=>	1,
		#	show_areas		=>	1,
		#	show_areas_opacity	=>	0.2,
		#	show_lines_smooth_range	=>	1,
		#	show_data			=>	1,
		#	show_data_background=>	1,
		
		#	grid_y_scale_minimum		=>	000.00, # zaciname od nuly
		#	grid_y_scale_maximum		=>	15.00, #
		#	grid_y_main_spacing			=>	0.10,
			grid_y_suffix => "s",
			show_grid_x		=>	1,
		);
		
		my %columns;
 
		$columns{'speed'}=$graf->addColumn(title=>"Average time",'color'=>"red");
		$columns{'speed2'}=$graf->addColumn(title=>"Processor time",'color'=>"yellow");
		
		for my $hour(0..24)
		{
			my $from=$main::time_current-86400+(3600*$hour)-3600;
			my %date=Utils::datetime::ctodatetime($from,format=>1);
			my $label="$date{mday}.$date{mom}. $date{hour}:00";
			$graf->addRowLabel($label);
		}
		
		my $from=$main::time_current-(86400*1)-3600;
		my %date=Utils::datetime::ctodatetime($from,format=>1);
		$from="$date{year}-$date{mom}-$date{mday} $date{hour}";
		
		main::_log("read data to hour chart from $from");
		
		my $db0=$main::DB{stats}->Query("
			SELECT *
			FROM
				TOM.a110_weblog_hour
			WHERE
				domain='$tom::Hm' AND
				domain_sub='$env{domain}' AND
				reqdatetime>'$from'
			ORDER BY
				reqdatetime ASC
		");
		
		$graf->addValueMarkArea(undef,
			end => "0.3",
			front => 0,
			color => "green",
		);
		$graf->addValueMark(0.3,
			front => 0,
			show_label => 1,
			show_label_text => "bussiness time zone",
			right => 1,
		#	size			=>1.5,
			color => "green",
		);

		while (my %db0_line=$db0->fetchhash)
		{
			my @date=($db0_line{reqdatetime}=~/^(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)/);  
			my $label=$date[2].".".$date[1].". ".$date[3].":".$date[4];
			
			main::_log("add label $label");
			
			$db0_line{'load_req'}=int($db0_line{'load_req'}*100)/100;
			$db0_line{'load_proc'}=int($db0_line{'load_proc'}*100)/100;
			
			$columns{'speed'}->addData($label,$db0_line{'load_req'});
			$columns{'speed2'}->addData($label,$db0_line{'load_proc'});
			
			if ($db0_line{reqdatetime}=~/00:00:00$/)
			{
				$graf->addRowMark($label,
				#front			=>1,
				show_label		=>1,
				#size			=>1.5,
				);
			}
		}
		
		eval
		{
			alarm(15);
			$env{hour_file}="availability_hour.svg" unless $env{hour_file};
			open HND,">$cron::P/_data/".$env{hour_file} or die "$!";
			my $out=$graf->prepare();
			$out=~s|[\s]+</text>|</text>|g;
			print HND $out; 
			alarm(0);
		};
		if ($@)
		{
			die "error! $@\n";
		}
	}
 
# return 1;
	if ($env{day})
	{
		my $graf=SVGraph::2D::lines->new(
			title		=>	"Web publisher availability - average time for page generation (daily)",
		#	type		=>	"normal",	# normal/stacked(spojene)/percentage
		#	type		=>	"stacked",	# normal/stacked(spojene)
		#	type		=>	"percentage",	# normal/stacked(spojene)	
			x		=>	750,
			y		=>	300,
		
			show_legend		=>	1, # show legend of Columns
#			show_points		=>	1,
		#	show_points_middle	=>	1,
		#	show_lines			=>	1,
			show_lines_smooth	=>	1,
#			show_areas		=>	1,
#			show_areas_opacity	=>	0.5,
		#	show_lines_smooth_range	=>	1,
#			show_data			=>	1,
#			show_data_background=>	1,
			grid_y_suffix => "s",
		
			grid_y_scale_minimum		=>	000.00, # zaciname od nuly
#			grid_y_scale_maximum		=>	1.500, #
#			grid_y_main_spacing			=>	0.20,
		
			show_grid_x		=>	1,
		);
		
		my %columns;
		
		$columns{'speed'}=$graf->addColumn(title=>"Average time",'color'=>"red");
		$columns{'speed2'}=$graf->addColumn(title=>"Processor time",'color'=>"yellow");
		#$columns{'visitors_return'}=$graf->addColumn(title=>"Returned visitors",'color'=>"azure",show_data=>1,show_data_background=>1);
		
		my $days=7*4;
		for my $day(0..$days)
		{
			my $from=$main::time_current-(86400*($days+1))+(86400*$day);
			my %date=Utils::datetime::ctodatetime($from,format=>1);
			my $label="$date{mday}.$date{mom}.$date{year}";
			$graf->addRowLabel($label);
		}
		
		my $from=$main::time_current-(86400*($days+1));
		my %date=Utils::datetime::ctodatetime($from,format=>1);
		$from="$date{year}-$date{mom}-$date{mday}";
		
		my $db0=$main::DB{stats}->Query("
			SELECT *
			FROM
				TOM.a110_weblog_day
			WHERE
				domain='$tom::Hm' AND
				domain_sub='$env{domain}' AND
				reqdatetime>'$from'
			ORDER BY
				reqdatetime DESC");
=head1
 $graf->addValueMark(0.3,
	front			=>0,
	show_label		=>1,
#	size			=>1.5,
	color			=>"red",
	);
$graf->addValueMark(0.2,
	front			=>0,
	show_label		=>1,
#	size			=>1.5,
	color			=>"yellow",
	);
=cut
		$graf->addValueMarkArea(undef,
			end => "1",
			front => 0,
			color => "green",
		);
		$graf->addValueMark(1,
			front => 0,
			show_label => 1,
			show_label_text => "guarantee",
			right => 1,
		#	size			=>1.5,
			color => "green",
		);
#=cut
		while (my %db0_line=$db0->fetchhash)
		{
			my @date=($db0_line{reqdatetime}=~/^(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)/);  
			my $label=$date[2].".".$date[1].".".$date[0];
			
			$db0_line{'load_req'}=int($db0_line{'load_req'}*100)/100;
			$db0_line{'load_proc'}=int($db0_line{'load_proc'}*100)/100;
			
			$columns{'speed'}->addData($label,$db0_line{'load_req'});
			$columns{'speed2'}->addData($label,$db0_line{'load_proc'});
			#$columns{visitors_new}->addData($label,$db0_line{'IDhashs'}-$db0_line{'IDhashs_return'});
			
			if ($db0_line{reqdatetime}=~/01 00:00:00$/)
			{
				$graf->addRowMark($label,
			#	front			=>1,
				show_label		=>1,
			#	size			=>1.5,
				);
			}
		}
		
		eval
		{
			alarm(15);
			$env{day_file}="availability_day.svg" unless $env{day_file};
			
			print ">$cron::P/_data/".$env{day_file}."!\n";
		
			open HND,">$cron::P/_data/".$env{day_file} or die "$!";
			my $out=$graf->prepare();
			$out=~s|[\s]+</text>|</text>|g;
			print HND $out; 
			alarm(0);
		};
		if ($@)
		{
			die "error! $@\n";
		}
 }
 
 
 
 if ($env{week})
 {
	my $graf=SVGraph::2D::columns->new(
		title		=>	"Visitors on $env{domain} (weekly)",
	#	type		=>	"normal",	# normal/stacked(spojene)/percentage
	#	type		=>	"stacked",	# normal/stacked(spojene)
		type		=>	"stacked",	# normal/stacked(spojene)	
		x		=>	750,
		y		=>	300,
	
		show_legend		=>	1, # show legend of Columns
	#	show_points		=>	1,
	#	show_points_middle	=>	1,
	#	show_lines			=>	1,
	#	show_lines_smooth	=>	1,
	#	show_areas		=>	1,
	#	show_areas_opacity	=>	0.2,
	#	show_lines_smooth_range	=>	1,
	#	show_data			=>	1,
	#	show_data_background=>	1,
	
		grid_y_scale_minimum		=>	000.00, # zaciname od nuly
	#	grid_y_scale_maximum		=>	15.00, #
	#	grid_y_main_spacing			=>	0.10,
	
		show_grid_x		=>	1,
	);
	
	my %columns;
 
	$columns{'visitors_new'}=$graf->addColumn(title=>"New visitors",'color'=>"blue", show_data_summary=>1,show_data_background=>1);
	$columns{'visitors_return'}=$graf->addColumn(title=>"Returned visitors",'color'=>"azure");
	
	
	my $dt = DateTime->new
	(
		'year' => $main::Fyear,
		'month' => $main::Fmom,
		'day' => $main::Fmday
	);
	
	#my $a=``;
	
	my $weeks=30;
	
	$dt->add('days'=>-7*$weeks);
	
	for (1..$weeks)
	{
		
		my ($week_year, $week_number) = $dt->week;
		my $label=$week_year."/".sprintf("%02d",$week_number);
		$graf->addRowLabel($label);
		
		main::_log("add $label");
		
		my $db0=$main::DB{stats}->Query("
			SELECT
				*
			FROM
				TOM.a110_weblog_week
			WHERE
				reqdatetime='$label' AND
				domain='$tom::Hm' AND
				domain_sub='$env{'domain'}'
			ORDER BY reqdatetime ASC
		");
		if (my %db0_line=$db0->fetchhash())
		{
			$columns{'visitors_return'}->addData($label,$db0_line{'IDhashs_return'});
			$columns{'visitors_new'}->addData($label,$db0_line{'IDhashs'}-$db0_line{'IDhashs_return'});
		}
		
		$dt->add('days'=>7);
	}
	
	eval
	{
		alarm(15);
		$env{week_file}="visitors_week.svg" unless $env{week_file};
		open HND,">$cron::P/_data/".$env{week_file} or die "$!";
		my $out=$graf->prepare();
		$out=~s|[\s]+</text>|</text>|g;
		print HND $out; 
		alarm(0);
	};
	if ($@)
	{
		die "error! $@\n";
	}
 
 }
 
 return 1}



1;























