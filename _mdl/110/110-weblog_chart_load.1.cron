#!/usr/bin/perl
# áéíóú - USE UTF-8 !!!
package CRON::module;


use SVGraph::2D::lines;
use Utils::datetime;

use strict;

sub execute
{
 my %env=@_;
 
 Database::connect::multi('stats') || die "cannot connect all databases";
 
 $main::DB{stats}->selectdb("TOM");
 
 
 if ($cron::P eq $CRON::P){$cron::ERR="WARN: this cron is only for local use!!!";return undef}
 #if ($TOM::DB_name_STAT eq $TOM::DB_name_TOM){$env{t}="C";}
 $env{domain}=$tom::H unless exists $env{domain};

 
 if ($env{min}){
 my $graf=SVGraph::2D::lines->new(
	title		=>	"TOM3 availability on server (minute)",
	reload	=>	60,
#	type		=>	"normal",	# normal/stacked(spojene)/percentage
#	type		=>	"stacked",	# normal/stacked(spojene)
#	type		=>	"percentage",	# normal/stacked(spojene)	
	x		=>	1000,
	y		=>	400,

	show_legend		=>	1, # show legend of Columns
#	show_points		=>	1,
#	show_points_middle	=>	1,
#	show_lines			=>	1,
	show_lines_smooth	=>	1,
#	show_areas		=>	1,
#	show_areas_opacity	=>	0.2,
#	show_lines_smooth_range	=>	1,
#	show_data			=>	1,
#	show_data_background=>	1,

	grid_y_scale_minimum		=>	000.00, # zaciname od nuly
#	grid_y_scale_maximum		=>	0.3, #
#	grid_y_main_spacing			=>	0.10,

	show_grid_x		=>	1,
 );
 my %columns;
 
 $columns{load_req}=$graf->addColumn(title=>"wait time (to database)",color=>"blue");
# $columns{load_req_max}=$graf->addColumn(title=>"MAX wait time",color=>"azure");
 $columns{load_proc}=$graf->addColumn(title=>"processor time",color=>"red");
# $columns{load_proc_max}=$graf->addColumn(title=>"MAX processor time",color=>"yellow");
 my $hours=2;
 for my $hour(0..60*$hours)
 {
  my $from=$main::time_current-(3600*$hours)+(60*$hour)-60;
  my %date=Utils::datetime::ctodatetime($from,format=>1);
  my $label="$date{mday}.$date{mom}. $date{hour}:$date{min}";
  #CRON::debug::log(8,"create label $label");
  $graf->addRowLabel($label);
#  $columns{load_proc}->addData($label,0);
#  $columns{load_req}->addData($label,0);
 }

 my $from=$main::time_current-(3600*$hours)-60;
 my %date=Utils::datetime::ctodatetime($from,format=>1);
 $from="$date{year}-$date{mom}-$date{mday} $date{hour}:$date{min}";
 #print "=$from\n";
  
 CRON::debug::log(5,"read data to hour chart from $from");

 my $db0=$main::DB{stats}->Query("
	SELECT reqdatetime, AVG(load_req) AS load_req, AVG(load_proc) AS load_proc
	FROM $TOM::DB_name_STAT.$env{t}a110_weblog_min
	WHERE reqdatetime>'$from'
	GROUP BY reqdatetime
	ORDER BY reqdatetime ASC
	");
# my $db0=$main::DBH->Query("
#	SELECT *
#	FROM markiza_sk.a110_weblog_hour
#	WHERE domain_sub='$tom::H' AND reqdatetime>'$from'
#	ORDER BY reqdatetime ASC");

 $graf->addValueMark(0.2,
	front			=>1,
	show_label		=>1,
	show_label_text	=>"HIGH",
#	size			=>1.5,
	color			=>"red",
	);
$graf->addValueMark(0.1,
	front			=>1,
	show_label		=>1,
	show_label_text	=>"IDEAL",
#	size			=>1.5,
	color			=>"green",
	);
$graf->addValueMarkArea(0.2,
	front			=> 0,
	color			=> "red",
	);
	
$graf->addValueMarkArea(0,
	end			=> 0.1,
	front			=> 0,
	color			=> "green",
	);

 while (my %db0_line=$db0->fetchhash)
 {
  my @date=($db0_line{reqdatetime}=~/^(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)/);  
  my $label=$date[2].".".$date[1].". ".$date[3].":".$date[4];
  
  CRON::debug::log(6,"add label $label");
  
  #print "-$label\n";
  
  #$graf->addRowLabel($label);
  $db0_line{load_req}=(int($db0_line{load_req}*10000))/10000;
  $db0_line{load_proc}=(int($db0_line{load_proc}*10000))/10000;
#  $db0_line{load_proc_max}=(int($db0_line{load_proc_max}*10000))/10000;
#  $db0_line{load_req_max}=(int($db0_line{load_req_max}*10000))/10000;
  
  
  $columns{load_req}->addData($label,($db0_line{load_req}-$db0_line{load_proc}));  
#  $columns{load_req_max}->addData($label,($db0_line{load_req_max}-$db0_line{load_proc_max}));  
  $columns{load_proc}->addData($label,$db0_line{load_proc});
#  $columns{load_proc_max}->addData($label,$db0_line{load_proc_max});


#=head1
  if ($db0_line{reqdatetime}=~/00:00$/)
  {
   $graf->addRowMark($label,
#	front			=>1,
	show_label		=>1,
#	size			=>1.5,
	);
  }  
 }
 
 $graf->addValueMark($columns{load_proc}->GetAVG,
	front			=>0,
	right			=>1,
	show_label		=>1,
	show_label_text	=>(int($columns{load_proc}->GetAVG*10000)/10000)." avg",
#	size			=>1.5,
	color			=>"red",
	);

 $graf->addValueMark($columns{load_req}->GetAVG,
	front			=>0,
	right			=>1,
	show_label		=>1,
	show_label_text	=>(int($columns{load_req}->GetAVG*10000)/10000)." avg",
#	size			=>1.5,
	color			=>"blue",
	);
  
 eval
 {
  alarm(5);
  $env{min_file}="stats_chart_load_min.svg" unless $env{min_file};
  open HND,">$cron::P/!www/".$env{min_file} or die "$!";
  my $out=$graf->prepare();
  $out=~s|[\s]+</text>|</text>|g;
  print HND $out; 
  alarm(0);
 };
 if ($@)
 {
  die "error! $@\n";
 }
 }
 
 
 
 
 
 
 
 
 
 
 
 
  if ($env{min_max}){
 my $graf=SVGraph::2D::lines->new(
	title		=>	"TOM3 availability on server (minute)",
	reload	=>	60,
#	type		=>	"normal",	# normal/stacked(spojene)/percentage
#	type		=>	"stacked",	# normal/stacked(spojene)
#	type		=>	"percentage",	# normal/stacked(spojene)	
	x		=>	1000,
	y		=>	400,

	show_legend		=>	1, # show legend of Columns
#	show_points		=>	1,
#	show_points_middle	=>	1,
#	show_lines			=>	1,
	show_lines_smooth	=>	1,
#	show_areas		=>	1,
#	show_areas_opacity	=>	0.2,
#	show_lines_smooth_range	=>	1,
#	show_data			=>	1,
#	show_data_background=>	1,

	grid_y_scale_minimum		=>	000.00, # zaciname od nuly
#	grid_y_scale_maximum		=>	0.3, #
#	grid_y_main_spacing			=>	0.10,

	show_grid_x		=>	1,
 );
 my %columns;
 
# $columns{load_req}=$graf->addColumn(title=>"wait time (to database)",color=>"blue");
 $columns{load_req_max}=$graf->addColumn(title=>"MAX wait time",color=>"blue");
# $columns{load_proc}=$graf->addColumn(title=>"processor time",color=>"red");
 $columns{load_proc_max}=$graf->addColumn(title=>"MAX processor time",color=>"red");
 my $hours=2;
 for my $hour(0..60*$hours)
 {
  my $from=$main::time_current-(3600*$hours)+(60*$hour)-60;
  my %date=Utils::datetime::ctodatetime($from,format=>1);
  my $label="$date{mday}.$date{mom}. $date{hour}:$date{min}";
  #CRON::debug::log(8,"create label $label");
  $graf->addRowLabel($label);
#  $columns{load_proc}->addData($label,0);
#  $columns{load_req}->addData($label,0);
 }

 my $from=$main::time_current-(3600*$hours)-60;
 my %date=Utils::datetime::ctodatetime($from,format=>1);
 $from="$date{year}-$date{mom}-$date{mday} $date{hour}:$date{min}";
 #print "=$from\n";
  
 CRON::debug::log(5,"read data to hour chart from $from");

 my $db0=$main::DB{stats}->Query("
 	SELECT reqdatetime, MAX(load_req_max) AS load_req_max, MAX(load_proc_max) AS load_proc_max
	FROM TOM.a110_weblog_min
	WHERE reqdatetime>'$from'
	GROUP BY reqdatetime
	ORDER BY reqdatetime ASC
	");
	
	
#	SELECT *
#	FROM $TOM::DB_name_STAT.$env{t}a110_weblog_min
#	WHERE domain='$tom::Hm' AND domain_sub='$env{domain}' AND reqdatetime>'$from'
#	ORDER BY reqdatetime ASC
	
# my $db0=$main::DBH->Query("
#	SELECT *
#	FROM markiza_sk.a110_weblog_hour
#	WHERE domain_sub='$tom::H' AND reqdatetime>'$from'
#	ORDER BY reqdatetime ASC");

 $graf->addValueMark(5,
	front			=>1,
	show_label	=>1,
	show_label_text	=>"HIGH",
#	size			=>1.5,
	color			=>"red",
	);
$graf->addValueMark(1,
	front			=>1,
	show_label	=>1,
	show_label_text	=>"IDEAL",
#	size			=>1.5,
	color			=>"green",
	);
$graf->addValueMarkArea(5,
	front			=> 0,
	color			=> "red",
	);
	
$graf->addValueMarkArea(0,
	end			=> 1,
	front			=> 0,
	color			=> "green",
	);

 while (my %db0_line=$db0->fetchhash)
 {
  my @date=($db0_line{reqdatetime}=~/^(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)/);  
  my $label=$date[2].".".$date[1].". ".$date[3].":".$date[4];
  
  CRON::debug::log(6,"add label $label");
  
  #print "-$label\n";
  
  #$graf->addRowLabel($label);
#  $db0_line{load_req}=(int($db0_line{load_req}*10000))/10000;
#  $db0_line{load_proc}=(int($db0_line{load_proc}*10000))/10000;
  $db0_line{load_proc_max}=(int($db0_line{load_proc_max}*10000))/10000;
  $db0_line{load_req_max}=(int($db0_line{load_req_max}*10000))/10000;
  
  
#  $columns{load_req}->addData($label,($db0_line{load_req}-$db0_line{load_proc}));  
  $columns{load_req_max}->addData($label,($db0_line{load_req_max}-$db0_line{load_proc_max}));  
#  $columns{load_proc}->addData($label,$db0_line{load_proc});
  $columns{load_proc_max}->addData($label,$db0_line{load_proc_max});


#=head1
  if ($db0_line{reqdatetime}=~/00:00$/)
  {
   $graf->addRowMark($label,
#	front			=>1,
	show_label		=>1,
#	size			=>1.5,
	);
  }  
 }
 
 $graf->addValueMark($columns{load_proc_max}->GetAVG,
	front			=>0,
	right			=>1,
	show_label		=>1,
	show_label_text	=>(int($columns{load_proc_max}->GetAVG*10000)/10000)." avg",
#	size			=>1.5,
	color			=>"red",
	);

 $graf->addValueMark($columns{load_req_max}->GetAVG,
	front			=>0,
	right			=>1,
	show_label		=>1,
	show_label_text	=>(int($columns{load_req_max}->GetAVG*10000)/10000)." avg",
#	size			=>1.5,
	color			=>"blue",
	);
  
 eval
 {
  alarm(5);
  $env{min_max_file}="stats_chart_load_min_max.svg" unless $env{min_max_file};
  open HND,">$cron::P/!www/".$env{min_max_file} or die "$!";
  my $out=$graf->prepare();
  $out=~s|[\s]+</text>|</text>|g;
  print HND $out; 
  alarm(0);
 };
 if ($@)
 {
  die "error! $@\n";
 }
 }
 
 
 
 
 
 
 
 
 
 
 
 
 
   
 if ($env{hour}){
 my $graf=SVGraph::2D::lines->new(
	title		=>	"TOM3 availability on server (hourly)",
	reload	=>	60*10,
#	type		=>	"normal",	# normal/stacked(spojene)/percentage
	type		=>	"stacked",	# normal/stacked(spojene)
#	type		=>	"percentage",	# normal/stacked(spojene)	
	x		=>	1000,
	y		=>	400,

	show_legend		=>	1, # show legend of Columns
	show_points		=>	1,
#	show_points_middle	=>	1,
#	show_lines			=>	1,
	show_lines_smooth	=>	1,
	show_areas		=>	1,
#	show_lines_smooth_range	=>	1,
	show_data			=>	1,
	show_data_background=>	1,

	grid_y_scale_minimum		=>	000.00, # zaciname od nuly
#	grid_y_scale_maximum		=>	15.00, #
#	grid_y_main_spacing			=>	0.10,

	show_grid_x		=>	1,
 );
 my %columns;
 
 $columns{load_req}=$graf->addColumn(title=>"wait time (to database)",color=>"yellow");
 $columns{load_proc}=$graf->addColumn(title=>"processor time",color=>"turquoise");

 for my $hour(0..24)
 {
  my $from=$main::time_current-86400+(3600*$hour)-3600;
  my %date=Utils::datetime::ctodatetime($from,format=>1);
  my $label="$date{mday}.$date{mom}. $date{hour}:00";
  #CRON::debug::log(8,"create label $label");
  $graf->addRowLabel($label);
  $columns{load_proc}->addData($label,0);
  $columns{load_req}->addData($label,0);
 }

 my $from=$main::time_current-(86400*1)-3600;
 my %date=Utils::datetime::ctodatetime($from,format=>1);
 $from="$date{year}-$date{mom}-$date{mday} $date{hour}";
 #print "=$from\n";
  
 CRON::debug::log(5,"read data to hour chart from $from");

 my $db0=$main::DB{stats}->Query("
 	SELECT reqdatetime, AVG(load_req) AS load_req, AVG(load_proc) AS load_proc
	FROM TOM.a110_weblog_hour
	WHERE reqdatetime>'$from'
	GROUP BY reqdatetime
	ORDER BY reqdatetime ASC
 ");
 
#	SELECT *
#	FROM $TOM::DB_name_STAT.$env{t}a110_weblog_hour
#	WHERE domain='$tom::Hm' AND domain_sub='$env{domain}' AND reqdatetime>'$from'
#	ORDER BY reqdatetime ASC
 
# my $db0=$main::DBH->Query("
#	SELECT *
#	FROM markiza_sk.a110_weblog_hour
#	WHERE domain_sub='$tom::H' AND reqdatetime>'$from'
#	ORDER BY reqdatetime ASC");

 $graf->addValueMark(0.3,
	front			=>0,
	show_label		=>1,
#	size			=>1.5,
	color			=>"red",
	);
$graf->addValueMark(0.2,
	front			=>0,
	show_label		=>1,
#	size			=>1.5,
	color			=>"yellow",
	);
$graf->addValueMarkArea(0.3,
	front			=> 0,
	color			=> "red",
	);

 while (my %db0_line=$db0->fetchhash)
 {
  my @date=($db0_line{reqdatetime}=~/^(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)/);  
  my $label=$date[2].".".$date[1].". ".$date[3].":".$date[4];
  
  CRON::debug::log(6,"add label $label");
  
  #print "-$label\n";
  
  #$graf->addRowLabel($label);
  $db0_line{load_req}=(int($db0_line{load_req}*1000))/1000;
  $db0_line{load_proc}=(int($db0_line{load_proc}*1000))/1000;
  
  
  $columns{load_req}->addData($label,($db0_line{load_req}-$db0_line{load_proc}));  
  $columns{load_proc}->addData($label,$db0_line{load_proc});


#=head1
  if ($db0_line{reqdatetime}=~/00:00:00$/)
  {
   $graf->addRowMark($label,
#	front			=>1,
	show_label		=>1,
#	size			=>1.5,
	);
  }  
 }
 
 $graf->addValueMark(($columns{load_req}->GetAVG()+$columns{load_proc}->GetAVG()),
	front			=>1,
	right			=>1,
	show_label		=>1,
	show_label_text	=>(int(($columns{load_req}->GetAVG()+$columns{load_proc}->GetAVG())*10000)/10000)." avg",
#	size			=>1.5,
	color			=>"black",
	);
 
 eval
 {
  alarm(5);
  $env{hour_file}="stats_chart_load_hour.svg" unless $env{hour_file};
  open HND,">$cron::P/!www/".$env{hour_file} or die "$!";
  my $out=$graf->prepare();
  $out=~s|[\s]+</text>|</text>|g;
  print HND $out; 
  alarm(0);
 };
 if ($@)
 {
  die "error! $@\n";
 }
 }
 
 
 
 
 if ($env{day}){
 my $graf=SVGraph::2D::lines->new(
	title		=>	"TOM3 availability on server (daily)",
	reload	=>	60*30,
#	type		=>	"normal",	# normal/stacked(spojene)/percentage
	type		=>	"stacked",	# normal/stacked(spojene)
#	type		=>	"percentage",	# normal/stacked(spojene)	
	x		=>	1000,
	y		=>	400,

	show_legend		=>	1, # show legend of Columns
	show_points		=>	1,
#	show_points_middle	=>	1,
#	show_lines			=>	1,
	show_lines_smooth	=>	1,
	show_areas		=>	1,
#	show_areas_opacity	=>	0.8,
#	show_lines_smooth_range	=>	1,
	show_data			=>	1,
	show_data_background=>	1,

	grid_y_scale_minimum		=>	000.00, # zaciname od nuly
#	grid_y_scale_maximum		=>	15.00, #
#	grid_y_main_spacing			=>	0.10,

	show_grid_x		=>	1,
 );
 my %columns;

 $columns{load_req}=$graf->addColumn(title=>"wait time (to database)",color=>"yellow");
 $columns{load_proc}=$graf->addColumn(title=>"processor time",color=>"turquoise");
 
 
 for my $hour(0..31)
 {
  my $from=$main::time_current-(86400*32)+(86400*$hour);
  my %date=Utils::datetime::ctodatetime($from,format=>1);
  my $label="$date{mday}.$date{mom}.$date{year}";
  #CRON::debug::log(8,"create label $label");
  $graf->addRowLabel($label);
  $columns{load_proc}->addData($label,0);
  $columns{load_req}->addData($label,0);
 }

 my $from=$main::time_current-(86400*32);
 my %date=Utils::datetime::ctodatetime($from,format=>1);
 $from="$date{year}-$date{mom}-$date{mday}";
 
 
 
# my $from=1*31;
# my $db0=$main::DBH->Query("
#	SELECT *
#	FROM markiza_sk.a110_weblog_day
#	WHERE domain_sub='$tom::H' AND reqdatetime>'$from'
#	ORDER BY reqdatetime DESC");
 my $db0=$main::DB{stats}->Query("
 	SELECT reqdatetime, AVG(load_req) AS load_req, AVG(load_proc) AS load_proc
	FROM TOM.a110_weblog_day
	WHERE reqdatetime>'$from'
	GROUP BY reqdatetime
	ORDER BY reqdatetime DESC
");

	
 $graf->addValueMark(0.3,
	front			=>0,
	show_label		=>1,
#	size			=>1.5,
	color			=>"red",
	);
$graf->addValueMark(0.2,
	front			=>0,
	show_label		=>1,
#	size			=>1.5,
	color			=>"yellow",
	);

$graf->addValueMarkArea(0.3,
	front			=> 0,
	color			=> "red",
	);

 while (my %db0_line=$db0->fetchhash)
 {
  my @date=($db0_line{reqdatetime}=~/^(\d\d\d\d)-(\d\d)-(\d\d) (\d\d):(\d\d):(\d\d)/);  
  my $label=$date[2].".".$date[1].".".$date[0];  
  #print "-$label\n";
  
#  $graf->addRowLabelBegin($label);
  
  $db0_line{load_req}=(int($db0_line{load_req}*1000))/1000;
  $db0_line{load_proc}=(int($db0_line{load_proc}*1000))/1000;

  $columns{load_proc}->addData($label,$db0_line{load_proc});
  $columns{load_req}->addData($label,($db0_line{load_req}-$db0_line{load_proc}));

#=head1
  if ($db0_line{reqdatetime}=~/01 00:00:00$/)
  {
   $graf->addRowMark($label,
#	front			=>1,
	show_label		=>1,
#	size			=>1.5,
	);
  }
#=cut
  
 }

 $graf->addValueMark($graf->GetAVG,
	front			=>1,
	right			=>1,
	show_label		=>1,
	show_label_text	=>(int($graf->GetAVG*10000)/10000)." avg",
#	size			=>1.5,
	color			=>"black",
	);
 
 eval
 {
  alarm(15);
  $env{day_file}="stats_chart_load_day.svg" unless $env{day_file};
  open HND,">$cron::P/!www/".$env{day_file} or die "$!";
  my $out=$graf->prepare();
  $out=~s|[\s]+</text>|</text>|g;
  print HND $out; 
  alarm(0);
 };
 if ($@)
 {
  die "error! $@\n";
 }
 }
 
 
 
 return 1}



1;























