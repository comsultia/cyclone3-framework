#!/usr/bin/perl
# áéíóú - USE UTF-8 !!!
package CRON::module;

use Ext::SVGraph::_init;

use TOM::Net::HTTP;
use TOM::Net::HTTP::CGI;
use TOM::Net::HTTP::referer;
use Int::charsets::encode;

use Utils::datetime;

use strict;

sub execute
{
 my %env=@_;
 
 TOM::Database::connect::multi('stats') || die "cannot connect all databases";
 
 my $graf=SVGraph::2D::lines->new(
	title		=>	"SEO: New visitors accesses using keywords to domain $tom::H",
#	type		=>	"normal",	# normal/stacked(spojene)/percentage
#	type		=>	"stacked",	# normal/stacked(spojene)/overlap(prechadzanie)
	type		=>	"stacked",
#	reload	=>	600,
	x		=>	750,
	y		=>	300,

	show_legend		=>	1, # show legend of Columns
#	show_legend_reverse	 =>	1, # show legend of Columns
	show_points		=>	1,
#	show_points_middle	=>	1,
#	show_lines			=>	1,
	show_lines_smooth	=>	1,
	show_areas		=>	1,
#	show_lines_smooth_range	=>	1,
#	show_data			=>	1,
#	show_data_background=>	1,

#	grid_y_scale_minimum		=> 0, # zaciname od nuly
#	grid_y_scale_maximum		=>	15.00, #
#	grid_y_main_spacing			=>	0.10,

#	grid_y_main_lines			=>	10, # number of lines
	show_grid_x		=>	1,
	show_label_textsize	=>	10,
);

#$columns2{'AVG'}=$graf2->addColumn(title=>"AVG 31 days",color=>"blue",show_area=>1,show_area_opacity=>'0.35');
#$columns3{'AVG'}=$graf3->addColumn(title=>"AVG 31 days",color=>"blue",show_area=>1,show_area_opacity=>'0.35');


=head1
SELECT
   substring(reqdatetime,1,10) AS date,
   user_agent_name AS robot,
   COUNT(*) AS requests
FROM
   a110_weblog_rqs
WHERE
   domain_sub='webcom.sk' AND
   reqtype='R' AND
   active='Y'
GROUP BY 
   substring(reqdatetime,1,10),
   user_agent_name
ORDER BY
   date DESC,
   robot
=cut

my %columns;
my %keywords;
my %keywords_;

my $db0=$main::DB{stats}->Query("
	SELECT
		referer_SE,
		referer,
		substring(reqdatetime,1,10) AS date
	FROM
		a110_weblog_rqs
	WHERE
		domain_sub='$tom::H' AND
		reqtype='B' AND
		IDhash='' AND
		referer_SE IS NOT NULL AND
		reqtime>".($main::time_current-(86400*31))." AND
		active='Y'
");

my %weight_w;
my %weight_k;

while (my %db0_line=$db0->fetchhash)
{
#	main::_log("add SE '$db0_line{'referer_SE'}'");
#	$columns{$db0_line{'referer_SE'}}=$graf->addColumn(title=>$db0_line{'referer_SE'});
	
	
	my ($domain,$query)=TOM::Net::HTTP::domain_clear($db0_line{referer});
	if (my $dom=TOM::Net::HTTP::referer::analyze($domain))
	{
		#print "-i know domain $dom + $query\n" if $analyze;
		if (
				($TOM::Net::HTTP::referer::table{$dom}{domain_type} eq "search engine")
				&&($TOM::Net::HTTP::referer::table{$dom}{keywords_param})
			)
		{
			
			my $keyword_param=$TOM::Net::HTTP::referer::table{$dom}{keywords_param};
			
			main::_log("query='$query'");
			my %FORM=TOM::Net::HTTP::CGI::GetQuery($query);
			next if $FORM{$keyword_param}=~/^cache/;
			next unless $FORM{$keyword_param};
				
			$FORM{$keyword_param}=Int::charsets::encode::UTF8_ASCII($FORM{$keyword_param});
			$FORM{$keyword_param}=~tr/A-Z/a-z/;
			#$FORM{$keyword_param}=~s|"(.*?) (.*?)"|"$1<M>$2"|g;
			$FORM{$keyword_param}=~s|["+&]||g;
			
			$FORM{$keyword_param}=~s|\W| |g;
			
			$FORM{$keyword_param}=~s| |;|g;
			$FORM{$keyword_param}=~s|^;||;$FORM{$keyword_param}=~s|;$||;
			1 while ($FORM{$keyword_param}=~s|;;|;|);
			#$FORM{$keyword_param}=~s|<M>| |g;
			
			#main::_log("keywords='$FORM{$keyword_param}'");
			
			
#			$keywords{$word}{$db0_line{'date'}}++;
#			$keywords_{$word}++;
			
			my %key;
			foreach my $word(split(';',$FORM{$keyword_param}))
			{
				$key{$word}++;
				
				if ($word=~/^[A-Z]+$/ || length($word)>2)
				{
					$keywords{$word}{$db0_line{'date'}}++;
					$keywords_{$word}++;
				}
			}
			
			
			# by weight
			foreach my $key1(split(';',$FORM{$keyword_param}))
			{
				$weight_w{$key1}++;
				foreach my $key2(split(';',$FORM{$keyword_param}))
				{
					$weight_k{$key1}{$key2}++;
				}
			}
			
			
			
=head1
			my $word;
			foreach (sort keys %key)
			{
				$word.=$_.';';
			}
			$word=~s|;$||;
			
			$keywords{$word}{$db0_line{'date'}}++;
			$keywords_{$word}++;
=cut
			
			
		}
	}
	
}


# cleaning weight tables
foreach my $key1(sort {$weight_w{$b} <=> $weight_w{$a}}keys %weight_w)
{
	next unless $weight_w{$key1};
	foreach my $key2(keys %{$weight_k{$key1}})
	{
		delete $weight_w{$key2} if $key2 ne $key1;
	}
}

#print "vystup:\n";

# columns by weight table
=head1
my $i;
foreach my $key1(sort {$weight_w{$b} <=> $weight_w{$a}}keys %weight_w)
{
	$i++;
	$columns{$key1}=$graf->addColumn(title=>$key1);
	#print "$key1 $weight_w{$key1}\n";
	last if $i==10;
}
=cut

#=head1
my $i;
foreach (sort {$keywords_{$b} <=> $keywords_{$a}} keys %keywords)
{
	$i++;
	main::_log("keyword='$_' hits='$keywords_{$_}'");
	$columns{$_}=$graf->addColumn(title=>$_);
	last if $i==10;
}
#=cut

$columns{'_'}=$graf->addColumn(title=>'(others)',color=>'gray');



for my $day(1..30)
{
	my $timestamp=$main::time_current-(86400*(31-$day));
	my %date = Utils::datetime::ctodatetime($timestamp, format=>1 );
	#print "add label $date{year}-$date{mon}-$date{mday}\n";
	$graf->addRowLabel("$date{year}-$date{mon}-$date{mday}");
}

foreach my $word(keys %keywords)
{
	my $k=$word;
	
	$k='_' unless $columns{$word};
	next unless $columns{$k};
	
	foreach my $day(keys %{$keywords{$word}})
	{
		$columns{$k}->addData($day,$keywords{$word}{$day});
	}
}


#return 1;

eval
{
	alarm(5);
	open HND,">$cron::P/_data/SEkeywords.svg" or die "$!";
	my $out=$graf->prepare();
	$out=~s|[\s]+</text>|</text>|g;
	print HND $out; 
	alarm(0);
};
if ($@)
{
	die "error! $@\n";
}


return 1}



1;























