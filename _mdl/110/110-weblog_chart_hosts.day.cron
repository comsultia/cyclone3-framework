#!/usr/bin/perl
# áéíóú - USE UTF-8 !!!
package CRON::module;
#use App::400;
#use App::400::SQL::a400;

#use SVGraph;
use SVGraph::2D::lines;
use SVGraph::2D::columns;
#use SVGraph::2D::ring;

#use Net::HTTP::LiteAgent;

use Utils::datetime;

use strict;

sub execute
{
alarm(3600);
 my %env=@_;
 
 my $from=$main::time_current-(86400*2);
 my %date=Utils::datetime::ctodatetime($from,format=>1);
 my $from="$date{year}-$date{mom}-$date{mday} $date{hour}";
 
 my %date=Utils::datetime::ctodatetime(time,format=>1);
 my $to="$date{year}-$date{mom}-$date{mday} $date{hour}";

 Database::connect::multi('stats') || die "cannot connect all databases";
 
 my %date=Utils::datetime::ctodatetime(time-(86400*31),format=>1);
 my $from2="$date{year}-$date{mom}-$date{mday}";
 
 my %date=Utils::datetime::ctodatetime(time-3600,format=>1);
 my $now="$date{hour}";
 
 CRON::debug::log(5,"generating from $from:00");
 
 
 
 my $graf=SVGraph::2D::columns->new(
	title		=>	"Generated pages of all domains by host from $from:00",
#	type		=>	"normal",	# normal/stacked(spojene)/percentage
#	type		=>	"stacked",	# normal/stacked(spojene)/overlap(prechadzanie)
	type		=>	"stacked",
	reload	=>	600,
	x		=>	1000,
	y		=>	400,

	show_legend		=>	1, # show legend of Columns
#	show_legend_reverse	 =>	1, # show legend of Columns
#	show_points		=>	1,
#	show_points_middle	=>	1,
#	show_lines			=>	1,
#	show_lines_smooth	=>	1,
#	show_areas		=>	1,
#	show_lines_smooth_range	=>	1,
#	show_data			=>	1,
#	show_data_background=>	1,

	grid_y_scale_minimum		=> 0, # zaciname od nuly
#	grid_y_scale_maximum		=>	15.00, #
#	grid_y_main_spacing			=>	0.10,

#	grid_y_main_lines			=>	10, # number of lines
	show_grid_x		=>	1,
	show_label_textsize	=>	10,
);


 my $graf_p=SVGraph::2D::columns->new(
	title		=>	"Generated pages of all domains by host from $from:00",
	type		=>	"percentage",
	reload	=>	600,
	x		=>	1000,
	y		=>	400,
	show_legend		=>	1, # show legend of Columns
#	show_legend_reverse	 =>	1, # show legend of Columns
	show_grid_x		=>	1,
	show_label_textsize	=>	10,
#	show_data			=>	1,
#	show_data_background=>	1,
);


 my $graf2=SVGraph::2D::lines->new(
	title		=>	"Availability by host",
	type		=>	"normal",	# normal/stacked(spojene)	
	reload	=>	600,
	x		=>	1000,
	y		=>	400,
	show_legend			 =>	1, # show legend of Columns
	show_lines_smooth	=>	1,
	grid_y_scale_minimum => 0, # zaciname od nuly
	show_grid_x		=>	1,
);

my $graf2_p=SVGraph::2D::lines->new(
	title		=>	"Availability by host",
	type		=>	"percentage",	# normal/stacked(spojene)	
	reload	=>	600,
	x		=>	1000,
	y		=>	400,
	show_legend			 =>	1, # show legend of Columns
	show_lines_smooth	=>	1,
	show_grid_x		=>	1,
);


 my $graf3=SVGraph::2D::lines->new(
	title		=>	"Availability by host (CPU)",
	type		=>	"normal",	# normal/stacked(spojene)	
	reload	=>	600,
	x		=>	1000,
	y		=>	400,
	show_legend			=>	1, # show legend of Columns
	show_lines_smooth	=>	1,
	grid_y_scale_minimum => 0, # zaciname od nuly
	show_grid_x		=>	1,
);

my $graf3_p=SVGraph::2D::lines->new(
	title		=>	"Availability by host (CPU)",
	type		=>	"percentage",	# normal/stacked(spojene)	
	reload	=>	600,
	x		=>	1000,
	y		=>	400,
	show_legend			 =>	1, # show legend of Columns
	show_lines_smooth	=>	1,
	show_grid_x		=>	1,
);



#$graf->addValueMark(200000);

#$graf->addValueMarkArea(200000,
#	front			=> 0,
#	color			=> "green",
#	);


my $db0=$main::DB{stats}->Query("
	SELECT host
	FROM `a110_weblog_rqs` 
	GROUP BY host
	ORDER BY host
");
my %columns;
my %columns_p;
my %columns2;
my %columns2_p;
my %columns3;
my %columns3_p;

$columns2{'AVG'}=$graf2->addColumn(title=>"AVG 31 days",color=>"blue",show_area=>1,show_area_opacity=>'0.35');
$columns3{'AVG'}=$graf3->addColumn(title=>"AVG 31 days",color=>"blue",show_area=>1,show_area_opacity=>'0.35');

while (my %db0_line=$db0->fetchhash)
{
	main::_log(5,"add column $db0_line{host}");
	$columns{$db0_line{host}}=$graf->addColumn(title=>$db0_line{host});
	$columns_p{$db0_line{host}}=$graf_p->addColumn(title=>$db0_line{host});
	$columns2{$db0_line{host}}=$graf2->addColumn(title=>$db0_line{host},show_points=>1);
	$columns2_p{$db0_line{host}}=$graf2_p->addColumn(title=>$db0_line{host});
	$columns3{$db0_line{host}}=$graf3->addColumn(title=>$db0_line{host},show_points=>1);
	$columns3_p{$db0_line{host}}=$graf3_p->addColumn(title=>$db0_line{host});
}

my $db0=$main::DB{stats}->Query("
	SELECT
		SUBSTRING(reqdatetime,1,13) AS reqdatetime,
		host,
		COUNT(*) AS cnt,
		AVG(load_req) AS load_req,
		AVG(load_proc) AS load_proc
	FROM TOM.a110_weblog_rqs
	WHERE
		reqdatetime>'$from' AND
		reqdatetime<'$to'
	GROUP BY SUBSTRING(reqdatetime,1,13),host
	ORDER BY SUBSTRING(reqdatetime,1,13)
");

#print "reqdatetime>'$from' AND reqdatetime<'$to'";

#my %labels;
while (my %db0_line=$db0->fetchhash)
{
	#print ""
	#$db0_line[0]=~s|.markiza.sk$|...|;
	$db0_line{reqdatetime}.=":00";
	$graf->addRowLabel($db0_line{reqdatetime});
	$graf_p->addRowLabel($db0_line{reqdatetime});
	$graf2->addRowLabel($db0_line{reqdatetime});
	$graf2_p->addRowLabel($db0_line{reqdatetime});
	$graf3->addRowLabel($db0_line{reqdatetime});
	$graf3_p->addRowLabel($db0_line{reqdatetime});
	#main::_log(5,"add $db0_line{reqdatetime} $db0_line{cnt} $db0_line{host}");
	
	$columns{$db0_line{host}}->addData($db0_line{reqdatetime},$db0_line{cnt});
	$columns_p{$db0_line{host}}->addData($db0_line{reqdatetime},$db0_line{cnt});
	$columns2{$db0_line{host}}->addData($db0_line{reqdatetime},int($db0_line{load_req}*1000)/1000);
	$columns2_p{$db0_line{host}}->addData($db0_line{reqdatetime},$db0_line{load_req});
	
	$columns3{$db0_line{host}}->addData($db0_line{reqdatetime},int($db0_line{load_proc}*1000)/1000);
	$columns3_p{$db0_line{host}}->addData($db0_line{reqdatetime},$db0_line{load_proc});
	
	 if ($db0_line{reqdatetime}=~/00:00$/)
	{
		$graf->addRowMark($db0_line{reqdatetime},
			front			=>1,
			show_label		=>1,
#			size			=>1.5,
		);
		$graf_p->addRowMark($db0_line{reqdatetime},
			front			=>1,
			show_label		=>1,
#			size			=>1.5,
		);
		$graf2->addRowMark($db0_line{reqdatetime},
			front			=>1,
			show_label		=>1,
		);
		$graf2_p->addRowMark($db0_line{reqdatetime},
			front			=>1,
			show_label		=>1,
		);
		$graf3->addRowMark($db0_line{reqdatetime},
			front			=>1,
			show_label		=>1,
		);
		$graf3_p->addRowMark($db0_line{reqdatetime},
			front			=>1,
			show_label		=>1,
		);
	}
	
	if ($db0_line{reqdatetime}=~/^\d\d\d\d-\d\d-\d\d $now/)
	{
		$graf->addRowMark($db0_line{reqdatetime},
			front			=>1,
			show_label	=>1,
			color			=>"red",
#			size			=>1.5,
		);
		$graf_p->addRowMark($db0_line{reqdatetime},
			front			=>1,
			show_label	=>1,
			color			=>"red",
#			size			=>1.5,
		);
		$graf2->addRowMark($db0_line{reqdatetime},
			front			=>1,
			show_label	=>1,
			color			=>"red",
		);
		$graf2_p->addRowMark($db0_line{reqdatetime},
			front			=>1,
			show_label	=>1,
			color			=>"red",
		);
		$graf3->addRowMark($db0_line{reqdatetime},
			front			=>1,
			show_label	=>1,
			color			=>"red",
		);
		$graf3_p->addRowMark($db0_line{reqdatetime},
			front			=>1,
			show_label	=>1,
			color			=>"red",
		);
	}
	
	
}


CRON::debug::log(5,"doplnenie priemernych hodnot dna");
my $db0=$main::DB{stats}->Query("
	SELECT
		SUBSTRING(reqdatetime,12,2) AS reqhour,
		AVG(load_req) AS load_req0,
		AVG(load_proc) AS load_proc0,
		AVG(load_req*visits)/AVG(visits) AS load_req,
		AVG(load_proc*visits)/AVG(visits) AS load_proc
	FROM `a110_weblog_hour`
	WHERE reqdatetime>'$from2' AND domain_sub<>'' AND reqdatetime<'$to'
	GROUP BY SUBSTRING(reqdatetime,12,2)
");
while (my %db0_line=$db0->fetchhash())
{
	#main::_log(5,"$db0_line{reqhour} $db0_line{load_req}");
	foreach my $label (@{$graf2->{row}{label}})
	{
		#main::_log(6,"label $label");
		if ($label=~/$db0_line{reqhour}:00$/)
		{
			#main::_log(7,"adding here");
			$columns2{'AVG'}->addData($label,$db0_line{load_req});
			$columns3{'AVG'}->addData($label,$db0_line{load_proc});
		}
	}
}


foreach (keys %columns2)
{
	$graf2->addValueMark($columns2{$_}->GetAVG,
		front			=>0,
		right			=>1,
		show_label		=>1,
		show_label_text	=>(int($columns2{$_}->GetAVG*1000)/1000)." avg"
	);
}

foreach (keys %columns3)
{
	$graf3->addValueMark($columns3{$_}->GetAVG,
		front			=>0,
		right			=>1,
		show_label		=>1,
		show_label_text	=>(int($columns3{$_}->GetAVG*1000)/1000)." avg"
	);
}


eval
{
	alarm(5);
	open HND,">$CRON::P/_data/pages_hosts_hours.svg" or die "$!";
	my $out=$graf->prepare();
	$out=~s|[\s]+</text>|</text>|g;
	#print $out."\n\n";
	print HND $out; 
	alarm(0);
};
if ($@)
{
	die "error! $@\n";
}
CRON::debug::log(6,"generated");

eval
{
	alarm(5);
	open HND,">$CRON::P/_data/pages_hosts_hoursP.svg" or die "$!";
	my $out=$graf_p->prepare();
	$out=~s|[\s]+</text>|</text>|g;
	#print $out."\n\n";
	print HND $out; 
	alarm(0);
};
if ($@)
{
	die "error! $@\n";
}
CRON::debug::log(6,"generated");

eval
{
	alarm(5);
	open HND,">$CRON::P/_data/availability_hosts_hours.svg" or die "$!";
	my $out=$graf2->prepare();
	$out=~s|[\s]+</text>|</text>|g;
	#print $out."\n\n";
	print HND $out; 
	alarm(0);
};
if ($@)
{
	die "error! $@\n";
}
CRON::debug::log(6,"generated");

eval
{
	alarm(5);
	open HND,">$CRON::P/_data/availability_hosts_hoursP.svg" or die "$!";
	my $out=$graf2_p->prepare();
	$out=~s|[\s]+</text>|</text>|g;
	#print $out."\n\n";
	print HND $out; 
	alarm(0);
};
if ($@)
{
	die "error! $@\n";
}
CRON::debug::log(6,"generated");



eval
{
	alarm(5);
	open HND,">$CRON::P/_data/availability_hosts_hours_cpu.svg" or die "$!";
	my $out=$graf3->prepare();
	$out=~s|[\s]+</text>|</text>|g;
	#print $out."\n\n";
	print HND $out; 
	alarm(0);
};
if ($@)
{
	die "error! $@\n";
}
CRON::debug::log(6,"generated");

eval
{
	alarm(5);
	open HND,">$CRON::P/_data/availability_hosts_hours_cpuP.svg" or die "$!";
	my $out=$graf3_p->prepare();
	$out=~s|[\s]+</text>|</text>|g;
	#print $out."\n\n";
	print HND $out; 
	alarm(0);
};
if ($@)
{
	die "error! $@\n";
}
CRON::debug::log(6,"generated");



return 1}



1;























